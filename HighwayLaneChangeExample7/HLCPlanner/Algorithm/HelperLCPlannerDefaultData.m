classdef HelperLCPlannerDefaultData
    % HelperLCPlannerDefaultData specifies the default values required for
    % lane change planner.
    %
    % NOTE: The name of this class and it's functionality may change 
    % without notice in a future release, or the class itself may be 
    % removed.
    %
    
    % Copyright 2021-2022 The MathWorks, Inc.
    properties(Constant)
        % 36 length char used for lane ID and lane boundary ID
        ID = repmat('0', 1, 36);
    end

    methods(Static)
        % /////////////////////////////////////////////////////////////////
       function out = EgoAndTargetStates()
            out = struct(...
                    "NumTargetActors", 0,...
                    "TargetGlobalStates", zeros(31,6),...
                    "TargetFrenetStates", zeros(31,6),...
                    "TargetIDs", zeros(31,1),...
                    "EgoGlobalState", zeros(1,6),...
                    "EgoFrenetState", zeros(1,6));
       end

       % /////////////////////////////////////////////////////////////////
       function out = TerminalStates()
            out = struct(...
                    "NumStates", 0,...
                    "TerminalStates", zeros(10,7));
       end

       % /////////////////////////////////////////////////////////////////
       function out = TerminalStateCombinations()
            out = struct(...
                    "NumCombinations", uint8(0),...
                    "Combinations", zeros(30,7),...
                    "BehaviorType", zeros(30,1,'uint8'),...
                    "Cost", zeros(30,1));
       end

       % /////////////////////////////////////////////////////////////////
       function out = MIOInfo()
            out = struct(...
                    "NumMIOs", 0,...
                    "LaneNum", zeros(100,1),...
                    "TTC", zeros(100,1),...
                    "RelativeDist", zeros(100,1),...
                    "RelativeVelo", zeros(100,1),...
                    "IsSafe", zeros(100,1),...
                    "IsFront", zeros(100,1));
       end

       % /////////////////////////////////////////////////////////////////
       function out = MIOFrenetStates()
            out = struct(...
                    "NumMIOs", 0,...
                    "TargetIds", zeros(1,100),...
                    "MIOStates", zeros(100,6));
       end

       % /////////////////////////////////////////////////////////////////
       function out = GlobalTrajectory()
            out = struct(...
                    "Trajectory", zeros(31,6),...
                    "Times", zeros(31,1),...
                    "NumTrajPoints", 0,...
                    "IsValid", false,...
                    "IsEvaluated", false,...
                    "IsColliding", false,...
                    "BehaviorType", uint8(0));
       end

       % /////////////////////////////////////////////////////////////////
       function out = GlobalTrajectories()
            out = struct(...
                    "NumTrajectories", 0,...
                    "IsNew", 0,...
                    "OptimalTrajectoryIndex", 0,...
                    "GlobalTrajectory",repmat(HelperLCPlannerDefaultData.GlobalTrajectory,30,1));
       end

       % /////////////////////////////////////////////////////////////////
       function out = PredictedTrajectory()
            out = struct(...
                    "TargetID", uint8(0),...
                    "NumPts", uint16(0),...
                    "Trajectory", zeros(31,6));
       end

       % /////////////////////////////////////////////////////////////////
       function out = PredictedTrajectories()
            out = struct(...
                    "NumTrajs", uint8(0),...
                    "TargetIDs", zeros(50,1,'uint8'),...
                    "Trajectories", repmat(HelperLCPlannerDefaultData.PredictedTrajectory,50,1));
       end

       % /////////////////////////////////////////////////////////////////
       function out = RefPointOnPath()
            out = struct(...
                    "CurrPoseRr", zeros(1,3),...
                    "RefPoseRr", zeros(1,3),...
                    "LatOffset", 0,...
                    "RefCurvature", 0,...
                    "RefCurvatureDer", 0,...
                    "RefYawDiff", 0,...
                    "RefVelocity", 0,...
                    "RefAccel", 0,...
                    "RefAngVel", 0);
       end

    end

end

