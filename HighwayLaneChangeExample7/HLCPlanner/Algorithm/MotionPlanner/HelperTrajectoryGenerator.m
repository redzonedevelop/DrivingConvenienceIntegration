classdef HelperTrajectoryGenerator < matlab.System    
    %HelperTrajectoryGenerator System Object generates sampled trajectories
    %for the ego vehicle using the sorted terminal states.
    %
    % HelperTrajectoryGenerator system object uses the
    % trajectoryGeneratorFrenet function to generate the trajectories for
    % the ego vehicle at every replan cycle. The default replan cycle is
    % 1sec. The trajectoryGeneratorFrenet object is created and updated
    % based on the information received from the up stream blocks. The
    % global trajectories generated from this system object corresponding
    % to the terminal states are passed to the Validity Checker block.
    %
    % Step Method Syntax:function GlobalTrajectories = stepImpl(obj,
    % SortedTerminalStates, EgoAndTargetStates, LaneInfo, ReplanFlag)
    % returns a structure, GlobalTrajectories containing the trajectories
    % generated corresponding to the terminal states, SortedTerminalStates,
    % ego Frenet state, EgoAndTargetStates, global plan points, LaneInfo,
    % and replan flag, ReplanFlag.
    %
    % For more information see trajectoryGeneratorFrenet
    %
    % NOTE: The name of this System Object and it's functionality may
    % change without notice in a future release, or the System Object
    % itself may be removed.
    %
    
    % Copyright 2020-2022 The MathWorks, Inc.
    
    
    % Private Variables
    properties(Access = private)
        %Connector holds the instance of trajectoryGeneratorFreent.
        % This object is used to generate the sampled trajectories for the
        % ego vehicle.
        Connector;
        
        %RefPathFrenet holds the instance of referencePathFrenet.
        % The RefPathFrenet holds the instance of referencePathFrenet. This
        % is used to instantiate trajectoryGeneratorFrenet.
        RefPathFrenet;
        
        %PreviousTrajectory holds the generated trajectories in the
        %previous replan cycle.
        % PreviousTrajectory variable is a structure containing trajectory
        % points, and corresponding time samples.
        PreviousTrajectory;
        
        %NumTrajectories holds the number of trajectories generated by the
        %trajectoryGeneratorFrenet.
        % NumTrajectories holds the value of number of trajectories
        % generated by the trajectoryGeneratorFrenet at every replan
        % cycle.
        NumTrajectories;
        
        %RefPathPoints holds the waypoints for the global plan.
        % The RefPathPoints holds the waypoints of the global plan. The
        % default value is [0 0;600 0]
        RefPathPoints;
    end
    
    %----------------------------------------------------------------------
    % Main algorithm
    %----------------------------------------------------------------------
    
    methods
        function obj = HelperTrajectoryGenerator(varargin)
            % Support name-value pair arguments when constructing object
            setProperties(obj,nargin,varargin{:})
            coder.varsize('referencePathPoints');
            referencePathPoints = [0 0; 600, 0];
            obj.RefPathPoints = referencePathPoints;
        end
    end
    
    methods(Access = protected)
        %------------------------------------------------------------------
        function setupImpl(obj)
            % setupImpl function performs the one time calculations and
            % Initializations.
            % The setupImpl function is used to initialize values or
            % the object to RefPathFrenet, connector, and
            % PreviousTrajectory.
            
            % Initializing the reference path Frenet with a default
            % reference path.
            obj.RefPathFrenet = referencePathFrenet(obj.RefPathPoints);
            
            % mInitialize the connector object for the set initial
            % reference path
            obj.Connector = trajectoryGeneratorFrenet(obj.RefPathFrenet,'TimeResolution',0.1);
            
            % Creating a structure for storing the trajectories and the
            % time.
            obj.PreviousTrajectory = HelperLCPlannerDefaultData.GlobalTrajectories().GlobalTrajectory;
            obj.NumTrajectories = 0;
        end
        %------------------------------------------------------------------
        function GlobalTrajectories = stepImpl(obj,...
                SortedTerminalStates,...
                timeStep,...
                EgoAndTargetStates,...
                RefPointOnPath,...
                MapInfo,...
                ReplanFlag)
            % stepImpl executes the main algorithm for the
            % HelperTrajectoryGenerator and generates the trajectories at
            % every replan cycle.
            %
            % The stepImpl method updates the RefPathFrenet object by
            % checking for the update in waypoints. This method also
            % invokes connect method of trajectoryGeneratorFrenet to
            % generate trajectories corresponding to SortedTerminalStates.
%             obj.Connector.TimeResolution = timeStep;
            % Check if there is a replan required.
            if(ReplanFlag)
                
                % Check if there is any update in waypoints and update the
                % RefPathFrenet object accordingly.
                if ~isequal(obj.RefPathPoints, MapInfo.GlobalPlanPoints(1:MapInfo.NumGlobalPlanPoints,:))
                    obj.RefPathPoints = MapInfo.GlobalPlanPoints(1:MapInfo.NumGlobalPlanPoints,:);
                    obj.RefPathFrenet.Waypoints = obj.RefPathPoints;
                end
                
                % Get the ego state in Frenet coordinates
                if getCurrentTime(obj) > 0
                    egoGlobalState = [RefPointOnPath.RefPoseRr(1:2) deg2rad(RefPointOnPath.RefPoseRr(3)) RefPointOnPath.RefCurvature RefPointOnPath.RefVelocity RefPointOnPath.RefAccel];
                    egoFrenetState = obj.RefPathFrenet.global2frenet(egoGlobalState);
                else
                    egoFrenetState = EgoAndTargetStates.EgoFrenetState(1:6);
                end                
                
                % Get terminal states and terminal times from the input bus
                numTerminalStates = SortedTerminalStates.NumCombinations;
                terminalStates = SortedTerminalStates.Combinations(1:numTerminalStates,1:6);
                terminalTimes = SortedTerminalStates.Combinations(1:numTerminalStates,7);
               
                % Invoke connect method and generate trajectories
                % corresponding to terminal states.
                [~, trajectory] = obj.Connector.connect(egoFrenetState, terminalStates, terminalTimes);
                
                obj.NumTrajectories = size(trajectory,1);
                
                % Update PreviousTrajectory with generated trajectories
                % data.
                for i=1:obj.NumTrajectories
                    numTrajPoints = size(trajectory(i).Trajectory,1);
                    obj.PreviousTrajectory(i).Times(1:numTrajPoints) = trajectory(i).Times;
                    obj.PreviousTrajectory(i).Trajectory(1:numTrajPoints,:) = trajectory(i).Trajectory;
                    obj.PreviousTrajectory(i).NumTrajPoints = numTrajPoints;
                    obj.PreviousTrajectory(i).BehaviorType = SortedTerminalStates.BehaviorType(i);
                end
            end
            
            % Update the output GlobalTrajectories structure
            GlobalTrajectories.NumTrajectories = obj.NumTrajectories;
            GlobalTrajectories.IsNew = false;
            GlobalTrajectories.OptimalTrajectoryIndex = 0;
            GlobalTrajectories.GlobalTrajectory = obj.PreviousTrajectory;
        end
    end
    
    %----------------------------------------------------------------------
    % Common methods
    %----------------------------------------------------------------------
    methods(Access = protected)
        %------------------------------------------------------------------
        function s = saveObjectImpl(obj)
            % save object
            s = saveObjectImpl@matlab.System(obj);
        end
        
        %------------------------------------------------------------------
        function loadObjectImpl(obj,s,wasLocked)
            % load object
            loadObjectImpl@matlab.System(obj,s,wasLocked);
        end
    end
    
    %----------------------------------------------------------------------
    % Simulink-only methods
    %----------------------------------------------------------------------
    methods(Access = protected)
        %------------------------------------------------------------------
        function GlobalTraj=getOutputSizeImpl(~)
            % Return size for each output port
            GlobalTraj=1;
        end
        
        %------------------------------------------------------------------
        function Trajectory= getOutputDataTypeImpl(~)
            % Return data type for each output port
            Trajectory="BusGlobalTrajectories";
            
        end
        
        %------------------------------------------------------------------
        function Trajectory= isOutputComplexImpl(~)
            % Return true for each output port with complex data
            Trajectory= false;
            
        end
        
        %------------------------------------------------------------------
        function Trajectory= isOutputFixedSizeImpl(~)
            % Return true for each output port with fixed size
            Trajectory= true;
        end        
    end    
end
