
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000239c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  080024a8  080024a8  000034a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028d4  080028d4  0000401c  2**0
                  CONTENTS
  4 .ARM          00000000  080028d4  080028d4  0000401c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028d4  080028d4  0000401c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028d4  080028d4  000038d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080028d8  080028d8  000038d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080028dc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  20000020  080028f8  00004020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  080028f8  000044c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000401c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008990  00000000  00000000  00004045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000229a  00000000  00000000  0000c9d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  0000ec70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006aa  00000000  00000000  0000f558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b80  00000000  00000000  0000fc02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc05  00000000  00000000  00027782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082742  00000000  00000000  00034387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6ac9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002104  00000000  00000000  000b6b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000b8c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08002490 	.word	0x08002490

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08002490 	.word	0x08002490

0800014c <bootInit>:

#include "hw.h"


uint16_t bootInit(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
	uint16_t err_code = CMD_OK;
 8000152:	2300      	movs	r3, #0
 8000154:	81fb      	strh	r3, [r7, #14]
	fw_meta_t *meta  = (fw_meta_t *)(FLASH_ADDR_FIRM);
 8000156:	4b11      	ldr	r3, [pc, #68]	@ (800019c <bootInit+0x50>)
 8000158:	60bb      	str	r3, [r7, #8]
	fw_meta_t fw_meta;
	if(meta->ecu == 0xFF)
 800015a:	68bb      	ldr	r3, [r7, #8]
 800015c:	781b      	ldrb	r3, [r3, #0]
 800015e:	2bff      	cmp	r3, #255	@ 0xff
 8000160:	d116      	bne.n	8000190 <bootInit+0x44>
	{
	  	fw_meta.ecu 		= 14;
 8000162:	230e      	movs	r3, #14
 8000164:	703b      	strb	r3, [r7, #0]
	  	fw_meta.version     = 0;
 8000166:	2300      	movs	r3, #0
 8000168:	707b      	strb	r3, [r7, #1]
	  	fw_meta.size		= 47 * 1024;
 800016a:	f44f 433c 	mov.w	r3, #48128	@ 0xbc00
 800016e:	807b      	strh	r3, [r7, #2]

	    if (flashWrite(FLASH_ADDR_FIRM, (uint8_t *)&fw_meta, sizeof(fw_meta_t)) != true)
 8000170:	463b      	mov	r3, r7
 8000172:	2208      	movs	r2, #8
 8000174:	4619      	mov	r1, r3
 8000176:	4809      	ldr	r0, [pc, #36]	@ (800019c <bootInit+0x50>)
 8000178:	f000 fabc 	bl	80006f4 <flashWrite>
 800017c:	4603      	mov	r3, r0
 800017e:	f083 0301 	eor.w	r3, r3, #1
 8000182:	b2db      	uxtb	r3, r3
 8000184:	2b00      	cmp	r3, #0
 8000186:	d001      	beq.n	800018c <bootInit+0x40>
	    {
	      err_code = ERR_BOOT_FLASH_WRITE;
 8000188:	230e      	movs	r3, #14
 800018a:	81fb      	strh	r3, [r7, #14]
	    }
	    resetToBoot();
 800018c:	f000 fd06 	bl	8000b9c <resetToBoot>
	}
	return err_code;
 8000190:	89fb      	ldrh	r3, [r7, #14]

}
 8000192:	4618      	mov	r0, r3
 8000194:	3710      	adds	r7, #16
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	08008000 	.word	0x08008000

080001a0 <bootVerifyFirm>:
  // 4) 비교
  return (update_meta.crc == crc) ? CMD_OK : ERR_BOOT_FW_CRC;
}

uint16_t bootVerifyFirm(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b0a8      	sub	sp, #160	@ 0xa0
 80001a4:	af00      	add	r7, sp, #0
  fw_meta_t fw_meta;

  if (flashRead(FLASH_ADDR_UPDATE, (uint8_t*)&fw_meta, sizeof(fw_meta)) != true)
 80001a6:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80001aa:	2208      	movs	r2, #8
 80001ac:	4619      	mov	r1, r3
 80001ae:	483a      	ldr	r0, [pc, #232]	@ (8000298 <bootVerifyFirm+0xf8>)
 80001b0:	f000 fae7 	bl	8000782 <flashRead>
 80001b4:	4603      	mov	r3, r0
 80001b6:	f083 0301 	eor.w	r3, r3, #1
 80001ba:	b2db      	uxtb	r3, r3
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d001      	beq.n	80001c4 <bootVerifyFirm+0x24>
	  Error_Handler();
 80001c0:	f000 fcae 	bl	8000b20 <Error_Handler>

  uint32_t crc = 0xFFFFFFFF;
 80001c4:	f04f 33ff 	mov.w	r3, #4294967295
 80001c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t addr = FLASH_ADDR_FIRM + FLASH_SIZE_META;
 80001cc:	4b33      	ldr	r3, [pc, #204]	@ (800029c <bootVerifyFirm+0xfc>)
 80001ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  uint32_t remaining = fw_meta.size - sizeof(uint32_t);
 80001d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80001d6:	3b04      	subs	r3, #4
 80001d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint8_t  buf[128];

  while (remaining)
 80001dc:	e046      	b.n	800026c <bootVerifyFirm+0xcc>
  {
      uint32_t chunk = remaining > sizeof(buf) ? sizeof(buf) : remaining;
 80001de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80001e2:	2b80      	cmp	r3, #128	@ 0x80
 80001e4:	bf28      	it	cs
 80001e6:	2380      	movcs	r3, #128	@ 0x80
 80001e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (!flashRead(addr, buf, chunk))
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80001f2:	4619      	mov	r1, r3
 80001f4:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 80001f8:	f000 fac3 	bl	8000782 <flashRead>
 80001fc:	4603      	mov	r3, r0
 80001fe:	f083 0301 	eor.w	r3, r3, #1
 8000202:	b2db      	uxtb	r3, r3
 8000204:	2b00      	cmp	r3, #0
 8000206:	d001      	beq.n	800020c <bootVerifyFirm+0x6c>
          return ERR_BOOT_FLASH_READ;
 8000208:	2315      	movs	r3, #21
 800020a:	e041      	b.n	8000290 <bootVerifyFirm+0xf0>

      for (uint32_t i = 0; i < chunk; i++)
 800020c:	2300      	movs	r3, #0
 800020e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000212:	e017      	b.n	8000244 <bootVerifyFirm+0xa4>
          crc = (crc >> 8) ^ crc_table[(crc ^ buf[i]) & 0xFF];
 8000214:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000218:	0a1a      	lsrs	r2, r3, #8
 800021a:	1d39      	adds	r1, r7, #4
 800021c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000220:	440b      	add	r3, r1
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	4619      	mov	r1, r3
 8000226:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800022a:	404b      	eors	r3, r1
 800022c:	b2db      	uxtb	r3, r3
 800022e:	491c      	ldr	r1, [pc, #112]	@ (80002a0 <bootVerifyFirm+0x100>)
 8000230:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000234:	4053      	eors	r3, r2
 8000236:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
      for (uint32_t i = 0; i < chunk; i++)
 800023a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800023e:	3301      	adds	r3, #1
 8000240:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000244:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000248:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800024c:	429a      	cmp	r2, r3
 800024e:	d3e1      	bcc.n	8000214 <bootVerifyFirm+0x74>

      addr      += chunk;
 8000250:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000254:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000258:	4413      	add	r3, r2
 800025a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      remaining -= chunk;
 800025e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000262:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000266:	1ad3      	subs	r3, r2, r3
 8000268:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  while (remaining)
 800026c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000270:	2b00      	cmp	r3, #0
 8000272:	d1b4      	bne.n	80001de <bootVerifyFirm+0x3e>
  }
  crc ^= 0xFFFFFFFF;
 8000274:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000278:	43db      	mvns	r3, r3
 800027a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

  // 4) 비교
  return (fw_meta.crc == crc) ? CMD_OK : ERR_BOOT_FW_CRC;
 800027e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000282:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8000286:	429a      	cmp	r2, r3
 8000288:	d101      	bne.n	800028e <bootVerifyFirm+0xee>
 800028a:	2300      	movs	r3, #0
 800028c:	e000      	b.n	8000290 <bootVerifyFirm+0xf0>
 800028e:	2311      	movs	r3, #17
}
 8000290:	4618      	mov	r0, r3
 8000292:	37a0      	adds	r7, #160	@ 0xa0
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	08014000 	.word	0x08014000
 800029c:	08008400 	.word	0x08008400
 80002a0:	080024a8 	.word	0x080024a8

080002a4 <bootUpdateFirm>:


uint16_t bootUpdateFirm(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 80002aa:	af00      	add	r7, sp, #0
  uint8_t err_code = CMD_OK;
 80002ac:	2300      	movs	r3, #0
 80002ae:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
  fw_meta_t tag;

  fw_meta_t *p_tag = (fw_meta_t *)&tag;
 80002b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80002b6:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
  // Read Tag
  //
  if(flashRead(FLASH_ADDR_UPDATE, (uint8_t *)p_tag, sizeof(fw_meta_t)) != true)
 80002ba:	2208      	movs	r2, #8
 80002bc:	f8d7 1214 	ldr.w	r1, [r7, #532]	@ 0x214
 80002c0:	4842      	ldr	r0, [pc, #264]	@ (80003cc <bootUpdateFirm+0x128>)
 80002c2:	f000 fa5e 	bl	8000782 <flashRead>
 80002c6:	4603      	mov	r3, r0
 80002c8:	f083 0301 	eor.w	r3, r3, #1
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <bootUpdateFirm+0x32>
  {
	  Error_Handler();
 80002d2:	f000 fc25 	bl	8000b20 <Error_Handler>
  }


  // Erase F/W
  //
  if (flashErase(FLASH_ADDR_FIRM, FLASH_SIZE_META + p_tag->size) != true)
 80002d6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80002da:	885b      	ldrh	r3, [r3, #2]
 80002dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80002e0:	4619      	mov	r1, r3
 80002e2:	483b      	ldr	r0, [pc, #236]	@ (80003d0 <bootUpdateFirm+0x12c>)
 80002e4:	f000 f9b0 	bl	8000648 <flashErase>
 80002e8:	4603      	mov	r3, r0
 80002ea:	f083 0301 	eor.w	r3, r3, #1
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <bootUpdateFirm+0x54>
  {
	  Error_Handler();
 80002f4:	f000 fc14 	bl	8000b20 <Error_Handler>
    // Write F/W
    //
    uint32_t index;
    uint32_t fw_size;

    index = 0;
 80002f8:	2300      	movs	r3, #0
 80002fa:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
    fw_size = FLASH_SIZE_META + p_tag->size;
 80002fe:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000302:	885b      	ldrh	r3, [r3, #2]
 8000304:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000308:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210

    while(index < fw_size)
 800030c:	e046      	b.n	800039c <bootUpdateFirm+0xf8>
      uint8_t buf[512];
      uint32_t wr_size;
      uint32_t wr_addr;


      wr_addr = FLASH_ADDR_UPDATE + index;
 800030e:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8000312:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8000316:	f503 33a0 	add.w	r3, r3, #81920	@ 0x14000
 800031a:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
      wr_size = constrain(fw_size-index, 0, 512);
 800031e:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8000322:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800032c:	bf28      	it	cs
 800032e:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8000332:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208

      if (flashRead(wr_addr, buf, wr_size) != true)
 8000336:	463b      	mov	r3, r7
 8000338:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 800033c:	4619      	mov	r1, r3
 800033e:	f8d7 020c 	ldr.w	r0, [r7, #524]	@ 0x20c
 8000342:	f000 fa1e 	bl	8000782 <flashRead>
 8000346:	4603      	mov	r3, r0
 8000348:	f083 0301 	eor.w	r3, r3, #1
 800034c:	b2db      	uxtb	r3, r3
 800034e:	2b00      	cmp	r3, #0
 8000350:	d003      	beq.n	800035a <bootUpdateFirm+0xb6>
      {
        err_code = ERR_BOOT_FLASH_READ;
 8000352:	2315      	movs	r3, #21
 8000354:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
        break;
 8000358:	e026      	b.n	80003a8 <bootUpdateFirm+0x104>
      }

      wr_addr = FLASH_ADDR_FIRM + index;
 800035a:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 800035e:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8000362:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000366:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

      if (flashWrite(wr_addr, buf, wr_size) != true)
 800036a:	463b      	mov	r3, r7
 800036c:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8000370:	4619      	mov	r1, r3
 8000372:	f8d7 020c 	ldr.w	r0, [r7, #524]	@ 0x20c
 8000376:	f000 f9bd 	bl	80006f4 <flashWrite>
 800037a:	4603      	mov	r3, r0
 800037c:	f083 0301 	eor.w	r3, r3, #1
 8000380:	b2db      	uxtb	r3, r3
 8000382:	2b00      	cmp	r3, #0
 8000384:	d003      	beq.n	800038e <bootUpdateFirm+0xea>
      {
        err_code = ERR_BOOT_FLASH_WRITE;
 8000386:	230e      	movs	r3, #14
 8000388:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
        break;
 800038c:	e00c      	b.n	80003a8 <bootUpdateFirm+0x104>
      }

      index += wr_size;
 800038e:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 8000392:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8000396:	4413      	add	r3, r2
 8000398:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
    while(index < fw_size)
 800039c:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 80003a0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d3b2      	bcc.n	800030e <bootUpdateFirm+0x6a>

    }
    //ledOff(HW_LED_CH_UPDATE);

    if (err_code == CMD_OK)
 80003a8:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d104      	bne.n	80003ba <bootUpdateFirm+0x116>
    {
      // Verify F/W
      //
      err_code = bootVerifyFirm();
 80003b0:	f7ff fef6 	bl	80001a0 <bootVerifyFirm>
 80003b4:	4603      	mov	r3, r0
 80003b6:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
    }


  return err_code;
 80003ba:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 80003be:	b29b      	uxth	r3, r3
}
 80003c0:	4618      	mov	r0, r3
 80003c2:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	08014000 	.word	0x08014000
 80003d0:	08008000 	.word	0x08008000

080003d4 <bootJumpFirm>:

uint16_t bootJumpFirm(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b084      	sub	sp, #16
 80003d8:	af00      	add	r7, sp, #0
  uint16_t err_code = CMD_OK;
 80003da:	2300      	movs	r3, #0
 80003dc:	81fb      	strh	r3, [r7, #14]

  //err_code = bootVerifyFirm();
  if (err_code == CMD_OK)
 80003de:	89fb      	ldrh	r3, [r7, #14]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d131      	bne.n	8000448 <bootJumpFirm+0x74>
  {
    void (**jump_func)(void) = (void (**)(void))(FLASH_ADDR_FIRM + FLASH_SIZE_META + 4);
 80003e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000454 <bootJumpFirm+0x80>)
 80003e6:	607b      	str	r3, [r7, #4]
	  //void (**jump_func)(void) = (void (**)(void))(FLASH_ADDR_FIRM + 4);

    if (((uint32_t)*jump_func) >= FLASH_ADDR_FIRM && ((uint32_t)*jump_func) < (FLASH_ADDR_FIRM + FLASH_SIZE_FIRM))
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	461a      	mov	r2, r3
 80003ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000458 <bootJumpFirm+0x84>)
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d327      	bcc.n	8000444 <bootJumpFirm+0x70>
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	461a      	mov	r2, r3
 80003fa:	4b18      	ldr	r3, [pc, #96]	@ (800045c <bootJumpFirm+0x88>)
 80003fc:	429a      	cmp	r2, r3
 80003fe:	d221      	bcs.n	8000444 <bootJumpFirm+0x70>
    {
      /*logPrintf("[  ] bootJumpFirm()\n");
      logPrintf("     addr : 0x%lX\n", (uint32_t)*jump_func);
*/
      resetSetBootMode(0);
 8000400:	2000      	movs	r0, #0
 8000402:	f000 fbdb 	bl	8000bbc <resetSetBootMode>

      // 점프하기전 인터럽트 Disable
      //
      HAL_RCC_DeInit();
 8000406:	f001 fa81 	bl	800190c <HAL_RCC_DeInit>

      // Disable Interrupts
      //
      for (int i=0; i<8; i++)
 800040a:	2300      	movs	r3, #0
 800040c:	60bb      	str	r3, [r7, #8]
 800040e:	e00f      	b.n	8000430 <bootJumpFirm+0x5c>
      {
        NVIC->ICER[i] = 0xFFFFFFFF;
 8000410:	4a13      	ldr	r2, [pc, #76]	@ (8000460 <bootJumpFirm+0x8c>)
 8000412:	68bb      	ldr	r3, [r7, #8]
 8000414:	3320      	adds	r3, #32
 8000416:	f04f 31ff 	mov.w	r1, #4294967295
 800041a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800041e:	f3bf 8f4f 	dsb	sy
}
 8000422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000424:	f3bf 8f6f 	isb	sy
}
 8000428:	bf00      	nop
      for (int i=0; i<8; i++)
 800042a:	68bb      	ldr	r3, [r7, #8]
 800042c:	3301      	adds	r3, #1
 800042e:	60bb      	str	r3, [r7, #8]
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	2b07      	cmp	r3, #7
 8000434:	ddec      	ble.n	8000410 <bootJumpFirm+0x3c>
        __DSB();
        __ISB();
      }
      SysTick->CTRL = 0;
 8000436:	4b0b      	ldr	r3, [pc, #44]	@ (8000464 <bootJumpFirm+0x90>)
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]

      (*jump_func)();
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4798      	blx	r3
 8000442:	e001      	b.n	8000448 <bootJumpFirm+0x74>
    }
    else
    {
      err_code = ERR_BOOT_INVALID_FW;
 8000444:	2310      	movs	r3, #16
 8000446:	81fb      	strh	r3, [r7, #14]
    }
  }

  return err_code;
 8000448:	89fb      	ldrh	r3, [r7, #14]
}
 800044a:	4618      	mov	r0, r3
 800044c:	3710      	adds	r7, #16
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	08008404 	.word	0x08008404
 8000458:	08008000 	.word	0x08008000
 800045c:	08013c00 	.word	0x08013c00
 8000460:	e000e100 	.word	0xe000e100
 8000464:	e000e010 	.word	0xe000e010

08000468 <button_get_state>:

  return ret;
}

GPIO_PinState button_get_state(uint8_t ch)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	71fb      	strb	r3, [r7, #7]

	if (ch >= 1) Error_Handler();
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <button_get_state+0x14>
 8000478:	f000 fb52 	bl	8000b20 <Error_Handler>

	  uint32_t now = HAL_GetTick();
 800047c:	f000 fd0e 	bl	8000e9c <HAL_GetTick>
 8000480:	60f8      	str	r0, [r7, #12]
	  GPIO_PinState raw = HAL_GPIO_ReadPin(button_tbl[ch].port, button_tbl[ch].pin);
 8000482:	79fa      	ldrb	r2, [r7, #7]
 8000484:	493f      	ldr	r1, [pc, #252]	@ (8000584 <button_get_state+0x11c>)
 8000486:	4613      	mov	r3, r2
 8000488:	005b      	lsls	r3, r3, #1
 800048a:	4413      	add	r3, r2
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	440b      	add	r3, r1
 8000490:	6818      	ldr	r0, [r3, #0]
 8000492:	79fa      	ldrb	r2, [r7, #7]
 8000494:	493b      	ldr	r1, [pc, #236]	@ (8000584 <button_get_state+0x11c>)
 8000496:	4613      	mov	r3, r2
 8000498:	005b      	lsls	r3, r3, #1
 800049a:	4413      	add	r3, r2
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	440b      	add	r3, r1
 80004a0:	3304      	adds	r3, #4
 80004a2:	881b      	ldrh	r3, [r3, #0]
 80004a4:	4619      	mov	r1, r3
 80004a6:	f001 f9d3 	bl	8001850 <HAL_GPIO_ReadPin>
 80004aa:	4603      	mov	r3, r0
 80004ac:	72fb      	strb	r3, [r7, #11]

	  if (raw != button_last_raw[ch])
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	4a35      	ldr	r2, [pc, #212]	@ (8000588 <button_get_state+0x120>)
 80004b2:	5cd3      	ldrb	r3, [r2, r3]
 80004b4:	7afa      	ldrb	r2, [r7, #11]
 80004b6:	429a      	cmp	r2, r3
 80004b8:	d009      	beq.n	80004ce <button_get_state+0x66>
	  {
	    button_last_time[ch]  = now;
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	4933      	ldr	r1, [pc, #204]	@ (800058c <button_get_state+0x124>)
 80004be:	68fa      	ldr	r2, [r7, #12]
 80004c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    button_last_raw[ch]   = raw;
 80004c4:	79fb      	ldrb	r3, [r7, #7]
 80004c6:	4930      	ldr	r1, [pc, #192]	@ (8000588 <button_get_state+0x120>)
 80004c8:	7afa      	ldrb	r2, [r7, #11]
 80004ca:	54ca      	strb	r2, [r1, r3]
 80004cc:	e04d      	b.n	800056a <button_get_state+0x102>
	  }
	  // (2) raw가 안정 상태(stable)를 유지하면
	  else if ((now - button_last_time[ch]) > BUTTON_DEBOUNCE_MS)
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	4a2e      	ldr	r2, [pc, #184]	@ (800058c <button_get_state+0x124>)
 80004d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004d6:	68fa      	ldr	r2, [r7, #12]
 80004d8:	1ad3      	subs	r3, r2, r3
 80004da:	2b14      	cmp	r3, #20
 80004dc:	d945      	bls.n	800056a <button_get_state+0x102>
	  {
	    if (button_stable[ch] != raw)
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	4a2b      	ldr	r2, [pc, #172]	@ (8000590 <button_get_state+0x128>)
 80004e2:	5cd3      	ldrb	r3, [r2, r3]
 80004e4:	7afa      	ldrb	r2, [r7, #11]
 80004e6:	429a      	cmp	r2, r3
 80004e8:	d03f      	beq.n	800056a <button_get_state+0x102>
	    {
	      button_stable[ch] = raw;
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	4928      	ldr	r1, [pc, #160]	@ (8000590 <button_get_state+0x128>)
 80004ee:	7afa      	ldrb	r2, [r7, #11]
 80004f0:	54ca      	strb	r2, [r1, r3]

	      if (raw == button_tbl[ch].on_state)
 80004f2:	79fa      	ldrb	r2, [r7, #7]
 80004f4:	4923      	ldr	r1, [pc, #140]	@ (8000584 <button_get_state+0x11c>)
 80004f6:	4613      	mov	r3, r2
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	4413      	add	r3, r2
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	440b      	add	r3, r1
 8000500:	3306      	adds	r3, #6
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	7afa      	ldrb	r2, [r7, #11]
 8000506:	429a      	cmp	r2, r3
 8000508:	d12f      	bne.n	800056a <button_get_state+0x102>
	      {
	        button_tbl[ch].current_state =
	          (button_tbl[ch].current_state == button_tbl[ch].on_state)
 800050a:	79fa      	ldrb	r2, [r7, #7]
 800050c:	491d      	ldr	r1, [pc, #116]	@ (8000584 <button_get_state+0x11c>)
 800050e:	4613      	mov	r3, r2
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	4413      	add	r3, r2
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	440b      	add	r3, r1
 8000518:	3308      	adds	r3, #8
 800051a:	7819      	ldrb	r1, [r3, #0]
 800051c:	79fa      	ldrb	r2, [r7, #7]
 800051e:	4819      	ldr	r0, [pc, #100]	@ (8000584 <button_get_state+0x11c>)
 8000520:	4613      	mov	r3, r2
 8000522:	005b      	lsls	r3, r3, #1
 8000524:	4413      	add	r3, r2
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	4403      	add	r3, r0
 800052a:	3306      	adds	r3, #6
 800052c:	781b      	ldrb	r3, [r3, #0]
	            ? button_tbl[ch].off_state
	            : button_tbl[ch].on_state;
 800052e:	4299      	cmp	r1, r3
 8000530:	d109      	bne.n	8000546 <button_get_state+0xde>
	            ? button_tbl[ch].off_state
 8000532:	79fa      	ldrb	r2, [r7, #7]
	            : button_tbl[ch].on_state;
 8000534:	4913      	ldr	r1, [pc, #76]	@ (8000584 <button_get_state+0x11c>)
 8000536:	4613      	mov	r3, r2
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	4413      	add	r3, r2
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	440b      	add	r3, r1
 8000540:	3307      	adds	r3, #7
 8000542:	781a      	ldrb	r2, [r3, #0]
 8000544:	e008      	b.n	8000558 <button_get_state+0xf0>
 8000546:	79fa      	ldrb	r2, [r7, #7]
 8000548:	490e      	ldr	r1, [pc, #56]	@ (8000584 <button_get_state+0x11c>)
 800054a:	4613      	mov	r3, r2
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	4413      	add	r3, r2
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	440b      	add	r3, r1
 8000554:	3306      	adds	r3, #6
 8000556:	781a      	ldrb	r2, [r3, #0]
	        button_tbl[ch].current_state =
 8000558:	79f9      	ldrb	r1, [r7, #7]
 800055a:	480a      	ldr	r0, [pc, #40]	@ (8000584 <button_get_state+0x11c>)
 800055c:	460b      	mov	r3, r1
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	440b      	add	r3, r1
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	4403      	add	r3, r0
 8000566:	3308      	adds	r3, #8
 8000568:	701a      	strb	r2, [r3, #0]
	      }
	    }
	  }

	  return button_tbl[ch].current_state;
 800056a:	79fa      	ldrb	r2, [r7, #7]
 800056c:	4905      	ldr	r1, [pc, #20]	@ (8000584 <button_get_state+0x11c>)
 800056e:	4613      	mov	r3, r2
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	4413      	add	r3, r2
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	440b      	add	r3, r1
 8000578:	3308      	adds	r3, #8
 800057a:	781b      	ldrb	r3, [r3, #0]
}
 800057c:	4618      	mov	r0, r3
 800057e:	3710      	adds	r7, #16
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000000 	.word	0x20000000
 8000588:	2000003c 	.word	0x2000003c
 800058c:	20000044 	.word	0x20000044
 8000590:	20000040 	.word	0x20000040

08000594 <buttonGetPressed>:


bool buttonGetPressed(uint8_t ch)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800059e:	2300      	movs	r3, #0
 80005a0:	73fb      	strb	r3, [r7, #15]


  if (ch >= 1)
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <buttonGetPressed+0x18>
    return false;
 80005a8:	2300      	movs	r3, #0
 80005aa:	e023      	b.n	80005f4 <buttonGetPressed+0x60>

  if (HAL_GPIO_ReadPin(button_tbl[ch].port, button_tbl[ch].pin) == button_tbl[ch].on_state)
 80005ac:	79fa      	ldrb	r2, [r7, #7]
 80005ae:	4913      	ldr	r1, [pc, #76]	@ (80005fc <buttonGetPressed+0x68>)
 80005b0:	4613      	mov	r3, r2
 80005b2:	005b      	lsls	r3, r3, #1
 80005b4:	4413      	add	r3, r2
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	440b      	add	r3, r1
 80005ba:	6818      	ldr	r0, [r3, #0]
 80005bc:	79fa      	ldrb	r2, [r7, #7]
 80005be:	490f      	ldr	r1, [pc, #60]	@ (80005fc <buttonGetPressed+0x68>)
 80005c0:	4613      	mov	r3, r2
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	4413      	add	r3, r2
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	440b      	add	r3, r1
 80005ca:	3304      	adds	r3, #4
 80005cc:	881b      	ldrh	r3, [r3, #0]
 80005ce:	4619      	mov	r1, r3
 80005d0:	f001 f93e 	bl	8001850 <HAL_GPIO_ReadPin>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4618      	mov	r0, r3
 80005d8:	79fa      	ldrb	r2, [r7, #7]
 80005da:	4908      	ldr	r1, [pc, #32]	@ (80005fc <buttonGetPressed+0x68>)
 80005dc:	4613      	mov	r3, r2
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	4413      	add	r3, r2
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	440b      	add	r3, r1
 80005e6:	3306      	adds	r3, #6
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d101      	bne.n	80005f2 <buttonGetPressed+0x5e>
  {
    ret = true;
 80005ee:	2301      	movs	r3, #1
 80005f0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000000 	.word	0x20000000

08000600 <flashInit>:

static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);


bool flashInit(void)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0


  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	e012      	b.n	8000632 <flashInit+0x32>
  {
    flash_tbl[i].addr   = 0x8000000 + i*1024;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8000612:	029b      	lsls	r3, r3, #10
 8000614:	4619      	mov	r1, r3
 8000616:	4a0b      	ldr	r2, [pc, #44]	@ (8000644 <flashInit+0x44>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    flash_tbl[i].length = 1024;
 800061e:	4a09      	ldr	r2, [pc, #36]	@ (8000644 <flashInit+0x44>)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	00db      	lsls	r3, r3, #3
 8000624:	4413      	add	r3, r2
 8000626:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800062a:	809a      	strh	r2, [r3, #4]
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3301      	adds	r3, #1
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b7f      	cmp	r3, #127	@ 0x7f
 8000636:	dde9      	ble.n	800060c <flashInit+0xc>
  }

  return true;
 8000638:	2301      	movs	r3, #1
}
 800063a:	4618      	mov	r0, r3
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr
 8000644:	20000048 	.word	0x20000048

08000648 <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08c      	sub	sp, #48	@ 0x30
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
  bool ret = false;
 8000652:	2300      	movs	r3, #0
 8000654:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef init;
  uint32_t page_error;

  int16_t  start_sector_num = -1;
 8000658:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800065c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  uint32_t sector_count = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	62bb      	str	r3, [r7, #40]	@ 0x28



  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8000662:	2300      	movs	r3, #0
 8000664:	627b      	str	r3, [r7, #36]	@ 0x24
 8000666:	e015      	b.n	8000694 <flashErase+0x4c>
  {
    if (flashInSector(i, addr, length) == true)
 8000668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800066a:	b29b      	uxth	r3, r3
 800066c:	683a      	ldr	r2, [r7, #0]
 800066e:	6879      	ldr	r1, [r7, #4]
 8000670:	4618      	mov	r0, r3
 8000672:	f000 f897 	bl	80007a4 <flashInSector>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d008      	beq.n	800068e <flashErase+0x46>
    {
      if (start_sector_num < 0)
 800067c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8000680:	2b00      	cmp	r3, #0
 8000682:	da01      	bge.n	8000688 <flashErase+0x40>
      {
        start_sector_num = i;
 8000684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000686:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      }
      sector_count++;
 8000688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800068a:	3301      	adds	r3, #1
 800068c:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 800068e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000690:	3301      	adds	r3, #1
 8000692:	627b      	str	r3, [r7, #36]	@ 0x24
 8000694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000696:	2b7f      	cmp	r3, #127	@ 0x7f
 8000698:	dde6      	ble.n	8000668 <flashErase+0x20>
    }
  }


  if (sector_count > 0)
 800069a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800069c:	2b00      	cmp	r3, #0
 800069e:	d021      	beq.n	80006e4 <flashErase+0x9c>
  {
    HAL_FLASH_Unlock();
 80006a0:	f000 fdc2 	bl	8001228 <HAL_FLASH_Unlock>

    init.TypeErase   = FLASH_TYPEERASE_PAGES;
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]
    init.Banks       = FLASH_BANK_1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	617b      	str	r3, [r7, #20]
    init.PageAddress = flash_tbl[start_sector_num].addr;
 80006ac:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80006b0:	4a0f      	ldr	r2, [pc, #60]	@ (80006f0 <flashErase+0xa8>)
 80006b2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80006b6:	61bb      	str	r3, [r7, #24]
    init.NbPages     = sector_count;
 80006b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006ba:	61fb      	str	r3, [r7, #28]

    status = HAL_FLASHEx_Erase(&init, &page_error);
 80006bc:	f107 020c 	add.w	r2, r7, #12
 80006c0:	f107 0310 	add.w	r3, r7, #16
 80006c4:	4611      	mov	r1, r2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 fe96 	bl	80013f8 <HAL_FLASHEx_Erase>
 80006cc:	4603      	mov	r3, r0
 80006ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (status == HAL_OK)
 80006d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d102      	bne.n	80006e0 <flashErase+0x98>
    {
      ret = true;
 80006da:	2301      	movs	r3, #1
 80006dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    HAL_FLASH_Lock();
 80006e0:	f000 fdc8 	bl	8001274 <HAL_FLASH_Lock>
  }

  return ret;
 80006e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3730      	adds	r7, #48	@ 0x30
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000048 	.word	0x20000048

080006f4 <flashWrite>:

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 80006f4:	b5b0      	push	{r4, r5, r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000700:	2301      	movs	r3, #1
 8000702:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status;


  if (addr%2 != 0)
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <flashWrite+0x1e>
  {
    return false;
 800070e:	2300      	movs	r3, #0
 8000710:	e033      	b.n	800077a <flashWrite+0x86>
  }

  HAL_FLASH_Unlock();
 8000712:	f000 fd89 	bl	8001228 <HAL_FLASH_Unlock>

  for (int i=0; i<length; i+=2)
 8000716:	2300      	movs	r3, #0
 8000718:	61bb      	str	r3, [r7, #24]
 800071a:	e027      	b.n	800076c <flashWrite+0x78>
  {
    uint16_t data;

    data  = p_data[i+0] << 0;
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	68ba      	ldr	r2, [r7, #8]
 8000720:	4413      	add	r3, r2
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	82fb      	strh	r3, [r7, #22]
    data |= p_data[i+1] << 8;
 8000726:	69bb      	ldr	r3, [r7, #24]
 8000728:	3301      	adds	r3, #1
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	4413      	add	r3, r2
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	021b      	lsls	r3, r3, #8
 8000732:	b21a      	sxth	r2, r3
 8000734:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000738:	4313      	orrs	r3, r2
 800073a:	b21b      	sxth	r3, r3
 800073c:	82fb      	strh	r3, [r7, #22]

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + i, (uint64_t)data);
 800073e:	69ba      	ldr	r2, [r7, #24]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	18d1      	adds	r1, r2, r3
 8000744:	8afb      	ldrh	r3, [r7, #22]
 8000746:	2200      	movs	r2, #0
 8000748:	461c      	mov	r4, r3
 800074a:	4615      	mov	r5, r2
 800074c:	4622      	mov	r2, r4
 800074e:	462b      	mov	r3, r5
 8000750:	2001      	movs	r0, #1
 8000752:	f000 fcf9 	bl	8001148 <HAL_FLASH_Program>
 8000756:	4603      	mov	r3, r0
 8000758:	757b      	strb	r3, [r7, #21]
    if (status != HAL_OK)
 800075a:	7d7b      	ldrb	r3, [r7, #21]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d002      	beq.n	8000766 <flashWrite+0x72>
    {
      ret = false;
 8000760:	2300      	movs	r3, #0
 8000762:	77fb      	strb	r3, [r7, #31]
      break;
 8000764:	e006      	b.n	8000774 <flashWrite+0x80>
  for (int i=0; i<length; i+=2)
 8000766:	69bb      	ldr	r3, [r7, #24]
 8000768:	3302      	adds	r3, #2
 800076a:	61bb      	str	r3, [r7, #24]
 800076c:	69bb      	ldr	r3, [r7, #24]
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	429a      	cmp	r2, r3
 8000772:	d8d3      	bhi.n	800071c <flashWrite+0x28>
    }
  }

  HAL_FLASH_Lock();
 8000774:	f000 fd7e 	bl	8001274 <HAL_FLASH_Lock>

  return ret;
 8000778:	7ffb      	ldrb	r3, [r7, #31]
}
 800077a:	4618      	mov	r0, r3
 800077c:	3720      	adds	r7, #32
 800077e:	46bd      	mov	sp, r7
 8000780:	bdb0      	pop	{r4, r5, r7, pc}

08000782 <flashRead>:

bool flashRead(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	b084      	sub	sp, #16
 8000786:	af00      	add	r7, sp, #0
 8000788:	60f8      	str	r0, [r7, #12]
 800078a:	60b9      	str	r1, [r7, #8]
 800078c:	607a      	str	r2, [r7, #4]
  memcpy(p_data, (void *)addr, length);
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	4619      	mov	r1, r3
 8000794:	68b8      	ldr	r0, [r7, #8]
 8000796:	f001 fe6d 	bl	8002474 <memcpy>

  return true;
 800079a:	2301      	movs	r3, #1
}
 800079c:	4618      	mov	r0, r3
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <flashInSector>:

bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b08b      	sub	sp, #44	@ 0x2c
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
 80007b0:	81fb      	strh	r3, [r7, #14]
  bool ret = false;
 80007b2:	2300      	movs	r3, #0
 80007b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t sector_end;
  uint32_t flash_start;
  uint32_t flash_end;


  sector_start = flash_tbl[sector_num].addr;
 80007b8:	89fb      	ldrh	r3, [r7, #14]
 80007ba:	4a25      	ldr	r2, [pc, #148]	@ (8000850 <flashInSector+0xac>)
 80007bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80007c0:	623b      	str	r3, [r7, #32]
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 80007c2:	89fb      	ldrh	r3, [r7, #14]
 80007c4:	4a22      	ldr	r2, [pc, #136]	@ (8000850 <flashInSector+0xac>)
 80007c6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80007ca:	89fb      	ldrh	r3, [r7, #14]
 80007cc:	4920      	ldr	r1, [pc, #128]	@ (8000850 <flashInSector+0xac>)
 80007ce:	00db      	lsls	r3, r3, #3
 80007d0:	440b      	add	r3, r1
 80007d2:	889b      	ldrh	r3, [r3, #4]
 80007d4:	4413      	add	r3, r2
 80007d6:	3b01      	subs	r3, #1
 80007d8:	61fb      	str	r3, [r7, #28]
  flash_start  = addr;
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	61bb      	str	r3, [r7, #24]
  flash_end    = addr + length - 1;
 80007de:	68ba      	ldr	r2, [r7, #8]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4413      	add	r3, r2
 80007e4:	3b01      	subs	r3, #1
 80007e6:	617b      	str	r3, [r7, #20]


  if (sector_start >= flash_start && sector_start <= flash_end)
 80007e8:	6a3a      	ldr	r2, [r7, #32]
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d306      	bcc.n	80007fe <flashInSector+0x5a>
 80007f0:	6a3a      	ldr	r2, [r7, #32]
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d802      	bhi.n	80007fe <flashInSector+0x5a>
  {
    ret = true;
 80007f8:	2301      	movs	r3, #1
 80007fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 80007fe:	69fa      	ldr	r2, [r7, #28]
 8000800:	69bb      	ldr	r3, [r7, #24]
 8000802:	429a      	cmp	r2, r3
 8000804:	d306      	bcc.n	8000814 <flashInSector+0x70>
 8000806:	69fa      	ldr	r2, [r7, #28]
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	429a      	cmp	r2, r3
 800080c:	d802      	bhi.n	8000814 <flashInSector+0x70>
  {
    ret = true;
 800080e:	2301      	movs	r3, #1
 8000810:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 8000814:	69ba      	ldr	r2, [r7, #24]
 8000816:	6a3b      	ldr	r3, [r7, #32]
 8000818:	429a      	cmp	r2, r3
 800081a:	d306      	bcc.n	800082a <flashInSector+0x86>
 800081c:	69ba      	ldr	r2, [r7, #24]
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	429a      	cmp	r2, r3
 8000822:	d802      	bhi.n	800082a <flashInSector+0x86>
  {
    ret = true;
 8000824:	2301      	movs	r3, #1
 8000826:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	6a3b      	ldr	r3, [r7, #32]
 800082e:	429a      	cmp	r2, r3
 8000830:	d306      	bcc.n	8000840 <flashInSector+0x9c>
 8000832:	697a      	ldr	r2, [r7, #20]
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	429a      	cmp	r2, r3
 8000838:	d802      	bhi.n	8000840 <flashInSector+0x9c>
  {
    ret = true;
 800083a:	2301      	movs	r3, #1
 800083c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return ret;
 8000840:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000844:	4618      	mov	r0, r3
 8000846:	372c      	adds	r7, #44	@ 0x2c
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	20000048 	.word	0x20000048

08000854 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 0310 	add.w	r3, r7, #16
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000868:	4b2d      	ldr	r3, [pc, #180]	@ (8000920 <MX_GPIO_Init+0xcc>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	4a2c      	ldr	r2, [pc, #176]	@ (8000920 <MX_GPIO_Init+0xcc>)
 800086e:	f043 0310 	orr.w	r3, r3, #16
 8000872:	6193      	str	r3, [r2, #24]
 8000874:	4b2a      	ldr	r3, [pc, #168]	@ (8000920 <MX_GPIO_Init+0xcc>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f003 0310 	and.w	r3, r3, #16
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000880:	4b27      	ldr	r3, [pc, #156]	@ (8000920 <MX_GPIO_Init+0xcc>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	4a26      	ldr	r2, [pc, #152]	@ (8000920 <MX_GPIO_Init+0xcc>)
 8000886:	f043 0320 	orr.w	r3, r3, #32
 800088a:	6193      	str	r3, [r2, #24]
 800088c:	4b24      	ldr	r3, [pc, #144]	@ (8000920 <MX_GPIO_Init+0xcc>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f003 0320 	and.w	r3, r3, #32
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000898:	4b21      	ldr	r3, [pc, #132]	@ (8000920 <MX_GPIO_Init+0xcc>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	4a20      	ldr	r2, [pc, #128]	@ (8000920 <MX_GPIO_Init+0xcc>)
 800089e:	f043 0304 	orr.w	r3, r3, #4
 80008a2:	6193      	str	r3, [r2, #24]
 80008a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000920 <MX_GPIO_Init+0xcc>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f003 0304 	and.w	r3, r3, #4
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000920 <MX_GPIO_Init+0xcc>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	4a1a      	ldr	r2, [pc, #104]	@ (8000920 <MX_GPIO_Init+0xcc>)
 80008b6:	f043 0308 	orr.w	r3, r3, #8
 80008ba:	6193      	str	r3, [r2, #24]
 80008bc:	4b18      	ldr	r3, [pc, #96]	@ (8000920 <MX_GPIO_Init+0xcc>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f003 0308 	and.w	r3, r3, #8
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2120      	movs	r1, #32
 80008cc:	4815      	ldr	r0, [pc, #84]	@ (8000924 <MX_GPIO_Init+0xd0>)
 80008ce:	f000 ffd6 	bl	800187e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d8:	4b13      	ldr	r3, [pc, #76]	@ (8000928 <MX_GPIO_Init+0xd4>)
 80008da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	4619      	mov	r1, r3
 80008e6:	4811      	ldr	r0, [pc, #68]	@ (800092c <MX_GPIO_Init+0xd8>)
 80008e8:	f000 fe2e 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008ec:	2320      	movs	r3, #32
 80008ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2302      	movs	r3, #2
 80008fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 0310 	add.w	r3, r7, #16
 8000900:	4619      	mov	r1, r3
 8000902:	4808      	ldr	r0, [pc, #32]	@ (8000924 <MX_GPIO_Init+0xd0>)
 8000904:	f000 fe20 	bl	8001548 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000908:	2200      	movs	r2, #0
 800090a:	2100      	movs	r1, #0
 800090c:	2028      	movs	r0, #40	@ 0x28
 800090e:	f000 fbe0 	bl	80010d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000912:	2028      	movs	r0, #40	@ 0x28
 8000914:	f000 fbf9 	bl	800110a <HAL_NVIC_EnableIRQ>

}
 8000918:	bf00      	nop
 800091a:	3720      	adds	r7, #32
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40021000 	.word	0x40021000
 8000924:	40010800 	.word	0x40010800
 8000928:	10110000 	.word	0x10110000
 800092c:	40011000 	.word	0x40011000

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000936:	f000 fa59 	bl	8000dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093a:	f000 f86d 	bl	8000a18 <SystemClock_Config>
  ConfigureBackupDomain();
 800093e:	f000 f8b1 	bl	8000aa4 <ConfigureBackupDomain>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000942:	f7ff ff87 	bl	8000854 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000946:	f000 f9c3 	bl	8000cd0 <MX_USART2_UART_Init>


  uint32_t boot_param;
  uint16_t err_code;

  bootInit();
 800094a:	f7ff fbff 	bl	800014c <bootInit>

  resetInit();
 800094e:	f000 f8ed 	bl	8000b2c <resetInit>
  flashInit();
 8000952:	f7ff fe55 	bl	8000600 <flashInit>


  boot_param = resetGetBootMode();
 8000956:	f000 f945 	bl	8000be4 <resetGetBootMode>
 800095a:	6078      	str	r0, [r7, #4]

  if (boot_param & (1<<MODE_BIT_BOOT)) // boot mode인 경우 bootloader 실행
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	2b00      	cmp	r3, #0
 8000964:	d009      	beq.n	800097a <main+0x4a>
	{
		boot_param &= ~(1<<MODE_BIT_BOOT);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	f023 0301 	bic.w	r3, r3, #1
 800096c:	607b      	str	r3, [r7, #4]
		resetSetBootMode(boot_param);
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f000 f924 	bl	8000bbc <resetSetBootMode>
		is_run_fw = false;
 8000974:	4b25      	ldr	r3, [pc, #148]	@ (8000a0c <main+0xdc>)
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
	}

	if (buttonGetPressed(0) == true)    // 강제 boot mode인 경우
 800097a:	2000      	movs	r0, #0
 800097c:	f7ff fe0a 	bl	8000594 <buttonGetPressed>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d002      	beq.n	800098c <main+0x5c>
	{
		is_run_fw = false;
 8000986:	4b21      	ldr	r3, [pc, #132]	@ (8000a0c <main+0xdc>)
 8000988:	2200      	movs	r2, #0
 800098a:	701a      	strb	r2, [r3, #0]
	}

  if (boot_param & (1<<MODE_BIT_UPDATE)) // update 모드인 경우 update 후 run firm
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	2b00      	cmp	r3, #0
 8000994:	d00c      	beq.n	80009b0 <main+0x80>
  {
    boot_param &= ~(1<<MODE_BIT_UPDATE);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	f023 0302 	bic.w	r3, r3, #2
 800099c:	607b      	str	r3, [r7, #4]
    resetSetBootMode(boot_param);
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f000 f90c 	bl	8000bbc <resetSetBootMode>

    is_run_fw = true;
 80009a4:	4b19      	ldr	r3, [pc, #100]	@ (8000a0c <main+0xdc>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	701a      	strb	r2, [r3, #0]
    is_update_fw = true;
 80009aa:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <main+0xe0>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	701a      	strb	r2, [r3, #0]
  }

  if (is_update_fw)
 80009b0:	4b17      	ldr	r3, [pc, #92]	@ (8000a10 <main+0xe0>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d003      	beq.n	80009c0 <main+0x90>
      lcdUpdateDraw();
    }

    logPrintf("[  ] bootUpdateFirm()\n");
    */
    err_code = bootUpdateFirm();
 80009b8:	f7ff fc74 	bl	80002a4 <bootUpdateFirm>
 80009bc:	4603      	mov	r3, r0
 80009be:	807b      	strh	r3, [r7, #2]
    else
      logPrintf("[E_] err : 0x%04X\n", err_code);*/

  }

  if (is_run_fw)
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <main+0xdc>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d003      	beq.n	80009d0 <main+0xa0>
      lcdPrintf(0, 8, white, " Jump Firm...");
      lcdUpdateDraw();
    }

    delay(100);*/
    err_code = bootJumpFirm();
 80009c8:	f7ff fd04 	bl	80003d4 <bootJumpFirm>
 80009cc:	4603      	mov	r3, r0
 80009ce:	807b      	strh	r3, [r7, #2]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
  	if(!button_get_state(0))
 80009d0:	2000      	movs	r0, #0
 80009d2:	f7ff fd49 	bl	8000468 <button_get_state>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d105      	bne.n	80009e8 <main+0xb8>
  	{
  		resetSetBootMode(BOOT_FLAG_FW);
 80009dc:	2000      	movs	r0, #0
 80009de:	f000 f8ed 	bl	8000bbc <resetSetBootMode>
  		resetToReset();
 80009e2:	f000 f8e4 	bl	8000bae <resetToReset>
 80009e6:	e7f3      	b.n	80009d0 <main+0xa0>
  	}
  	else
  	{
		HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 80009e8:	2201      	movs	r2, #1
 80009ea:	2120      	movs	r1, #32
 80009ec:	4809      	ldr	r0, [pc, #36]	@ (8000a14 <main+0xe4>)
 80009ee:	f000 ff46 	bl	800187e <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80009f2:	2064      	movs	r0, #100	@ 0x64
 80009f4:	f000 fa5c 	bl	8000eb0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2120      	movs	r1, #32
 80009fc:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <main+0xe4>)
 80009fe:	f000 ff3e 	bl	800187e <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000a02:	2064      	movs	r0, #100	@ 0x64
 8000a04:	f000 fa54 	bl	8000eb0 <HAL_Delay>
  	if(!button_get_state(0))
 8000a08:	e7e2      	b.n	80009d0 <main+0xa0>
 8000a0a:	bf00      	nop
 8000a0c:	2000000c 	.word	0x2000000c
 8000a10:	20000448 	.word	0x20000448
 8000a14:	40010800 	.word	0x40010800

08000a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b090      	sub	sp, #64	@ 0x40
 8000a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1e:	f107 0318 	add.w	r3, r7, #24
 8000a22:	2228      	movs	r2, #40	@ 0x28
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f001 fcf8 	bl	800241c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a54:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000a56:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8000a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5c:	f107 0318 	add.w	r3, r7, #24
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 ffed 	bl	8001a40 <HAL_RCC_OscConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a6c:	f000 f858 	bl	8000b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a70:	230f      	movs	r3, #15
 8000a72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a74:	2302      	movs	r3, #2
 8000a76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000a7c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2102      	movs	r1, #2
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f001 fa5a 	bl	8001f44 <HAL_RCC_ClockConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a96:	f000 f843 	bl	8000b20 <Error_Handler>
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	3740      	adds	r7, #64	@ 0x40
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <ConfigureBackupDomain>:


void ConfigureBackupDomain(void){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
	__HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8000b18 <ConfigureBackupDomain+0x74>)
 8000aac:	69db      	ldr	r3, [r3, #28]
 8000aae:	4a1a      	ldr	r2, [pc, #104]	@ (8000b18 <ConfigureBackupDomain+0x74>)
 8000ab0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ab4:	61d3      	str	r3, [r2, #28]
 8000ab6:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <ConfigureBackupDomain+0x74>)
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
	HAL_PWR_EnableBkUpAccess();
 8000ac2:	f000 ff17 	bl	80018f4 <HAL_PWR_EnableBkUpAccess>

	__HAL_RCC_LSE_CONFIG(RCC_LSE_ON);
 8000ac6:	4b14      	ldr	r3, [pc, #80]	@ (8000b18 <ConfigureBackupDomain+0x74>)
 8000ac8:	6a1b      	ldr	r3, [r3, #32]
 8000aca:	4a13      	ldr	r2, [pc, #76]	@ (8000b18 <ConfigureBackupDomain+0x74>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6213      	str	r3, [r2, #32]
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {}
 8000ad2:	bf00      	nop
 8000ad4:	4b10      	ldr	r3, [pc, #64]	@ (8000b18 <ConfigureBackupDomain+0x74>)
 8000ad6:	6a1b      	ldr	r3, [r3, #32]
 8000ad8:	f003 0302 	and.w	r3, r3, #2
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d0f9      	beq.n	8000ad4 <ConfigureBackupDomain+0x30>

	__HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE);
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <ConfigureBackupDomain+0x74>)
 8000ae2:	6a1b      	ldr	r3, [r3, #32]
 8000ae4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000ae8:	4a0b      	ldr	r2, [pc, #44]	@ (8000b18 <ConfigureBackupDomain+0x74>)
 8000aea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aee:	6213      	str	r3, [r2, #32]
	__HAL_RCC_RTC_ENABLE();
 8000af0:	4b0a      	ldr	r3, [pc, #40]	@ (8000b1c <ConfigureBackupDomain+0x78>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	601a      	str	r2, [r3, #0]

	__HAL_RCC_BKP_CLK_ENABLE();
 8000af6:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <ConfigureBackupDomain+0x74>)
 8000af8:	69db      	ldr	r3, [r3, #28]
 8000afa:	4a07      	ldr	r2, [pc, #28]	@ (8000b18 <ConfigureBackupDomain+0x74>)
 8000afc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000b00:	61d3      	str	r3, [r2, #28]
 8000b02:	4b05      	ldr	r3, [pc, #20]	@ (8000b18 <ConfigureBackupDomain+0x74>)
 8000b04:	69db      	ldr	r3, [r3, #28]
 8000b06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	4242043c 	.word	0x4242043c

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <Error_Handler+0x8>

08000b2c <resetInit>:
static uint32_t boot_mode = 0;
#define BOOT_FLAG_ADDR BKP->DR1 /*Boot flag address*/


bool resetInit(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
  // 1) 백업 도메인 접근 허용
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b32:	4b16      	ldr	r3, [pc, #88]	@ (8000b8c <resetInit+0x60>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	4a15      	ldr	r2, [pc, #84]	@ (8000b8c <resetInit+0x60>)
 8000b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b3c:	61d3      	str	r3, [r2, #28]
 8000b3e:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <resetInit+0x60>)
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
  HAL_PWR_EnableBkUpAccess();
 8000b4a:	f000 fed3 	bl	80018f4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_BKP_CLK_ENABLE();
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <resetInit+0x60>)
 8000b50:	69db      	ldr	r3, [r3, #28]
 8000b52:	4a0e      	ldr	r2, [pc, #56]	@ (8000b8c <resetInit+0x60>)
 8000b54:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000b58:	61d3      	str	r3, [r2, #28]
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b8c <resetInit+0x60>)
 8000b5c:	69db      	ldr	r3, [r3, #28]
 8000b5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]

  bool ret;
  //boot_mode = BOOT_FLAG_UPDATE;
  boot_mode = BOOT_FLAG_ADDR;
 8000b66:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <resetInit+0x64>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b94 <resetInit+0x68>)
 8000b6c:	6013      	str	r3, [r2, #0]
  BOOT_FLAG_ADDR = BOOT_FLAG_BOOT;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <resetInit+0x64>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	605a      	str	r2, [r3, #4]

  is_init = true;
 8000b74:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <resetInit+0x6c>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	701a      	strb	r2, [r3, #0]

  ret = is_init;
 8000b7a:	4b07      	ldr	r3, [pc, #28]	@ (8000b98 <resetInit+0x6c>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	73fb      	strb	r3, [r7, #15]
  return ret;
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40006c00 	.word	0x40006c00
 8000b94:	2000044c 	.word	0x2000044c
 8000b98:	20000449 	.word	0x20000449

08000b9c <resetToBoot>:

void resetToBoot(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  resetSetBootMode(1<<MODE_BIT_BOOT);
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f000 f80b 	bl	8000bbc <resetSetBootMode>
  resetToReset();
 8000ba6:	f000 f802 	bl	8000bae <resetToReset>
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}

08000bae <resetToReset>:

void resetToReset(void)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	af00      	add	r7, sp, #0
  HAL_NVIC_SystemReset();
 8000bb2:	f000 fab8 	bl	8001126 <HAL_NVIC_SystemReset>
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <resetSetBootMode>:

void resetSetBootMode(uint32_t mode)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  boot_mode = mode;
 8000bc4:	4a05      	ldr	r2, [pc, #20]	@ (8000bdc <resetSetBootMode+0x20>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6013      	str	r3, [r2, #0]
  BOOT_FLAG_ADDR = boot_mode;
 8000bca:	4a05      	ldr	r2, [pc, #20]	@ (8000be0 <resetSetBootMode+0x24>)
 8000bcc:	4b03      	ldr	r3, [pc, #12]	@ (8000bdc <resetSetBootMode+0x20>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	6053      	str	r3, [r2, #4]
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr
 8000bdc:	2000044c 	.word	0x2000044c
 8000be0:	40006c00 	.word	0x40006c00

08000be4 <resetGetBootMode>:

uint32_t resetGetBootMode(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return boot_mode;
 8000be8:	4b02      	ldr	r3, [pc, #8]	@ (8000bf4 <resetGetBootMode+0x10>)
 8000bea:	681b      	ldr	r3, [r3, #0]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	2000044c 	.word	0x2000044c

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bfe:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <HAL_MspInit+0x5c>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	4a14      	ldr	r2, [pc, #80]	@ (8000c54 <HAL_MspInit+0x5c>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6193      	str	r3, [r2, #24]
 8000c0a:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <HAL_MspInit+0x5c>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <HAL_MspInit+0x5c>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c54 <HAL_MspInit+0x5c>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c20:	61d3      	str	r3, [r2, #28]
 8000c22:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <HAL_MspInit+0x5c>)
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c58 <HAL_MspInit+0x60>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	4a04      	ldr	r2, [pc, #16]	@ (8000c58 <HAL_MspInit+0x60>)
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40010000 	.word	0x40010000

08000c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <NMI_Handler+0x4>

08000c64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <HardFault_Handler+0x4>

08000c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <MemManage_Handler+0x4>

08000c74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <BusFault_Handler+0x4>

08000c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <UsageFault_Handler+0x4>

08000c84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr

08000c9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr

08000ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cac:	f000 f8e4 	bl	8000e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000cb8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000cbc:	f000 fdf8 	bl	80018b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr

08000cd0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cd4:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000cd6:	4a12      	ldr	r2, [pc, #72]	@ (8000d20 <MX_USART2_UART_Init+0x50>)
 8000cd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cda:	4b10      	ldr	r3, [pc, #64]	@ (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000cdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ce0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cee:	4b0b      	ldr	r3, [pc, #44]	@ (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cf4:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000cf6:	220c      	movs	r2, #12
 8000cf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfa:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d00:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d06:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000d08:	f001 faaa 	bl	8002260 <HAL_UART_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d12:	f7ff ff05 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000450 	.word	0x20000450
 8000d20:	40004400 	.word	0x40004400

08000d24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0310 	add.w	r3, r7, #16
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a15      	ldr	r2, [pc, #84]	@ (8000d94 <HAL_UART_MspInit+0x70>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d123      	bne.n	8000d8c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d44:	4b14      	ldr	r3, [pc, #80]	@ (8000d98 <HAL_UART_MspInit+0x74>)
 8000d46:	69db      	ldr	r3, [r3, #28]
 8000d48:	4a13      	ldr	r2, [pc, #76]	@ (8000d98 <HAL_UART_MspInit+0x74>)
 8000d4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d4e:	61d3      	str	r3, [r2, #28]
 8000d50:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <HAL_UART_MspInit+0x74>)
 8000d52:	69db      	ldr	r3, [r3, #28]
 8000d54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <HAL_UART_MspInit+0x74>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a0d      	ldr	r2, [pc, #52]	@ (8000d98 <HAL_UART_MspInit+0x74>)
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <HAL_UART_MspInit+0x74>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d74:	230c      	movs	r3, #12
 8000d76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	4619      	mov	r1, r3
 8000d86:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <HAL_UART_MspInit+0x78>)
 8000d88:	f000 fbde 	bl	8001548 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d8c:	bf00      	nop
 8000d8e:	3720      	adds	r7, #32
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40004400 	.word	0x40004400
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40010800 	.word	0x40010800

08000da0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000da0:	f7ff ff90 	bl	8000cc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da4:	480b      	ldr	r0, [pc, #44]	@ (8000dd4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000da6:	490c      	ldr	r1, [pc, #48]	@ (8000dd8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000da8:	4a0c      	ldr	r2, [pc, #48]	@ (8000ddc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dac:	e002      	b.n	8000db4 <LoopCopyDataInit>

08000dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db2:	3304      	adds	r3, #4

08000db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db8:	d3f9      	bcc.n	8000dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dba:	4a09      	ldr	r2, [pc, #36]	@ (8000de0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000dbc:	4c09      	ldr	r4, [pc, #36]	@ (8000de4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc0:	e001      	b.n	8000dc6 <LoopFillZerobss>

08000dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc4:	3204      	adds	r2, #4

08000dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc8:	d3fb      	bcc.n	8000dc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dca:	f001 fb2f 	bl	800242c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dce:	f7ff fdaf 	bl	8000930 <main>
  bx lr
 8000dd2:	4770      	bx	lr
  ldr r0, =_sdata
 8000dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000ddc:	080028dc 	.word	0x080028dc
  ldr r2, =_sbss
 8000de0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000de4:	200004c0 	.word	0x200004c0

08000de8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC1_2_IRQHandler>
	...

08000dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df0:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <HAL_Init+0x28>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a07      	ldr	r2, [pc, #28]	@ (8000e14 <HAL_Init+0x28>)
 8000df6:	f043 0310 	orr.w	r3, r3, #16
 8000dfa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	f000 f95d 	bl	80010bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f000 f808 	bl	8000e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e08:	f7ff fef6 	bl	8000bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40022000 	.word	0x40022000

08000e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e20:	4b12      	ldr	r3, [pc, #72]	@ (8000e6c <HAL_InitTick+0x54>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <HAL_InitTick+0x58>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f979 	bl	800112e <HAL_SYSTICK_Config>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00e      	b.n	8000e64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b0f      	cmp	r3, #15
 8000e4a:	d80a      	bhi.n	8000e62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295
 8000e54:	f000 f93d 	bl	80010d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e58:	4a06      	ldr	r2, [pc, #24]	@ (8000e74 <HAL_InitTick+0x5c>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e000      	b.n	8000e64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000010 	.word	0x20000010
 8000e70:	20000018 	.word	0x20000018
 8000e74:	20000014 	.word	0x20000014

08000e78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e7c:	4b05      	ldr	r3, [pc, #20]	@ (8000e94 <HAL_IncTick+0x1c>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b05      	ldr	r3, [pc, #20]	@ (8000e98 <HAL_IncTick+0x20>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	4a03      	ldr	r2, [pc, #12]	@ (8000e98 <HAL_IncTick+0x20>)
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	20000018 	.word	0x20000018
 8000e98:	20000498 	.word	0x20000498

08000e9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b02      	ldr	r3, [pc, #8]	@ (8000eac <HAL_GetTick+0x10>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	20000498 	.word	0x20000498

08000eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb8:	f7ff fff0 	bl	8000e9c <HAL_GetTick>
 8000ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec8:	d005      	beq.n	8000ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eca:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <HAL_Delay+0x44>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ed6:	bf00      	nop
 8000ed8:	f7ff ffe0 	bl	8000e9c <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d8f7      	bhi.n	8000ed8 <HAL_Delay+0x28>
  {
  }
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000018 	.word	0x20000018

08000ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f08:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f14:	4013      	ands	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2a:	4a04      	ldr	r2, [pc, #16]	@ (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	60d3      	str	r3, [r2, #12]
}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f44:	4b04      	ldr	r3, [pc, #16]	@ (8000f58 <__NVIC_GetPriorityGrouping+0x18>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	0a1b      	lsrs	r3, r3, #8
 8000f4a:	f003 0307 	and.w	r3, r3, #7
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	db0b      	blt.n	8000f86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	f003 021f 	and.w	r2, r3, #31
 8000f74:	4906      	ldr	r1, [pc, #24]	@ (8000f90 <__NVIC_EnableIRQ+0x34>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	095b      	lsrs	r3, r3, #5
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr
 8000f90:	e000e100 	.word	0xe000e100

08000f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	db0a      	blt.n	8000fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	490c      	ldr	r1, [pc, #48]	@ (8000fe0 <__NVIC_SetPriority+0x4c>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	0112      	lsls	r2, r2, #4
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fbc:	e00a      	b.n	8000fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4908      	ldr	r1, [pc, #32]	@ (8000fe4 <__NVIC_SetPriority+0x50>)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	f003 030f 	and.w	r3, r3, #15
 8000fca:	3b04      	subs	r3, #4
 8000fcc:	0112      	lsls	r2, r2, #4
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	761a      	strb	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	@ 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	2b04      	cmp	r3, #4
 8001004:	bf28      	it	cs
 8001006:	2304      	movcs	r3, #4
 8001008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3304      	adds	r3, #4
 800100e:	2b06      	cmp	r3, #6
 8001010:	d902      	bls.n	8001018 <NVIC_EncodePriority+0x30>
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3b03      	subs	r3, #3
 8001016:	e000      	b.n	800101a <NVIC_EncodePriority+0x32>
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	f04f 32ff 	mov.w	r2, #4294967295
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001030:	f04f 31ff 	mov.w	r1, #4294967295
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	43d9      	mvns	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	4313      	orrs	r3, r2
         );
}
 8001042:	4618      	mov	r0, r3
 8001044:	3724      	adds	r7, #36	@ 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr

0800104c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001050:	f3bf 8f4f 	dsb	sy
}
 8001054:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001056:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <__NVIC_SystemReset+0x24>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800105e:	4904      	ldr	r1, [pc, #16]	@ (8001070 <__NVIC_SystemReset+0x24>)
 8001060:	4b04      	ldr	r3, [pc, #16]	@ (8001074 <__NVIC_SystemReset+0x28>)
 8001062:	4313      	orrs	r3, r2
 8001064:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001066:	f3bf 8f4f 	dsb	sy
}
 800106a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <__NVIC_SystemReset+0x20>
 8001070:	e000ed00 	.word	0xe000ed00
 8001074:	05fa0004 	.word	0x05fa0004

08001078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001088:	d301      	bcc.n	800108e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108a:	2301      	movs	r3, #1
 800108c:	e00f      	b.n	80010ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108e:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <SysTick_Config+0x40>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001096:	210f      	movs	r1, #15
 8001098:	f04f 30ff 	mov.w	r0, #4294967295
 800109c:	f7ff ff7a 	bl	8000f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a0:	4b05      	ldr	r3, [pc, #20]	@ (80010b8 <SysTick_Config+0x40>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a6:	4b04      	ldr	r3, [pc, #16]	@ (80010b8 <SysTick_Config+0x40>)
 80010a8:	2207      	movs	r2, #7
 80010aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	e000e010 	.word	0xe000e010

080010bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ff17 	bl	8000ef8 <__NVIC_SetPriorityGrouping>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b086      	sub	sp, #24
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e4:	f7ff ff2c 	bl	8000f40 <__NVIC_GetPriorityGrouping>
 80010e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	6978      	ldr	r0, [r7, #20]
 80010f0:	f7ff ff7a 	bl	8000fe8 <NVIC_EncodePriority>
 80010f4:	4602      	mov	r2, r0
 80010f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff49 	bl	8000f94 <__NVIC_SetPriority>
}
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff1f 	bl	8000f5c <__NVIC_EnableIRQ>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800112a:	f7ff ff8f 	bl	800104c <__NVIC_SystemReset>

0800112e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ff9e 	bl	8001078 <SysTick_Config>
 800113c:	4603      	mov	r3, r0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114a:	b087      	sub	sp, #28
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001162:	4b2f      	ldr	r3, [pc, #188]	@ (8001220 <HAL_FLASH_Program+0xd8>)
 8001164:	7e1b      	ldrb	r3, [r3, #24]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d101      	bne.n	800116e <HAL_FLASH_Program+0x26>
 800116a:	2302      	movs	r3, #2
 800116c:	e054      	b.n	8001218 <HAL_FLASH_Program+0xd0>
 800116e:	4b2c      	ldr	r3, [pc, #176]	@ (8001220 <HAL_FLASH_Program+0xd8>)
 8001170:	2201      	movs	r2, #1
 8001172:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001174:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001178:	f000 f8a8 	bl	80012cc <FLASH_WaitForLastOperation>
 800117c:	4603      	mov	r3, r0
 800117e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001180:	7dfb      	ldrb	r3, [r7, #23]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d144      	bne.n	8001210 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d102      	bne.n	8001192 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800118c:	2301      	movs	r3, #1
 800118e:	757b      	strb	r3, [r7, #21]
 8001190:	e007      	b.n	80011a2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2b02      	cmp	r3, #2
 8001196:	d102      	bne.n	800119e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001198:	2302      	movs	r3, #2
 800119a:	757b      	strb	r3, [r7, #21]
 800119c:	e001      	b.n	80011a2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800119e:	2304      	movs	r3, #4
 80011a0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	75bb      	strb	r3, [r7, #22]
 80011a6:	e02d      	b.n	8001204 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80011a8:	7dbb      	ldrb	r3, [r7, #22]
 80011aa:	005a      	lsls	r2, r3, #1
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	eb02 0c03 	add.w	ip, r2, r3
 80011b2:	7dbb      	ldrb	r3, [r7, #22]
 80011b4:	0119      	lsls	r1, r3, #4
 80011b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011ba:	f1c1 0620 	rsb	r6, r1, #32
 80011be:	f1a1 0020 	sub.w	r0, r1, #32
 80011c2:	fa22 f401 	lsr.w	r4, r2, r1
 80011c6:	fa03 f606 	lsl.w	r6, r3, r6
 80011ca:	4334      	orrs	r4, r6
 80011cc:	fa23 f000 	lsr.w	r0, r3, r0
 80011d0:	4304      	orrs	r4, r0
 80011d2:	fa23 f501 	lsr.w	r5, r3, r1
 80011d6:	b2a3      	uxth	r3, r4
 80011d8:	4619      	mov	r1, r3
 80011da:	4660      	mov	r0, ip
 80011dc:	f000 f85a 	bl	8001294 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80011e0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80011e4:	f000 f872 	bl	80012cc <FLASH_WaitForLastOperation>
 80011e8:	4603      	mov	r3, r0
 80011ea:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80011ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001224 <HAL_FLASH_Program+0xdc>)
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001224 <HAL_FLASH_Program+0xdc>)
 80011f2:	f023 0301 	bic.w	r3, r3, #1
 80011f6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80011f8:	7dfb      	ldrb	r3, [r7, #23]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d107      	bne.n	800120e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80011fe:	7dbb      	ldrb	r3, [r7, #22]
 8001200:	3301      	adds	r3, #1
 8001202:	75bb      	strb	r3, [r7, #22]
 8001204:	7dba      	ldrb	r2, [r7, #22]
 8001206:	7d7b      	ldrb	r3, [r7, #21]
 8001208:	429a      	cmp	r2, r3
 800120a:	d3cd      	bcc.n	80011a8 <HAL_FLASH_Program+0x60>
 800120c:	e000      	b.n	8001210 <HAL_FLASH_Program+0xc8>
      {
        break;
 800120e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001210:	4b03      	ldr	r3, [pc, #12]	@ (8001220 <HAL_FLASH_Program+0xd8>)
 8001212:	2200      	movs	r2, #0
 8001214:	761a      	strb	r2, [r3, #24]

  return status;
 8001216:	7dfb      	ldrb	r3, [r7, #23]
}
 8001218:	4618      	mov	r0, r3
 800121a:	371c      	adds	r7, #28
 800121c:	46bd      	mov	sp, r7
 800121e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001220:	200004a0 	.word	0x200004a0
 8001224:	40022000 	.word	0x40022000

08001228 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001232:	4b0d      	ldr	r3, [pc, #52]	@ (8001268 <HAL_FLASH_Unlock+0x40>)
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800123a:	2b00      	cmp	r3, #0
 800123c:	d00d      	beq.n	800125a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800123e:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <HAL_FLASH_Unlock+0x40>)
 8001240:	4a0a      	ldr	r2, [pc, #40]	@ (800126c <HAL_FLASH_Unlock+0x44>)
 8001242:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001244:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <HAL_FLASH_Unlock+0x40>)
 8001246:	4a0a      	ldr	r2, [pc, #40]	@ (8001270 <HAL_FLASH_Unlock+0x48>)
 8001248:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800124a:	4b07      	ldr	r3, [pc, #28]	@ (8001268 <HAL_FLASH_Unlock+0x40>)
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800125a:	79fb      	ldrb	r3, [r7, #7]
}
 800125c:	4618      	mov	r0, r3
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40022000 	.word	0x40022000
 800126c:	45670123 	.word	0x45670123
 8001270:	cdef89ab 	.word	0xcdef89ab

08001274 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001278:	4b05      	ldr	r3, [pc, #20]	@ (8001290 <HAL_FLASH_Lock+0x1c>)
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	4a04      	ldr	r2, [pc, #16]	@ (8001290 <HAL_FLASH_Lock+0x1c>)
 800127e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001282:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40022000 	.word	0x40022000

08001294 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80012a0:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <FLASH_Program_HalfWord+0x30>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80012a6:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <FLASH_Program_HalfWord+0x34>)
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	4a07      	ldr	r2, [pc, #28]	@ (80012c8 <FLASH_Program_HalfWord+0x34>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	887a      	ldrh	r2, [r7, #2]
 80012b6:	801a      	strh	r2, [r3, #0]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	200004a0 	.word	0x200004a0
 80012c8:	40022000 	.word	0x40022000

080012cc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80012d4:	f7ff fde2 	bl	8000e9c <HAL_GetTick>
 80012d8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80012da:	e010      	b.n	80012fe <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e2:	d00c      	beq.n	80012fe <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d007      	beq.n	80012fa <FLASH_WaitForLastOperation+0x2e>
 80012ea:	f7ff fdd7 	bl	8000e9c <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d201      	bcs.n	80012fe <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e025      	b.n	800134a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80012fe:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <FLASH_WaitForLastOperation+0x88>)
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1e8      	bne.n	80012dc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800130a:	4b12      	ldr	r3, [pc, #72]	@ (8001354 <FLASH_WaitForLastOperation+0x88>)
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	f003 0320 	and.w	r3, r3, #32
 8001312:	2b00      	cmp	r3, #0
 8001314:	d002      	beq.n	800131c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001316:	4b0f      	ldr	r3, [pc, #60]	@ (8001354 <FLASH_WaitForLastOperation+0x88>)
 8001318:	2220      	movs	r2, #32
 800131a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800131c:	4b0d      	ldr	r3, [pc, #52]	@ (8001354 <FLASH_WaitForLastOperation+0x88>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	f003 0310 	and.w	r3, r3, #16
 8001324:	2b00      	cmp	r3, #0
 8001326:	d10b      	bne.n	8001340 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001328:	4b0a      	ldr	r3, [pc, #40]	@ (8001354 <FLASH_WaitForLastOperation+0x88>)
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001330:	2b00      	cmp	r3, #0
 8001332:	d105      	bne.n	8001340 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001334:	4b07      	ldr	r3, [pc, #28]	@ (8001354 <FLASH_WaitForLastOperation+0x88>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001340:	f000 f80a 	bl	8001358 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e000      	b.n	800134a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40022000 	.word	0x40022000

08001358 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001362:	4b23      	ldr	r3, [pc, #140]	@ (80013f0 <FLASH_SetErrorCode+0x98>)
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	f003 0310 	and.w	r3, r3, #16
 800136a:	2b00      	cmp	r3, #0
 800136c:	d009      	beq.n	8001382 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800136e:	4b21      	ldr	r3, [pc, #132]	@ (80013f4 <FLASH_SetErrorCode+0x9c>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	f043 0302 	orr.w	r3, r3, #2
 8001376:	4a1f      	ldr	r2, [pc, #124]	@ (80013f4 <FLASH_SetErrorCode+0x9c>)
 8001378:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f043 0310 	orr.w	r3, r3, #16
 8001380:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001382:	4b1b      	ldr	r3, [pc, #108]	@ (80013f0 <FLASH_SetErrorCode+0x98>)
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	2b00      	cmp	r3, #0
 800138c:	d009      	beq.n	80013a2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800138e:	4b19      	ldr	r3, [pc, #100]	@ (80013f4 <FLASH_SetErrorCode+0x9c>)
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	4a17      	ldr	r2, [pc, #92]	@ (80013f4 <FLASH_SetErrorCode+0x9c>)
 8001398:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80013a2:	4b13      	ldr	r3, [pc, #76]	@ (80013f0 <FLASH_SetErrorCode+0x98>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00b      	beq.n	80013c6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80013ae:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <FLASH_SetErrorCode+0x9c>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	f043 0304 	orr.w	r3, r3, #4
 80013b6:	4a0f      	ldr	r2, [pc, #60]	@ (80013f4 <FLASH_SetErrorCode+0x9c>)
 80013b8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80013ba:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <FLASH_SetErrorCode+0x98>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	4a0c      	ldr	r2, [pc, #48]	@ (80013f0 <FLASH_SetErrorCode+0x98>)
 80013c0:	f023 0301 	bic.w	r3, r3, #1
 80013c4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f240 1201 	movw	r2, #257	@ 0x101
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d106      	bne.n	80013de <FLASH_SetErrorCode+0x86>
 80013d0:	4b07      	ldr	r3, [pc, #28]	@ (80013f0 <FLASH_SetErrorCode+0x98>)
 80013d2:	69db      	ldr	r3, [r3, #28]
 80013d4:	4a06      	ldr	r2, [pc, #24]	@ (80013f0 <FLASH_SetErrorCode+0x98>)
 80013d6:	f023 0301 	bic.w	r3, r3, #1
 80013da:	61d3      	str	r3, [r2, #28]
}  
 80013dc:	e002      	b.n	80013e4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80013de:	4a04      	ldr	r2, [pc, #16]	@ (80013f0 <FLASH_SetErrorCode+0x98>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	60d3      	str	r3, [r2, #12]
}  
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40022000 	.word	0x40022000
 80013f4:	200004a0 	.word	0x200004a0

080013f8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800140a:	4b2f      	ldr	r3, [pc, #188]	@ (80014c8 <HAL_FLASHEx_Erase+0xd0>)
 800140c:	7e1b      	ldrb	r3, [r3, #24]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d101      	bne.n	8001416 <HAL_FLASHEx_Erase+0x1e>
 8001412:	2302      	movs	r3, #2
 8001414:	e053      	b.n	80014be <HAL_FLASHEx_Erase+0xc6>
 8001416:	4b2c      	ldr	r3, [pc, #176]	@ (80014c8 <HAL_FLASHEx_Erase+0xd0>)
 8001418:	2201      	movs	r2, #1
 800141a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b02      	cmp	r3, #2
 8001422:	d116      	bne.n	8001452 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001424:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001428:	f7ff ff50 	bl	80012cc <FLASH_WaitForLastOperation>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d141      	bne.n	80014b6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001432:	2001      	movs	r0, #1
 8001434:	f000 f84c 	bl	80014d0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001438:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800143c:	f7ff ff46 	bl	80012cc <FLASH_WaitForLastOperation>
 8001440:	4603      	mov	r3, r0
 8001442:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001444:	4b21      	ldr	r3, [pc, #132]	@ (80014cc <HAL_FLASHEx_Erase+0xd4>)
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	4a20      	ldr	r2, [pc, #128]	@ (80014cc <HAL_FLASHEx_Erase+0xd4>)
 800144a:	f023 0304 	bic.w	r3, r3, #4
 800144e:	6113      	str	r3, [r2, #16]
 8001450:	e031      	b.n	80014b6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001452:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001456:	f7ff ff39 	bl	80012cc <FLASH_WaitForLastOperation>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d12a      	bne.n	80014b6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	f04f 32ff 	mov.w	r2, #4294967295
 8001466:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	e019      	b.n	80014a4 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001470:	68b8      	ldr	r0, [r7, #8]
 8001472:	f000 f849 	bl	8001508 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001476:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800147a:	f7ff ff27 	bl	80012cc <FLASH_WaitForLastOperation>
 800147e:	4603      	mov	r3, r0
 8001480:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001482:	4b12      	ldr	r3, [pc, #72]	@ (80014cc <HAL_FLASHEx_Erase+0xd4>)
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	4a11      	ldr	r2, [pc, #68]	@ (80014cc <HAL_FLASHEx_Erase+0xd4>)
 8001488:	f023 0302 	bic.w	r3, r3, #2
 800148c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	601a      	str	r2, [r3, #0]
            break;
 800149a:	e00c      	b.n	80014b6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80014a2:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	029a      	lsls	r2, r3, #10
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	4413      	add	r3, r2
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d3dc      	bcc.n	8001470 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80014b6:	4b04      	ldr	r3, [pc, #16]	@ (80014c8 <HAL_FLASHEx_Erase+0xd0>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	761a      	strb	r2, [r3, #24]

  return status;
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200004a0 	.word	0x200004a0
 80014cc:	40022000 	.word	0x40022000

080014d0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80014d8:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <FLASH_MassErase+0x30>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80014de:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <FLASH_MassErase+0x34>)
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	4a08      	ldr	r2, [pc, #32]	@ (8001504 <FLASH_MassErase+0x34>)
 80014e4:	f043 0304 	orr.w	r3, r3, #4
 80014e8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80014ea:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <FLASH_MassErase+0x34>)
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	4a05      	ldr	r2, [pc, #20]	@ (8001504 <FLASH_MassErase+0x34>)
 80014f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014f4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	200004a0 	.word	0x200004a0
 8001504:	40022000 	.word	0x40022000

08001508 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001510:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <FLASH_PageErase+0x38>)
 8001512:	2200      	movs	r2, #0
 8001514:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001516:	4b0b      	ldr	r3, [pc, #44]	@ (8001544 <FLASH_PageErase+0x3c>)
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	4a0a      	ldr	r2, [pc, #40]	@ (8001544 <FLASH_PageErase+0x3c>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001522:	4a08      	ldr	r2, [pc, #32]	@ (8001544 <FLASH_PageErase+0x3c>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <FLASH_PageErase+0x3c>)
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	4a05      	ldr	r2, [pc, #20]	@ (8001544 <FLASH_PageErase+0x3c>)
 800152e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001532:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	200004a0 	.word	0x200004a0
 8001544:	40022000 	.word	0x40022000

08001548 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001548:	b480      	push	{r7}
 800154a:	b08b      	sub	sp, #44	@ 0x2c
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001556:	2300      	movs	r3, #0
 8001558:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800155a:	e169      	b.n	8001830 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800155c:	2201      	movs	r2, #1
 800155e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	69fa      	ldr	r2, [r7, #28]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	429a      	cmp	r2, r3
 8001576:	f040 8158 	bne.w	800182a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	4a9a      	ldr	r2, [pc, #616]	@ (80017e8 <HAL_GPIO_Init+0x2a0>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d05e      	beq.n	8001642 <HAL_GPIO_Init+0xfa>
 8001584:	4a98      	ldr	r2, [pc, #608]	@ (80017e8 <HAL_GPIO_Init+0x2a0>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d875      	bhi.n	8001676 <HAL_GPIO_Init+0x12e>
 800158a:	4a98      	ldr	r2, [pc, #608]	@ (80017ec <HAL_GPIO_Init+0x2a4>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d058      	beq.n	8001642 <HAL_GPIO_Init+0xfa>
 8001590:	4a96      	ldr	r2, [pc, #600]	@ (80017ec <HAL_GPIO_Init+0x2a4>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d86f      	bhi.n	8001676 <HAL_GPIO_Init+0x12e>
 8001596:	4a96      	ldr	r2, [pc, #600]	@ (80017f0 <HAL_GPIO_Init+0x2a8>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d052      	beq.n	8001642 <HAL_GPIO_Init+0xfa>
 800159c:	4a94      	ldr	r2, [pc, #592]	@ (80017f0 <HAL_GPIO_Init+0x2a8>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d869      	bhi.n	8001676 <HAL_GPIO_Init+0x12e>
 80015a2:	4a94      	ldr	r2, [pc, #592]	@ (80017f4 <HAL_GPIO_Init+0x2ac>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d04c      	beq.n	8001642 <HAL_GPIO_Init+0xfa>
 80015a8:	4a92      	ldr	r2, [pc, #584]	@ (80017f4 <HAL_GPIO_Init+0x2ac>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d863      	bhi.n	8001676 <HAL_GPIO_Init+0x12e>
 80015ae:	4a92      	ldr	r2, [pc, #584]	@ (80017f8 <HAL_GPIO_Init+0x2b0>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d046      	beq.n	8001642 <HAL_GPIO_Init+0xfa>
 80015b4:	4a90      	ldr	r2, [pc, #576]	@ (80017f8 <HAL_GPIO_Init+0x2b0>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d85d      	bhi.n	8001676 <HAL_GPIO_Init+0x12e>
 80015ba:	2b12      	cmp	r3, #18
 80015bc:	d82a      	bhi.n	8001614 <HAL_GPIO_Init+0xcc>
 80015be:	2b12      	cmp	r3, #18
 80015c0:	d859      	bhi.n	8001676 <HAL_GPIO_Init+0x12e>
 80015c2:	a201      	add	r2, pc, #4	@ (adr r2, 80015c8 <HAL_GPIO_Init+0x80>)
 80015c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c8:	08001643 	.word	0x08001643
 80015cc:	0800161d 	.word	0x0800161d
 80015d0:	0800162f 	.word	0x0800162f
 80015d4:	08001671 	.word	0x08001671
 80015d8:	08001677 	.word	0x08001677
 80015dc:	08001677 	.word	0x08001677
 80015e0:	08001677 	.word	0x08001677
 80015e4:	08001677 	.word	0x08001677
 80015e8:	08001677 	.word	0x08001677
 80015ec:	08001677 	.word	0x08001677
 80015f0:	08001677 	.word	0x08001677
 80015f4:	08001677 	.word	0x08001677
 80015f8:	08001677 	.word	0x08001677
 80015fc:	08001677 	.word	0x08001677
 8001600:	08001677 	.word	0x08001677
 8001604:	08001677 	.word	0x08001677
 8001608:	08001677 	.word	0x08001677
 800160c:	08001625 	.word	0x08001625
 8001610:	08001639 	.word	0x08001639
 8001614:	4a79      	ldr	r2, [pc, #484]	@ (80017fc <HAL_GPIO_Init+0x2b4>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d013      	beq.n	8001642 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800161a:	e02c      	b.n	8001676 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	623b      	str	r3, [r7, #32]
          break;
 8001622:	e029      	b.n	8001678 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	3304      	adds	r3, #4
 800162a:	623b      	str	r3, [r7, #32]
          break;
 800162c:	e024      	b.n	8001678 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	3308      	adds	r3, #8
 8001634:	623b      	str	r3, [r7, #32]
          break;
 8001636:	e01f      	b.n	8001678 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	330c      	adds	r3, #12
 800163e:	623b      	str	r3, [r7, #32]
          break;
 8001640:	e01a      	b.n	8001678 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d102      	bne.n	8001650 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800164a:	2304      	movs	r3, #4
 800164c:	623b      	str	r3, [r7, #32]
          break;
 800164e:	e013      	b.n	8001678 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d105      	bne.n	8001664 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001658:	2308      	movs	r3, #8
 800165a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69fa      	ldr	r2, [r7, #28]
 8001660:	611a      	str	r2, [r3, #16]
          break;
 8001662:	e009      	b.n	8001678 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001664:	2308      	movs	r3, #8
 8001666:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69fa      	ldr	r2, [r7, #28]
 800166c:	615a      	str	r2, [r3, #20]
          break;
 800166e:	e003      	b.n	8001678 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001670:	2300      	movs	r3, #0
 8001672:	623b      	str	r3, [r7, #32]
          break;
 8001674:	e000      	b.n	8001678 <HAL_GPIO_Init+0x130>
          break;
 8001676:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	2bff      	cmp	r3, #255	@ 0xff
 800167c:	d801      	bhi.n	8001682 <HAL_GPIO_Init+0x13a>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	e001      	b.n	8001686 <HAL_GPIO_Init+0x13e>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3304      	adds	r3, #4
 8001686:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	2bff      	cmp	r3, #255	@ 0xff
 800168c:	d802      	bhi.n	8001694 <HAL_GPIO_Init+0x14c>
 800168e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	e002      	b.n	800169a <HAL_GPIO_Init+0x152>
 8001694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001696:	3b08      	subs	r3, #8
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	210f      	movs	r1, #15
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	fa01 f303 	lsl.w	r3, r1, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	401a      	ands	r2, r3
 80016ac:	6a39      	ldr	r1, [r7, #32]
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	fa01 f303 	lsl.w	r3, r1, r3
 80016b4:	431a      	orrs	r2, r3
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 80b1 	beq.w	800182a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001800 <HAL_GPIO_Init+0x2b8>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	4a4c      	ldr	r2, [pc, #304]	@ (8001800 <HAL_GPIO_Init+0x2b8>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6193      	str	r3, [r2, #24]
 80016d4:	4b4a      	ldr	r3, [pc, #296]	@ (8001800 <HAL_GPIO_Init+0x2b8>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016e0:	4a48      	ldr	r2, [pc, #288]	@ (8001804 <HAL_GPIO_Init+0x2bc>)
 80016e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e4:	089b      	lsrs	r3, r3, #2
 80016e6:	3302      	adds	r3, #2
 80016e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	220f      	movs	r2, #15
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	4013      	ands	r3, r2
 8001702:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a40      	ldr	r2, [pc, #256]	@ (8001808 <HAL_GPIO_Init+0x2c0>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d013      	beq.n	8001734 <HAL_GPIO_Init+0x1ec>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a3f      	ldr	r2, [pc, #252]	@ (800180c <HAL_GPIO_Init+0x2c4>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d00d      	beq.n	8001730 <HAL_GPIO_Init+0x1e8>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a3e      	ldr	r2, [pc, #248]	@ (8001810 <HAL_GPIO_Init+0x2c8>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d007      	beq.n	800172c <HAL_GPIO_Init+0x1e4>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a3d      	ldr	r2, [pc, #244]	@ (8001814 <HAL_GPIO_Init+0x2cc>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d101      	bne.n	8001728 <HAL_GPIO_Init+0x1e0>
 8001724:	2303      	movs	r3, #3
 8001726:	e006      	b.n	8001736 <HAL_GPIO_Init+0x1ee>
 8001728:	2304      	movs	r3, #4
 800172a:	e004      	b.n	8001736 <HAL_GPIO_Init+0x1ee>
 800172c:	2302      	movs	r3, #2
 800172e:	e002      	b.n	8001736 <HAL_GPIO_Init+0x1ee>
 8001730:	2301      	movs	r3, #1
 8001732:	e000      	b.n	8001736 <HAL_GPIO_Init+0x1ee>
 8001734:	2300      	movs	r3, #0
 8001736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001738:	f002 0203 	and.w	r2, r2, #3
 800173c:	0092      	lsls	r2, r2, #2
 800173e:	4093      	lsls	r3, r2
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	4313      	orrs	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001746:	492f      	ldr	r1, [pc, #188]	@ (8001804 <HAL_GPIO_Init+0x2bc>)
 8001748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174a:	089b      	lsrs	r3, r3, #2
 800174c:	3302      	adds	r3, #2
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d006      	beq.n	800176e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001760:	4b2d      	ldr	r3, [pc, #180]	@ (8001818 <HAL_GPIO_Init+0x2d0>)
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	492c      	ldr	r1, [pc, #176]	@ (8001818 <HAL_GPIO_Init+0x2d0>)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	4313      	orrs	r3, r2
 800176a:	608b      	str	r3, [r1, #8]
 800176c:	e006      	b.n	800177c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800176e:	4b2a      	ldr	r3, [pc, #168]	@ (8001818 <HAL_GPIO_Init+0x2d0>)
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	43db      	mvns	r3, r3
 8001776:	4928      	ldr	r1, [pc, #160]	@ (8001818 <HAL_GPIO_Init+0x2d0>)
 8001778:	4013      	ands	r3, r2
 800177a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d006      	beq.n	8001796 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001788:	4b23      	ldr	r3, [pc, #140]	@ (8001818 <HAL_GPIO_Init+0x2d0>)
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	4922      	ldr	r1, [pc, #136]	@ (8001818 <HAL_GPIO_Init+0x2d0>)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	4313      	orrs	r3, r2
 8001792:	60cb      	str	r3, [r1, #12]
 8001794:	e006      	b.n	80017a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001796:	4b20      	ldr	r3, [pc, #128]	@ (8001818 <HAL_GPIO_Init+0x2d0>)
 8001798:	68da      	ldr	r2, [r3, #12]
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	43db      	mvns	r3, r3
 800179e:	491e      	ldr	r1, [pc, #120]	@ (8001818 <HAL_GPIO_Init+0x2d0>)
 80017a0:	4013      	ands	r3, r2
 80017a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d006      	beq.n	80017be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017b0:	4b19      	ldr	r3, [pc, #100]	@ (8001818 <HAL_GPIO_Init+0x2d0>)
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	4918      	ldr	r1, [pc, #96]	@ (8001818 <HAL_GPIO_Init+0x2d0>)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	604b      	str	r3, [r1, #4]
 80017bc:	e006      	b.n	80017cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017be:	4b16      	ldr	r3, [pc, #88]	@ (8001818 <HAL_GPIO_Init+0x2d0>)
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	4914      	ldr	r1, [pc, #80]	@ (8001818 <HAL_GPIO_Init+0x2d0>)
 80017c8:	4013      	ands	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d021      	beq.n	800181c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001818 <HAL_GPIO_Init+0x2d0>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	490e      	ldr	r1, [pc, #56]	@ (8001818 <HAL_GPIO_Init+0x2d0>)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	600b      	str	r3, [r1, #0]
 80017e4:	e021      	b.n	800182a <HAL_GPIO_Init+0x2e2>
 80017e6:	bf00      	nop
 80017e8:	10320000 	.word	0x10320000
 80017ec:	10310000 	.word	0x10310000
 80017f0:	10220000 	.word	0x10220000
 80017f4:	10210000 	.word	0x10210000
 80017f8:	10120000 	.word	0x10120000
 80017fc:	10110000 	.word	0x10110000
 8001800:	40021000 	.word	0x40021000
 8001804:	40010000 	.word	0x40010000
 8001808:	40010800 	.word	0x40010800
 800180c:	40010c00 	.word	0x40010c00
 8001810:	40011000 	.word	0x40011000
 8001814:	40011400 	.word	0x40011400
 8001818:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800181c:	4b0b      	ldr	r3, [pc, #44]	@ (800184c <HAL_GPIO_Init+0x304>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	43db      	mvns	r3, r3
 8001824:	4909      	ldr	r1, [pc, #36]	@ (800184c <HAL_GPIO_Init+0x304>)
 8001826:	4013      	ands	r3, r2
 8001828:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800182a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182c:	3301      	adds	r3, #1
 800182e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001836:	fa22 f303 	lsr.w	r3, r2, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	f47f ae8e 	bne.w	800155c <HAL_GPIO_Init+0x14>
  }
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	372c      	adds	r7, #44	@ 0x2c
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr
 800184c:	40010400 	.word	0x40010400

08001850 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	887b      	ldrh	r3, [r7, #2]
 8001862:	4013      	ands	r3, r2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d002      	beq.n	800186e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001868:	2301      	movs	r3, #1
 800186a:	73fb      	strb	r3, [r7, #15]
 800186c:	e001      	b.n	8001872 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800186e:	2300      	movs	r3, #0
 8001870:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001872:	7bfb      	ldrb	r3, [r7, #15]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr

0800187e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	460b      	mov	r3, r1
 8001888:	807b      	strh	r3, [r7, #2]
 800188a:	4613      	mov	r3, r2
 800188c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800188e:	787b      	ldrb	r3, [r7, #1]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001894:	887a      	ldrh	r2, [r7, #2]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800189a:	e003      	b.n	80018a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800189c:	887b      	ldrh	r3, [r7, #2]
 800189e:	041a      	lsls	r2, r3, #16
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	611a      	str	r2, [r3, #16]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
	...

080018b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018ba:	4b08      	ldr	r3, [pc, #32]	@ (80018dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018bc:	695a      	ldr	r2, [r3, #20]
 80018be:	88fb      	ldrh	r3, [r7, #6]
 80018c0:	4013      	ands	r3, r2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d006      	beq.n	80018d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018c6:	4a05      	ldr	r2, [pc, #20]	@ (80018dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018cc:	88fb      	ldrh	r3, [r7, #6]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 f806 	bl	80018e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40010400 	.word	0x40010400

080018e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80018f8:	4b03      	ldr	r3, [pc, #12]	@ (8001908 <HAL_PWR_EnableBkUpAccess+0x14>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	601a      	str	r2, [r3, #0]
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	420e0020 	.word	0x420e0020

0800190c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001912:	f7ff fac3 	bl	8000e9c <HAL_GetTick>
 8001916:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001918:	4b45      	ldr	r3, [pc, #276]	@ (8001a30 <HAL_RCC_DeInit+0x124>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a44      	ldr	r2, [pc, #272]	@ (8001a30 <HAL_RCC_DeInit+0x124>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001924:	e008      	b.n	8001938 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001926:	f7ff fab9 	bl	8000e9c <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e077      	b.n	8001a28 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001938:	4b3d      	ldr	r3, [pc, #244]	@ (8001a30 <HAL_RCC_DeInit+0x124>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0f0      	beq.n	8001926 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8001944:	4b3a      	ldr	r3, [pc, #232]	@ (8001a30 <HAL_RCC_DeInit+0x124>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800194c:	4a38      	ldr	r2, [pc, #224]	@ (8001a30 <HAL_RCC_DeInit+0x124>)
 800194e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001952:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001954:	f7ff faa2 	bl	8000e9c <HAL_GetTick>
 8001958:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800195a:	4b35      	ldr	r3, [pc, #212]	@ (8001a30 <HAL_RCC_DeInit+0x124>)
 800195c:	2200      	movs	r2, #0
 800195e:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001960:	e00a      	b.n	8001978 <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001962:	f7ff fa9b 	bl	8000e9c <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001970:	4293      	cmp	r3, r2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e057      	b.n	8001a28 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001978:	4b2d      	ldr	r3, [pc, #180]	@ (8001a30 <HAL_RCC_DeInit+0x124>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 030c 	and.w	r3, r3, #12
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1ee      	bne.n	8001962 <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8001984:	4b2b      	ldr	r3, [pc, #172]	@ (8001a34 <HAL_RCC_DeInit+0x128>)
 8001986:	4a2c      	ldr	r2, [pc, #176]	@ (8001a38 <HAL_RCC_DeInit+0x12c>)
 8001988:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800198a:	4b2c      	ldr	r3, [pc, #176]	@ (8001a3c <HAL_RCC_DeInit+0x130>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fa42 	bl	8000e18 <HAL_InitTick>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e044      	b.n	8001a28 <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800199e:	f7ff fa7d 	bl	8000e9c <HAL_GetTick>
 80019a2:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80019a4:	4b22      	ldr	r3, [pc, #136]	@ (8001a30 <HAL_RCC_DeInit+0x124>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a21      	ldr	r2, [pc, #132]	@ (8001a30 <HAL_RCC_DeInit+0x124>)
 80019aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019ae:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b2:	f7ff fa73 	bl	8000e9c <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e031      	b.n	8001a28 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80019c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a30 <HAL_RCC_DeInit+0x124>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1f0      	bne.n	80019b2 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 80019d0:	4b17      	ldr	r3, [pc, #92]	@ (8001a30 <HAL_RCC_DeInit+0x124>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80019d6:	f7ff fa61 	bl	8000e9c <HAL_GetTick>
 80019da:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 80019dc:	4b14      	ldr	r3, [pc, #80]	@ (8001a30 <HAL_RCC_DeInit+0x124>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a13      	ldr	r2, [pc, #76]	@ (8001a30 <HAL_RCC_DeInit+0x124>)
 80019e2:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80019e6:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ea:	f7ff fa57 	bl	8000e9c <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b64      	cmp	r3, #100	@ 0x64
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e015      	b.n	8001a28 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80019fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a30 <HAL_RCC_DeInit+0x124>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1f0      	bne.n	80019ea <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001a08:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <HAL_RCC_DeInit+0x124>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a08      	ldr	r2, [pc, #32]	@ (8001a30 <HAL_RCC_DeInit+0x124>)
 8001a0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a12:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001a14:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_RCC_DeInit+0x124>)
 8001a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a18:	4a05      	ldr	r2, [pc, #20]	@ (8001a30 <HAL_RCC_DeInit+0x124>)
 8001a1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a1e:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8001a20:	4b03      	ldr	r3, [pc, #12]	@ (8001a30 <HAL_RCC_DeInit+0x124>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40021000 	.word	0x40021000
 8001a34:	20000010 	.word	0x20000010
 8001a38:	007a1200 	.word	0x007a1200
 8001a3c:	20000014 	.word	0x20000014

08001a40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e272      	b.n	8001f38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 8087 	beq.w	8001b6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a60:	4b92      	ldr	r3, [pc, #584]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 030c 	and.w	r3, r3, #12
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d00c      	beq.n	8001a86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a6c:	4b8f      	ldr	r3, [pc, #572]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d112      	bne.n	8001a9e <HAL_RCC_OscConfig+0x5e>
 8001a78:	4b8c      	ldr	r3, [pc, #560]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a84:	d10b      	bne.n	8001a9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a86:	4b89      	ldr	r3, [pc, #548]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d06c      	beq.n	8001b6c <HAL_RCC_OscConfig+0x12c>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d168      	bne.n	8001b6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e24c      	b.n	8001f38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aa6:	d106      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x76>
 8001aa8:	4b80      	ldr	r3, [pc, #512]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a7f      	ldr	r2, [pc, #508]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001aae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	e02e      	b.n	8001b14 <HAL_RCC_OscConfig+0xd4>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10c      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x98>
 8001abe:	4b7b      	ldr	r3, [pc, #492]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a7a      	ldr	r2, [pc, #488]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	4b78      	ldr	r3, [pc, #480]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a77      	ldr	r2, [pc, #476]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	e01d      	b.n	8001b14 <HAL_RCC_OscConfig+0xd4>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ae0:	d10c      	bne.n	8001afc <HAL_RCC_OscConfig+0xbc>
 8001ae2:	4b72      	ldr	r3, [pc, #456]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a71      	ldr	r2, [pc, #452]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	4b6f      	ldr	r3, [pc, #444]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a6e      	ldr	r2, [pc, #440]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001af4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	e00b      	b.n	8001b14 <HAL_RCC_OscConfig+0xd4>
 8001afc:	4b6b      	ldr	r3, [pc, #428]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a6a      	ldr	r2, [pc, #424]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	4b68      	ldr	r3, [pc, #416]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a67      	ldr	r2, [pc, #412]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d013      	beq.n	8001b44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7ff f9be 	bl	8000e9c <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b24:	f7ff f9ba 	bl	8000e9c <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b64      	cmp	r3, #100	@ 0x64
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e200      	b.n	8001f38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b36:	4b5d      	ldr	r3, [pc, #372]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0xe4>
 8001b42:	e014      	b.n	8001b6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7ff f9aa 	bl	8000e9c <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b4c:	f7ff f9a6 	bl	8000e9c <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b64      	cmp	r3, #100	@ 0x64
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e1ec      	b.n	8001f38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b5e:	4b53      	ldr	r3, [pc, #332]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x10c>
 8001b6a:	e000      	b.n	8001b6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d063      	beq.n	8001c42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b7a:	4b4c      	ldr	r3, [pc, #304]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00b      	beq.n	8001b9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b86:	4b49      	ldr	r3, [pc, #292]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	2b08      	cmp	r3, #8
 8001b90:	d11c      	bne.n	8001bcc <HAL_RCC_OscConfig+0x18c>
 8001b92:	4b46      	ldr	r3, [pc, #280]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d116      	bne.n	8001bcc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b9e:	4b43      	ldr	r3, [pc, #268]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d005      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x176>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d001      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e1c0      	b.n	8001f38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb6:	4b3d      	ldr	r3, [pc, #244]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	4939      	ldr	r1, [pc, #228]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bca:	e03a      	b.n	8001c42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d020      	beq.n	8001c16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd4:	4b36      	ldr	r3, [pc, #216]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bda:	f7ff f95f 	bl	8000e9c <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be2:	f7ff f95b 	bl	8000e9c <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e1a1      	b.n	8001f38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf4:	4b2d      	ldr	r3, [pc, #180]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f0      	beq.n	8001be2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c00:	4b2a      	ldr	r3, [pc, #168]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4927      	ldr	r1, [pc, #156]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	600b      	str	r3, [r1, #0]
 8001c14:	e015      	b.n	8001c42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c16:	4b26      	ldr	r3, [pc, #152]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7ff f93e 	bl	8000e9c <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c24:	f7ff f93a 	bl	8000e9c <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e180      	b.n	8001f38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c36:	4b1d      	ldr	r3, [pc, #116]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d03a      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d019      	beq.n	8001c8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c56:	4b17      	ldr	r3, [pc, #92]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c5c:	f7ff f91e 	bl	8000e9c <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c64:	f7ff f91a 	bl	8000e9c <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e160      	b.n	8001f38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c76:	4b0d      	ldr	r3, [pc, #52]	@ (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c82:	2001      	movs	r0, #1
 8001c84:	f000 face 	bl	8002224 <RCC_Delay>
 8001c88:	e01c      	b.n	8001cc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c90:	f7ff f904 	bl	8000e9c <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c96:	e00f      	b.n	8001cb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c98:	f7ff f900 	bl	8000e9c <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d908      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e146      	b.n	8001f38 <HAL_RCC_OscConfig+0x4f8>
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	42420000 	.word	0x42420000
 8001cb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb8:	4b92      	ldr	r3, [pc, #584]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1e9      	bne.n	8001c98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 80a6 	beq.w	8001e1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd6:	4b8b      	ldr	r3, [pc, #556]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10d      	bne.n	8001cfe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce2:	4b88      	ldr	r3, [pc, #544]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	4a87      	ldr	r2, [pc, #540]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cec:	61d3      	str	r3, [r2, #28]
 8001cee:	4b85      	ldr	r3, [pc, #532]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfe:	4b82      	ldr	r3, [pc, #520]	@ (8001f08 <HAL_RCC_OscConfig+0x4c8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d118      	bne.n	8001d3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d0a:	4b7f      	ldr	r3, [pc, #508]	@ (8001f08 <HAL_RCC_OscConfig+0x4c8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a7e      	ldr	r2, [pc, #504]	@ (8001f08 <HAL_RCC_OscConfig+0x4c8>)
 8001d10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d16:	f7ff f8c1 	bl	8000e9c <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d1e:	f7ff f8bd 	bl	8000e9c <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b64      	cmp	r3, #100	@ 0x64
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e103      	b.n	8001f38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d30:	4b75      	ldr	r3, [pc, #468]	@ (8001f08 <HAL_RCC_OscConfig+0x4c8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d106      	bne.n	8001d52 <HAL_RCC_OscConfig+0x312>
 8001d44:	4b6f      	ldr	r3, [pc, #444]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	4a6e      	ldr	r2, [pc, #440]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6213      	str	r3, [r2, #32]
 8001d50:	e02d      	b.n	8001dae <HAL_RCC_OscConfig+0x36e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10c      	bne.n	8001d74 <HAL_RCC_OscConfig+0x334>
 8001d5a:	4b6a      	ldr	r3, [pc, #424]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	4a69      	ldr	r2, [pc, #420]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	f023 0301 	bic.w	r3, r3, #1
 8001d64:	6213      	str	r3, [r2, #32]
 8001d66:	4b67      	ldr	r3, [pc, #412]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	4a66      	ldr	r2, [pc, #408]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	f023 0304 	bic.w	r3, r3, #4
 8001d70:	6213      	str	r3, [r2, #32]
 8001d72:	e01c      	b.n	8001dae <HAL_RCC_OscConfig+0x36e>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	2b05      	cmp	r3, #5
 8001d7a:	d10c      	bne.n	8001d96 <HAL_RCC_OscConfig+0x356>
 8001d7c:	4b61      	ldr	r3, [pc, #388]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	4a60      	ldr	r2, [pc, #384]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001d82:	f043 0304 	orr.w	r3, r3, #4
 8001d86:	6213      	str	r3, [r2, #32]
 8001d88:	4b5e      	ldr	r3, [pc, #376]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	4a5d      	ldr	r2, [pc, #372]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6213      	str	r3, [r2, #32]
 8001d94:	e00b      	b.n	8001dae <HAL_RCC_OscConfig+0x36e>
 8001d96:	4b5b      	ldr	r3, [pc, #364]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	4a5a      	ldr	r2, [pc, #360]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001d9c:	f023 0301 	bic.w	r3, r3, #1
 8001da0:	6213      	str	r3, [r2, #32]
 8001da2:	4b58      	ldr	r3, [pc, #352]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	4a57      	ldr	r2, [pc, #348]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	f023 0304 	bic.w	r3, r3, #4
 8001dac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d015      	beq.n	8001de2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db6:	f7ff f871 	bl	8000e9c <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dbc:	e00a      	b.n	8001dd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dbe:	f7ff f86d 	bl	8000e9c <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e0b1      	b.n	8001f38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd4:	4b4b      	ldr	r3, [pc, #300]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0ee      	beq.n	8001dbe <HAL_RCC_OscConfig+0x37e>
 8001de0:	e014      	b.n	8001e0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de2:	f7ff f85b 	bl	8000e9c <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de8:	e00a      	b.n	8001e00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dea:	f7ff f857 	bl	8000e9c <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e09b      	b.n	8001f38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e00:	4b40      	ldr	r3, [pc, #256]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1ee      	bne.n	8001dea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e0c:	7dfb      	ldrb	r3, [r7, #23]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d105      	bne.n	8001e1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e12:	4b3c      	ldr	r3, [pc, #240]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	4a3b      	ldr	r2, [pc, #236]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 8087 	beq.w	8001f36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e28:	4b36      	ldr	r3, [pc, #216]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d061      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d146      	bne.n	8001eca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3c:	4b33      	ldr	r3, [pc, #204]	@ (8001f0c <HAL_RCC_OscConfig+0x4cc>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e42:	f7ff f82b 	bl	8000e9c <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4a:	f7ff f827 	bl	8000e9c <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e06d      	b.n	8001f38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e5c:	4b29      	ldr	r3, [pc, #164]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1f0      	bne.n	8001e4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e70:	d108      	bne.n	8001e84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e72:	4b24      	ldr	r3, [pc, #144]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	4921      	ldr	r1, [pc, #132]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e84:	4b1f      	ldr	r3, [pc, #124]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a19      	ldr	r1, [r3, #32]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e94:	430b      	orrs	r3, r1
 8001e96:	491b      	ldr	r1, [pc, #108]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001f0c <HAL_RCC_OscConfig+0x4cc>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea2:	f7fe fffb 	bl	8000e9c <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eaa:	f7fe fff7 	bl	8000e9c <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e03d      	b.n	8001f38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ebc:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0x46a>
 8001ec8:	e035      	b.n	8001f36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eca:	4b10      	ldr	r3, [pc, #64]	@ (8001f0c <HAL_RCC_OscConfig+0x4cc>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed0:	f7fe ffe4 	bl	8000e9c <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed8:	f7fe ffe0 	bl	8000e9c <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e026      	b.n	8001f38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eea:	4b06      	ldr	r3, [pc, #24]	@ (8001f04 <HAL_RCC_OscConfig+0x4c4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x498>
 8001ef6:	e01e      	b.n	8001f36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d107      	bne.n	8001f10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e019      	b.n	8001f38 <HAL_RCC_OscConfig+0x4f8>
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40007000 	.word	0x40007000
 8001f0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f10:	4b0b      	ldr	r3, [pc, #44]	@ (8001f40 <HAL_RCC_OscConfig+0x500>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d106      	bne.n	8001f32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d001      	beq.n	8001f36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000

08001f44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e0d0      	b.n	80020fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f58:	4b6a      	ldr	r3, [pc, #424]	@ (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d910      	bls.n	8001f88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f66:	4b67      	ldr	r3, [pc, #412]	@ (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 0207 	bic.w	r2, r3, #7
 8001f6e:	4965      	ldr	r1, [pc, #404]	@ (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f76:	4b63      	ldr	r3, [pc, #396]	@ (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d001      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e0b8      	b.n	80020fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d020      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d005      	beq.n	8001fac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fa0:	4b59      	ldr	r3, [pc, #356]	@ (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	4a58      	ldr	r2, [pc, #352]	@ (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001faa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fb8:	4b53      	ldr	r3, [pc, #332]	@ (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	4a52      	ldr	r2, [pc, #328]	@ (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001fc2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc4:	4b50      	ldr	r3, [pc, #320]	@ (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	494d      	ldr	r1, [pc, #308]	@ (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d040      	beq.n	8002064 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d107      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fea:	4b47      	ldr	r3, [pc, #284]	@ (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d115      	bne.n	8002022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e07f      	b.n	80020fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d107      	bne.n	8002012 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002002:	4b41      	ldr	r3, [pc, #260]	@ (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d109      	bne.n	8002022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e073      	b.n	80020fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002012:	4b3d      	ldr	r3, [pc, #244]	@ (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e06b      	b.n	80020fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002022:	4b39      	ldr	r3, [pc, #228]	@ (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f023 0203 	bic.w	r2, r3, #3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	4936      	ldr	r1, [pc, #216]	@ (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8002030:	4313      	orrs	r3, r2
 8002032:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002034:	f7fe ff32 	bl	8000e9c <HAL_GetTick>
 8002038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203a:	e00a      	b.n	8002052 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800203c:	f7fe ff2e 	bl	8000e9c <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e053      	b.n	80020fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002052:	4b2d      	ldr	r3, [pc, #180]	@ (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 020c 	and.w	r2, r3, #12
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	429a      	cmp	r2, r3
 8002062:	d1eb      	bne.n	800203c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002064:	4b27      	ldr	r3, [pc, #156]	@ (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d210      	bcs.n	8002094 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002072:	4b24      	ldr	r3, [pc, #144]	@ (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 0207 	bic.w	r2, r3, #7
 800207a:	4922      	ldr	r1, [pc, #136]	@ (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	4313      	orrs	r3, r2
 8002080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	4b20      	ldr	r3, [pc, #128]	@ (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d001      	beq.n	8002094 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e032      	b.n	80020fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d008      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a0:	4b19      	ldr	r3, [pc, #100]	@ (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4916      	ldr	r1, [pc, #88]	@ (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d009      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020be:	4b12      	ldr	r3, [pc, #72]	@ (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	490e      	ldr	r1, [pc, #56]	@ (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020d2:	f000 f821 	bl	8002118 <HAL_RCC_GetSysClockFreq>
 80020d6:	4602      	mov	r2, r0
 80020d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	091b      	lsrs	r3, r3, #4
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	490a      	ldr	r1, [pc, #40]	@ (800210c <HAL_RCC_ClockConfig+0x1c8>)
 80020e4:	5ccb      	ldrb	r3, [r1, r3]
 80020e6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ea:	4a09      	ldr	r2, [pc, #36]	@ (8002110 <HAL_RCC_ClockConfig+0x1cc>)
 80020ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020ee:	4b09      	ldr	r3, [pc, #36]	@ (8002114 <HAL_RCC_ClockConfig+0x1d0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe fe90 	bl	8000e18 <HAL_InitTick>

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40022000 	.word	0x40022000
 8002108:	40021000 	.word	0x40021000
 800210c:	080028a8 	.word	0x080028a8
 8002110:	20000010 	.word	0x20000010
 8002114:	20000014 	.word	0x20000014

08002118 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002118:	b480      	push	{r7}
 800211a:	b087      	sub	sp, #28
 800211c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	2300      	movs	r3, #0
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	2300      	movs	r3, #0
 800212c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002132:	4b1e      	ldr	r3, [pc, #120]	@ (80021ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	2b04      	cmp	r3, #4
 8002140:	d002      	beq.n	8002148 <HAL_RCC_GetSysClockFreq+0x30>
 8002142:	2b08      	cmp	r3, #8
 8002144:	d003      	beq.n	800214e <HAL_RCC_GetSysClockFreq+0x36>
 8002146:	e027      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002148:	4b19      	ldr	r3, [pc, #100]	@ (80021b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800214a:	613b      	str	r3, [r7, #16]
      break;
 800214c:	e027      	b.n	800219e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	0c9b      	lsrs	r3, r3, #18
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	4a17      	ldr	r2, [pc, #92]	@ (80021b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002158:	5cd3      	ldrb	r3, [r2, r3]
 800215a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d010      	beq.n	8002188 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002166:	4b11      	ldr	r3, [pc, #68]	@ (80021ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	0c5b      	lsrs	r3, r3, #17
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	4a11      	ldr	r2, [pc, #68]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002172:	5cd3      	ldrb	r3, [r2, r3]
 8002174:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a0d      	ldr	r2, [pc, #52]	@ (80021b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800217a:	fb03 f202 	mul.w	r2, r3, r2
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	fbb2 f3f3 	udiv	r3, r2, r3
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	e004      	b.n	8002192 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a0c      	ldr	r2, [pc, #48]	@ (80021bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800218c:	fb02 f303 	mul.w	r3, r2, r3
 8002190:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	613b      	str	r3, [r7, #16]
      break;
 8002196:	e002      	b.n	800219e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002198:	4b05      	ldr	r3, [pc, #20]	@ (80021b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800219a:	613b      	str	r3, [r7, #16]
      break;
 800219c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800219e:	693b      	ldr	r3, [r7, #16]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	371c      	adds	r7, #28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000
 80021b0:	007a1200 	.word	0x007a1200
 80021b4:	080028c0 	.word	0x080028c0
 80021b8:	080028d0 	.word	0x080028d0
 80021bc:	003d0900 	.word	0x003d0900

080021c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021c4:	4b02      	ldr	r3, [pc, #8]	@ (80021d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80021c6:	681b      	ldr	r3, [r3, #0]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr
 80021d0:	20000010 	.word	0x20000010

080021d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021d8:	f7ff fff2 	bl	80021c0 <HAL_RCC_GetHCLKFreq>
 80021dc:	4602      	mov	r2, r0
 80021de:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	4903      	ldr	r1, [pc, #12]	@ (80021f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ea:	5ccb      	ldrb	r3, [r1, r3]
 80021ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40021000 	.word	0x40021000
 80021f8:	080028b8 	.word	0x080028b8

080021fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002200:	f7ff ffde 	bl	80021c0 <HAL_RCC_GetHCLKFreq>
 8002204:	4602      	mov	r2, r0
 8002206:	4b05      	ldr	r3, [pc, #20]	@ (800221c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	0adb      	lsrs	r3, r3, #11
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	4903      	ldr	r1, [pc, #12]	@ (8002220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002212:	5ccb      	ldrb	r3, [r1, r3]
 8002214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002218:	4618      	mov	r0, r3
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40021000 	.word	0x40021000
 8002220:	080028b8 	.word	0x080028b8

08002224 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800222c:	4b0a      	ldr	r3, [pc, #40]	@ (8002258 <RCC_Delay+0x34>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a0a      	ldr	r2, [pc, #40]	@ (800225c <RCC_Delay+0x38>)
 8002232:	fba2 2303 	umull	r2, r3, r2, r3
 8002236:	0a5b      	lsrs	r3, r3, #9
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	fb02 f303 	mul.w	r3, r2, r3
 800223e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002240:	bf00      	nop
  }
  while (Delay --);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1e5a      	subs	r2, r3, #1
 8002246:	60fa      	str	r2, [r7, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1f9      	bne.n	8002240 <RCC_Delay+0x1c>
}
 800224c:	bf00      	nop
 800224e:	bf00      	nop
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr
 8002258:	20000010 	.word	0x20000010
 800225c:	10624dd3 	.word	0x10624dd3

08002260 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e042      	b.n	80022f8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d106      	bne.n	800228c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7fe fd4c 	bl	8000d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2224      	movs	r2, #36	@ 0x24
 8002290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f82b 	bl	8002300 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695a      	ldr	r2, [r3, #20]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2220      	movs	r2, #32
 80022e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2220      	movs	r2, #32
 80022ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	4313      	orrs	r3, r2
 800232e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800233a:	f023 030c 	bic.w	r3, r3, #12
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6812      	ldr	r2, [r2, #0]
 8002342:	68b9      	ldr	r1, [r7, #8]
 8002344:	430b      	orrs	r3, r1
 8002346:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699a      	ldr	r2, [r3, #24]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a2c      	ldr	r2, [pc, #176]	@ (8002414 <UART_SetConfig+0x114>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d103      	bne.n	8002370 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002368:	f7ff ff48 	bl	80021fc <HAL_RCC_GetPCLK2Freq>
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	e002      	b.n	8002376 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002370:	f7ff ff30 	bl	80021d4 <HAL_RCC_GetPCLK1Freq>
 8002374:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	009a      	lsls	r2, r3, #2
 8002380:	441a      	add	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	fbb2 f3f3 	udiv	r3, r2, r3
 800238c:	4a22      	ldr	r2, [pc, #136]	@ (8002418 <UART_SetConfig+0x118>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	0119      	lsls	r1, r3, #4
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	009a      	lsls	r2, r3, #2
 80023a0:	441a      	add	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80023ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002418 <UART_SetConfig+0x118>)
 80023ae:	fba3 0302 	umull	r0, r3, r3, r2
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	2064      	movs	r0, #100	@ 0x64
 80023b6:	fb00 f303 	mul.w	r3, r0, r3
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	3332      	adds	r3, #50	@ 0x32
 80023c0:	4a15      	ldr	r2, [pc, #84]	@ (8002418 <UART_SetConfig+0x118>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023cc:	4419      	add	r1, r3
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	009a      	lsls	r2, r3, #2
 80023d8:	441a      	add	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80023e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002418 <UART_SetConfig+0x118>)
 80023e6:	fba3 0302 	umull	r0, r3, r3, r2
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	2064      	movs	r0, #100	@ 0x64
 80023ee:	fb00 f303 	mul.w	r3, r0, r3
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	011b      	lsls	r3, r3, #4
 80023f6:	3332      	adds	r3, #50	@ 0x32
 80023f8:	4a07      	ldr	r2, [pc, #28]	@ (8002418 <UART_SetConfig+0x118>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	f003 020f 	and.w	r2, r3, #15
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	440a      	add	r2, r1
 800240a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800240c:	bf00      	nop
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40013800 	.word	0x40013800
 8002418:	51eb851f 	.word	0x51eb851f

0800241c <memset>:
 800241c:	4603      	mov	r3, r0
 800241e:	4402      	add	r2, r0
 8002420:	4293      	cmp	r3, r2
 8002422:	d100      	bne.n	8002426 <memset+0xa>
 8002424:	4770      	bx	lr
 8002426:	f803 1b01 	strb.w	r1, [r3], #1
 800242a:	e7f9      	b.n	8002420 <memset+0x4>

0800242c <__libc_init_array>:
 800242c:	b570      	push	{r4, r5, r6, lr}
 800242e:	2600      	movs	r6, #0
 8002430:	4d0c      	ldr	r5, [pc, #48]	@ (8002464 <__libc_init_array+0x38>)
 8002432:	4c0d      	ldr	r4, [pc, #52]	@ (8002468 <__libc_init_array+0x3c>)
 8002434:	1b64      	subs	r4, r4, r5
 8002436:	10a4      	asrs	r4, r4, #2
 8002438:	42a6      	cmp	r6, r4
 800243a:	d109      	bne.n	8002450 <__libc_init_array+0x24>
 800243c:	f000 f828 	bl	8002490 <_init>
 8002440:	2600      	movs	r6, #0
 8002442:	4d0a      	ldr	r5, [pc, #40]	@ (800246c <__libc_init_array+0x40>)
 8002444:	4c0a      	ldr	r4, [pc, #40]	@ (8002470 <__libc_init_array+0x44>)
 8002446:	1b64      	subs	r4, r4, r5
 8002448:	10a4      	asrs	r4, r4, #2
 800244a:	42a6      	cmp	r6, r4
 800244c:	d105      	bne.n	800245a <__libc_init_array+0x2e>
 800244e:	bd70      	pop	{r4, r5, r6, pc}
 8002450:	f855 3b04 	ldr.w	r3, [r5], #4
 8002454:	4798      	blx	r3
 8002456:	3601      	adds	r6, #1
 8002458:	e7ee      	b.n	8002438 <__libc_init_array+0xc>
 800245a:	f855 3b04 	ldr.w	r3, [r5], #4
 800245e:	4798      	blx	r3
 8002460:	3601      	adds	r6, #1
 8002462:	e7f2      	b.n	800244a <__libc_init_array+0x1e>
 8002464:	080028d4 	.word	0x080028d4
 8002468:	080028d4 	.word	0x080028d4
 800246c:	080028d4 	.word	0x080028d4
 8002470:	080028d8 	.word	0x080028d8

08002474 <memcpy>:
 8002474:	440a      	add	r2, r1
 8002476:	4291      	cmp	r1, r2
 8002478:	f100 33ff 	add.w	r3, r0, #4294967295
 800247c:	d100      	bne.n	8002480 <memcpy+0xc>
 800247e:	4770      	bx	lr
 8002480:	b510      	push	{r4, lr}
 8002482:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002486:	4291      	cmp	r1, r2
 8002488:	f803 4f01 	strb.w	r4, [r3, #1]!
 800248c:	d1f9      	bne.n	8002482 <memcpy+0xe>
 800248e:	bd10      	pop	{r4, pc}

08002490 <_init>:
 8002490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002492:	bf00      	nop
 8002494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002496:	bc08      	pop	{r3}
 8002498:	469e      	mov	lr, r3
 800249a:	4770      	bx	lr

0800249c <_fini>:
 800249c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800249e:	bf00      	nop
 80024a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024a2:	bc08      	pop	{r3}
 80024a4:	469e      	mov	lr, r3
 80024a6:	4770      	bx	lr
