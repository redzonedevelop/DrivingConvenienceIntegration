
PART_A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08008400  08008400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003148  0800850c  0800850c  0000050c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800b654  0800b654  00003654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba80  0800ba80  0000401c  2**0
                  CONTENTS
  4 .ARM          00000000  0800ba80  0800ba80  0000401c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ba80  0800ba80  0000401c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba80  0800ba80  00003a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ba84  0800ba84  00003a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  0800ba88  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f68  20000020  0800baa4  00004020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001f88  0800baa4  00004f88  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000401c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000165dc  00000000  00000000  00004045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c4a  00000000  00000000  0001a621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00008506  00000000  00000000  0001e26b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc8  00000000  00000000  00026778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001081  00000000  00000000  00027740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019cb0  00000000  00000000  000287c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b2a8  00000000  00000000  00042471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008db91  00000000  00000000  0005d719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000eb2aa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027c0  00000000  00000000  000eb2f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  000edab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800850c <__do_global_dtors_aux>:
 800850c:	b510      	push	{r4, lr}
 800850e:	4c05      	ldr	r4, [pc, #20]	@ (8008524 <__do_global_dtors_aux+0x18>)
 8008510:	7823      	ldrb	r3, [r4, #0]
 8008512:	b933      	cbnz	r3, 8008522 <__do_global_dtors_aux+0x16>
 8008514:	4b04      	ldr	r3, [pc, #16]	@ (8008528 <__do_global_dtors_aux+0x1c>)
 8008516:	b113      	cbz	r3, 800851e <__do_global_dtors_aux+0x12>
 8008518:	4804      	ldr	r0, [pc, #16]	@ (800852c <__do_global_dtors_aux+0x20>)
 800851a:	f3af 8000 	nop.w
 800851e:	2301      	movs	r3, #1
 8008520:	7023      	strb	r3, [r4, #0]
 8008522:	bd10      	pop	{r4, pc}
 8008524:	20000020 	.word	0x20000020
 8008528:	00000000 	.word	0x00000000
 800852c:	0800b63c 	.word	0x0800b63c

08008530 <frame_dummy>:
 8008530:	b508      	push	{r3, lr}
 8008532:	4b03      	ldr	r3, [pc, #12]	@ (8008540 <frame_dummy+0x10>)
 8008534:	b11b      	cbz	r3, 800853e <frame_dummy+0xe>
 8008536:	4903      	ldr	r1, [pc, #12]	@ (8008544 <frame_dummy+0x14>)
 8008538:	4803      	ldr	r0, [pc, #12]	@ (8008548 <frame_dummy+0x18>)
 800853a:	f3af 8000 	nop.w
 800853e:	bd08      	pop	{r3, pc}
 8008540:	00000000 	.word	0x00000000
 8008544:	20000024 	.word	0x20000024
 8008548:	0800b63c 	.word	0x0800b63c

0800854c <MX_CAN_Init>:
  /* USER CODE BEGIN CAN_Init 0 */

  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  __HAL_RCC_CAN1_CLK_ENABLE();
 800854c:	4b10      	ldr	r3, [pc, #64]	@ (8008590 <MX_CAN_Init+0x44>)
{
 800854e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_CAN1_CLK_ENABLE();
 8008550:	69da      	ldr	r2, [r3, #28]
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008552:	4810      	ldr	r0, [pc, #64]	@ (8008594 <MX_CAN_Init+0x48>)
  __HAL_RCC_CAN1_CLK_ENABLE();
 8008554:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8008558:	61da      	str	r2, [r3, #28]
 800855a:	69db      	ldr	r3, [r3, #28]
  hcan.Init.Prescaler = 16;
 800855c:	4a0e      	ldr	r2, [pc, #56]	@ (8008598 <MX_CAN_Init+0x4c>)
  __HAL_RCC_CAN1_CLK_ENABLE();
 800855e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008562:	9301      	str	r3, [sp, #4]
 8008564:	9b01      	ldr	r3, [sp, #4]
  hcan.Init.Prescaler = 16;
 8008566:	2310      	movs	r3, #16
 8008568:	e9c0 2300 	strd	r2, r3, [r0]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800856c:	2300      	movs	r3, #0
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800856e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008572:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008576:	6183      	str	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008578:	8383      	strh	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800857a:	f001 fb5f 	bl	8009c3c <HAL_CAN_Init>
 800857e:	b120      	cbz	r0, 800858a <MX_CAN_Init+0x3e>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8008580:	b003      	add	sp, #12
 8008582:	f85d eb04 	ldr.w	lr, [sp], #4
    Error_Handler();
 8008586:	f000 bd15 	b.w	8008fb4 <Error_Handler>
}
 800858a:	b003      	add	sp, #12
 800858c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008590:	40021000 	.word	0x40021000
 8008594:	2000003c 	.word	0x2000003c
 8008598:	40006400 	.word	0x40006400

0800859c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800859c:	b510      	push	{r4, lr}
 800859e:	4604      	mov	r4, r0
 80085a0:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085a2:	2210      	movs	r2, #16
 80085a4:	2100      	movs	r1, #0
 80085a6:	a802      	add	r0, sp, #8
 80085a8:	f003 f80d 	bl	800b5c6 <memset>
  if(canHandle->Instance==CAN1)
 80085ac:	6822      	ldr	r2, [r4, #0]
 80085ae:	4b19      	ldr	r3, [pc, #100]	@ (8008614 <HAL_CAN_MspInit+0x78>)
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d12d      	bne.n	8008610 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80085b4:	f503 33d6 	add.w	r3, r3, #109568	@ 0x1ac00
 80085b8:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085ba:	4817      	ldr	r0, [pc, #92]	@ (8008618 <HAL_CAN_MspInit+0x7c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 80085bc:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80085c0:	61da      	str	r2, [r3, #28]
 80085c2:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085c4:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 80085c6:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 80085ca:	9200      	str	r2, [sp, #0]
 80085cc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085ce:	699a      	ldr	r2, [r3, #24]
 80085d0:	f042 0204 	orr.w	r2, r2, #4
 80085d4:	619a      	str	r2, [r3, #24]
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	f003 0304 	and.w	r3, r3, #4
 80085dc:	9301      	str	r3, [sp, #4]
 80085de:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80085e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80085e4:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085e6:	f002 f8c3 	bl	800a770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085ea:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80085ee:	2302      	movs	r3, #2
 80085f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80085f4:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085f6:	4808      	ldr	r0, [pc, #32]	@ (8008618 <HAL_CAN_MspInit+0x7c>)
 80085f8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80085fa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085fc:	f002 f8b8 	bl	800a770 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008600:	2200      	movs	r2, #0
 8008602:	2014      	movs	r0, #20
 8008604:	4611      	mov	r1, r2
 8008606:	f001 fe39 	bl	800a27c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800860a:	2014      	movs	r0, #20
 800860c:	f001 fe66 	bl	800a2dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8008610:	b006      	add	sp, #24
 8008612:	bd10      	pop	{r4, pc}
 8008614:	40006400 	.word	0x40006400
 8008618:	40010800 	.word	0x40010800

0800861c <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800861c:	4b12      	ldr	r3, [pc, #72]	@ (8008668 <MX_DMA_Init+0x4c>)
{
 800861e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008620:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8008622:	200d      	movs	r0, #13
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008624:	f042 0201 	orr.w	r2, r2, #1
 8008628:	615a      	str	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800862a:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800862c:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800862e:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008630:	f003 0301 	and.w	r3, r3, #1
 8008634:	9301      	str	r3, [sp, #4]
 8008636:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8008638:	f001 fe20 	bl	800a27c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800863c:	200d      	movs	r0, #13
 800863e:	f001 fe4d 	bl	800a2dc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8008642:	2200      	movs	r2, #0
 8008644:	2010      	movs	r0, #16
 8008646:	4611      	mov	r1, r2
 8008648:	f001 fe18 	bl	800a27c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800864c:	2010      	movs	r0, #16
 800864e:	f001 fe45 	bl	800a2dc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8008652:	2200      	movs	r2, #0
 8008654:	2011      	movs	r0, #17
 8008656:	4611      	mov	r1, r2
 8008658:	f001 fe10 	bl	800a27c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800865c:	2011      	movs	r0, #17

}
 800865e:	b003      	add	sp, #12
 8008660:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8008664:	f001 be3a 	b.w	800a2dc <HAL_NVIC_EnableIRQ>
 8008668:	40021000 	.word	0x40021000

0800866c <flashInit>:

static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);


bool flashInit(void)
{
 800866c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000


  for (int i=0; i<FLASH_SECTOR_MAX; i++)
  {
    flash_tbl[i].addr   = 0x8000000 + i*1024;
    flash_tbl[i].length = 1024;
 8008670:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8008674:	4a05      	ldr	r2, [pc, #20]	@ (800868c <flashInit+0x20>)
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8008676:	4906      	ldr	r1, [pc, #24]	@ (8008690 <flashInit+0x24>)
    flash_tbl[i].addr   = 0x8000000 + i*1024;
 8008678:	6013      	str	r3, [r2, #0]
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 800867a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800867e:	428b      	cmp	r3, r1
    flash_tbl[i].length = 1024;
 8008680:	8090      	strh	r0, [r2, #4]
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8008682:	f102 0208 	add.w	r2, r2, #8
 8008686:	d1f7      	bne.n	8008678 <flashInit+0xc>
  }

  return true;
}
 8008688:	2001      	movs	r0, #1
 800868a:	4770      	bx	lr
 800868c:	20000064 	.word	0x20000064
 8008690:	08020000 	.word	0x08020000

08008694 <flashErase>:
  int16_t  start_sector_num = -1;
  uint32_t sector_count = 0;



  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8008694:	2300      	movs	r3, #0
{
 8008696:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008698:	4a24      	ldr	r2, [pc, #144]	@ (800872c <flashErase+0x98>)
  int16_t  start_sector_num = -1;
 800869a:	f04f 36ff 	mov.w	r6, #4294967295
  uint32_t sector_count = 0;
 800869e:	461c      	mov	r4, r3
 80086a0:	4617      	mov	r7, r2


  sector_start = flash_tbl[sector_num].addr;
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
  flash_start  = addr;
  flash_end    = addr + length - 1;
 80086a2:	4431      	add	r1, r6
{
 80086a4:	b087      	sub	sp, #28
  flash_end    = addr + length - 1;
 80086a6:	4401      	add	r1, r0
  sector_start = flash_tbl[sector_num].addr;
 80086a8:	f8d2 c000 	ldr.w	ip, [r2]
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 80086ac:	f8b2 e004 	ldrh.w	lr, [r2, #4]
 80086b0:	f10c 35ff 	add.w	r5, ip, #4294967295


  if (sector_start >= flash_start && sector_start <= flash_end)
 80086b4:	4560      	cmp	r0, ip
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 80086b6:	4475      	add	r5, lr
  if (sector_start >= flash_start && sector_start <= flash_end)
 80086b8:	d834      	bhi.n	8008724 <flashErase+0x90>
 80086ba:	458c      	cmp	ip, r1
 80086bc:	bf8c      	ite	hi
 80086be:	f04f 0e00 	movhi.w	lr, #0
 80086c2:	f04f 0e01 	movls.w	lr, #1
  {
    ret = true;
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 80086c6:	42a8      	cmp	r0, r5
 80086c8:	d805      	bhi.n	80086d6 <flashErase+0x42>
  {
    ret = true;
 80086ca:	428d      	cmp	r5, r1
 80086cc:	bf98      	it	ls
 80086ce:	f04f 0e01 	movls.w	lr, #1
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 80086d2:	4560      	cmp	r0, ip
 80086d4:	d206      	bcs.n	80086e4 <flashErase+0x50>
  {
    ret = true;
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 80086d6:	458c      	cmp	ip, r1
 80086d8:	d801      	bhi.n	80086de <flashErase+0x4a>
 80086da:	428d      	cmp	r5, r1
 80086dc:	d202      	bcs.n	80086e4 <flashErase+0x50>
    if (flashInSector(i, addr, length) == true)
 80086de:	f1be 0f00 	cmp.w	lr, #0
 80086e2:	d003      	beq.n	80086ec <flashErase+0x58>
      if (start_sector_num < 0)
 80086e4:	1c75      	adds	r5, r6, #1
        start_sector_num = i;
 80086e6:	bf08      	it	eq
 80086e8:	b21e      	sxtheq	r6, r3
      sector_count++;
 80086ea:	3401      	adds	r4, #1
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 80086ec:	3301      	adds	r3, #1
 80086ee:	2b80      	cmp	r3, #128	@ 0x80
 80086f0:	f102 0208 	add.w	r2, r2, #8
 80086f4:	d1d8      	bne.n	80086a8 <flashErase+0x14>
  if (sector_count > 0)
 80086f6:	b194      	cbz	r4, 800871e <flashErase+0x8a>
    HAL_FLASH_Unlock();
 80086f8:	f001 ff3c 	bl	800a574 <HAL_FLASH_Unlock>
    init.Banks       = FLASH_BANK_1;
 80086fc:	2200      	movs	r2, #0
 80086fe:	2301      	movs	r3, #1
 8008700:	e9cd 2302 	strd	r2, r3, [sp, #8]
    init.PageAddress = flash_tbl[start_sector_num].addr;
 8008704:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
    status = HAL_FLASHEx_Erase(&init, &page_error);
 8008708:	a901      	add	r1, sp, #4
 800870a:	a802      	add	r0, sp, #8
    init.NbPages     = sector_count;
 800870c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    status = HAL_FLASHEx_Erase(&init, &page_error);
 8008710:	f001 ffda 	bl	800a6c8 <HAL_FLASHEx_Erase>
    if (status == HAL_OK)
 8008714:	fab0 f480 	clz	r4, r0
 8008718:	0964      	lsrs	r4, r4, #5
    HAL_FLASH_Lock();
 800871a:	f001 ff3d 	bl	800a598 <HAL_FLASH_Lock>
}
 800871e:	4620      	mov	r0, r4
 8008720:	b007      	add	sp, #28
 8008722:	bdf0      	pop	{r4, r5, r6, r7, pc}
  bool ret = false;
 8008724:	f04f 0e00 	mov.w	lr, #0
 8008728:	e7cd      	b.n	80086c6 <flashErase+0x32>
 800872a:	bf00      	nop
 800872c:	20000064 	.word	0x20000064

08008730 <flashWrite>:
{
 8008730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008732:	460c      	mov	r4, r1
 8008734:	4607      	mov	r7, r0
 8008736:	4616      	mov	r6, r2
  for (int i=0; i<length; i+=2)
 8008738:	2500      	movs	r5, #0
  HAL_FLASH_Unlock();
 800873a:	f001 ff1b 	bl	800a574 <HAL_FLASH_Unlock>
  for (int i=0; i<length; i+=2)
 800873e:	3401      	adds	r4, #1
 8008740:	42ae      	cmp	r6, r5
 8008742:	d804      	bhi.n	800874e <flashWrite+0x1e>
  bool ret = true;
 8008744:	2401      	movs	r4, #1
  HAL_FLASH_Lock();
 8008746:	f001 ff27 	bl	800a598 <HAL_FLASH_Lock>
}
 800874a:	4620      	mov	r0, r4
 800874c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (i + 1 < length)
 800874e:	1c6b      	adds	r3, r5, #1
 8008750:	429e      	cmp	r6, r3
			data |= p_data[i + 1] << 8;
 8008752:	bf88      	it	hi
 8008754:	7823      	ldrbhi	r3, [r4, #0]
    data  = p_data[i+0] << 0;
 8008756:	f814 2c01 	ldrb.w	r2, [r4, #-1]
    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + i, (uint64_t)data);
 800875a:	f04f 0001 	mov.w	r0, #1
			data |= p_data[i + 1] << 8;
 800875e:	bf88      	it	hi
 8008760:	ea42 2203 	orrhi.w	r2, r2, r3, lsl #8
    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + i, (uint64_t)data);
 8008764:	1979      	adds	r1, r7, r5
 8008766:	2300      	movs	r3, #0
 8008768:	f001 ff4a 	bl	800a600 <HAL_FLASH_Program>
    if (status != HAL_OK)
 800876c:	3402      	adds	r4, #2
 800876e:	b908      	cbnz	r0, 8008774 <flashWrite+0x44>
  for (int i=0; i<length; i+=2)
 8008770:	3502      	adds	r5, #2
 8008772:	e7e5      	b.n	8008740 <flashWrite+0x10>
      ret = false;
 8008774:	2400      	movs	r4, #0
 8008776:	e7e6      	b.n	8008746 <flashWrite+0x16>

08008778 <flashRead>:
{
 8008778:	b508      	push	{r3, lr}
 800877a:	460b      	mov	r3, r1
  memcpy(p_data, (void *)addr, length);
 800877c:	4601      	mov	r1, r0
 800877e:	4618      	mov	r0, r3
 8008780:	f002 ff4e 	bl	800b620 <memcpy>
}
 8008784:	2001      	movs	r0, #1
 8008786:	bd08      	pop	{r3, pc}

08008788 <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008788:	2210      	movs	r2, #16
{
 800878a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800878e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008790:	eb0d 0002 	add.w	r0, sp, r2
 8008794:	2100      	movs	r1, #0
 8008796:	f002 ff16 	bl	800b5c6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800879a:	4b36      	ldr	r3, [pc, #216]	@ (8008874 <MX_GPIO_Init+0xec>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800879c:	f8df 90d8 	ldr.w	r9, [pc, #216]	@ 8008878 <MX_GPIO_Init+0xf0>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80087a0:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FOG_GPIO_Port, FOG_Pin, GPIO_PIN_RESET);
 80087a2:	4f36      	ldr	r7, [pc, #216]	@ (800887c <MX_GPIO_Init+0xf4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80087a4:	f042 0210 	orr.w	r2, r2, #16
 80087a8:	619a      	str	r2, [r3, #24]
 80087aa:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80087ac:	4648      	mov	r0, r9
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80087ae:	f002 0210 	and.w	r2, r2, #16
 80087b2:	9200      	str	r2, [sp, #0]
 80087b4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80087b6:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCORNER_Pin|RCORNER_Pin, GPIO_PIN_RESET);
 80087b8:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8008880 <MX_GPIO_Init+0xf8>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80087bc:	f042 0220 	orr.w	r2, r2, #32
 80087c0:	619a      	str	r2, [r3, #24]
 80087c2:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80087c4:	2120      	movs	r1, #32
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80087c6:	f002 0220 	and.w	r2, r2, #32
 80087ca:	9201      	str	r2, [sp, #4]
 80087cc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80087ce:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087d0:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80087d2:	f042 0204 	orr.w	r2, r2, #4
 80087d6:	619a      	str	r2, [r3, #24]
 80087d8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80087da:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80087dc:	f002 0204 	and.w	r2, r2, #4
 80087e0:	9202      	str	r2, [sp, #8]
 80087e2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80087e4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087e6:	2502      	movs	r5, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80087e8:	f042 0208 	orr.w	r2, r2, #8
 80087ec:	619a      	str	r2, [r3, #24]
 80087ee:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80087f0:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80087f2:	f003 0308 	and.w	r3, r3, #8
 80087f6:	9303      	str	r3, [sp, #12]
 80087f8:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80087fa:	f002 f891 	bl	800a920 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FOG_GPIO_Port, FOG_Pin, GPIO_PIN_RESET);
 80087fe:	4638      	mov	r0, r7
 8008800:	2200      	movs	r2, #0
 8008802:	2180      	movs	r1, #128	@ 0x80
 8008804:	f002 f88c 	bl	800a920 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LCORNER_Pin|RCORNER_Pin, GPIO_PIN_RESET);
 8008808:	4640      	mov	r0, r8
 800880a:	2200      	movs	r2, #0
 800880c:	2130      	movs	r1, #48	@ 0x30
 800880e:	f002 f887 	bl	800a920 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008812:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008816:	4b1b      	ldr	r3, [pc, #108]	@ (8008884 <MX_GPIO_Init+0xfc>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8008818:	4638      	mov	r0, r7
 800881a:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800881c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008820:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8008822:	f001 ffa5 	bl	800a770 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008826:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8008828:	4648      	mov	r0, r9
 800882a:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800882c:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008830:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008832:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8008834:	f001 ff9c 	bl	800a770 <HAL_GPIO_Init>

  /*Configure GPIO pin : FOG_Pin */
  GPIO_InitStruct.Pin = FOG_Pin;
 8008838:	2380      	movs	r3, #128	@ 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(FOG_GPIO_Port, &GPIO_InitStruct);
 800883a:	4638      	mov	r0, r7
 800883c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800883e:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008842:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(FOG_GPIO_Port, &GPIO_InitStruct);
 8008846:	f001 ff93 	bl	800a770 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCORNER_Pin RCORNER_Pin */
  GPIO_InitStruct.Pin = LCORNER_Pin|RCORNER_Pin;
 800884a:	2330      	movs	r3, #48	@ 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800884c:	4640      	mov	r0, r8
 800884e:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008850:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008854:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008858:	f001 ff8a 	bl	800a770 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800885c:	4622      	mov	r2, r4
 800885e:	4621      	mov	r1, r4
 8008860:	2028      	movs	r0, #40	@ 0x28
 8008862:	f001 fd0b 	bl	800a27c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008866:	2028      	movs	r0, #40	@ 0x28
 8008868:	f001 fd38 	bl	800a2dc <HAL_NVIC_EnableIRQ>

}
 800886c:	b009      	add	sp, #36	@ 0x24
 800886e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008872:	bf00      	nop
 8008874:	40021000 	.word	0x40021000
 8008878:	40010800 	.word	0x40010800
 800887c:	40011000 	.word	0x40011000
 8008880:	40010c00 	.word	0x40010c00
 8008884:	10110000 	.word	0x10110000

08008888 <ws2812_set_lowbeam_colors>:
uint8_t change_flag;


void ws2812_set_lowbeam_colors(uint8_t (*lcolors)[3],uint8_t (*rcolors)[3])  // colors[i][0]=R, [1]=G, [2]=B

{
 8008888:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800888c:	460c      	mov	r4, r1
 800888e:	4606      	mov	r6, r0
    uint32_t i = 0;
 8008890:	2500      	movs	r5, #0
    {
        uint8_t g = lcolors[led][1];
        uint8_t r = lcolors[led][0];
        uint8_t b = lcolors[led][2];

        for (; i <  80; i++) ws2812_lbuffer[i] = 0;
 8008892:	4f50      	ldr	r7, [pc, #320]	@ (80089d4 <ws2812_set_lowbeam_colors+0x14c>)
 8008894:	f100 0818 	add.w	r8, r0, #24
 8008898:	f1c5 0350 	rsb	r3, r5, #80	@ 0x50
 800889c:	2d50      	cmp	r5, #80	@ 0x50
 800889e:	ea4f 0243 	mov.w	r2, r3, lsl #1
 80088a2:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 80088a6:	bf88      	it	hi
 80088a8:	2200      	movhi	r2, #0
 80088aa:	2100      	movs	r1, #0
 80088ac:	9301      	str	r3, [sp, #4]
        uint8_t g = lcolors[led][1];
 80088ae:	f896 b001 	ldrb.w	fp, [r6, #1]
        uint8_t r = lcolors[led][0];
 80088b2:	f896 a000 	ldrb.w	sl, [r6]
        uint8_t b = lcolors[led][2];
 80088b6:	f896 9002 	ldrb.w	r9, [r6, #2]
        for (; i <  80; i++) ws2812_lbuffer[i] = 0;
 80088ba:	f002 fe84 	bl	800b5c6 <memset>
 80088be:	2d50      	cmp	r5, #80	@ 0x50
 80088c0:	9b01      	ldr	r3, [sp, #4]
 80088c2:	bf88      	it	hi
 80088c4:	2300      	movhi	r3, #0
 80088c6:	441d      	add	r5, r3
 80088c8:	2307      	movs	r3, #7
 80088ca:	eb07 0245 	add.w	r2, r7, r5, lsl #1
        for (int8_t bit = 7; bit >= 0; bit--) ws2812_lbuffer[i++] = (g >> bit) & 1 ? WS2812_HIGH : WS2812_LOW;
 80088ce:	fa4b f103 	asr.w	r1, fp, r3
 80088d2:	f011 0f01 	tst.w	r1, #1
 80088d6:	bf0c      	ite	eq
 80088d8:	2119      	moveq	r1, #25
 80088da:	212c      	movne	r1, #44	@ 0x2c
 80088dc:	3b01      	subs	r3, #1
 80088de:	f822 1b02 	strh.w	r1, [r2], #2
 80088e2:	d2f4      	bcs.n	80088ce <ws2812_set_lowbeam_colors+0x46>
 80088e4:	2107      	movs	r1, #7
 80088e6:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 80088ea:	3307      	adds	r3, #7
 80088ec:	005a      	lsls	r2, r3, #1
 80088ee:	eb07 0343 	add.w	r3, r7, r3, lsl #1
        for (int8_t bit = 7; bit >= 0; bit--) ws2812_lbuffer[i++] = (r >> bit) & 1 ? WS2812_HIGH : WS2812_LOW;
 80088f2:	fa4a f001 	asr.w	r0, sl, r1
 80088f6:	f010 0f01 	tst.w	r0, #1
 80088fa:	bf0c      	ite	eq
 80088fc:	2019      	moveq	r0, #25
 80088fe:	202c      	movne	r0, #44	@ 0x2c
 8008900:	3901      	subs	r1, #1
 8008902:	f823 0f02 	strh.w	r0, [r3, #2]!
 8008906:	d2f4      	bcs.n	80088f2 <ws2812_set_lowbeam_colors+0x6a>
 8008908:	f102 0310 	add.w	r3, r2, #16
 800890c:	2207      	movs	r2, #7
 800890e:	443b      	add	r3, r7
        for (int8_t bit = 7; bit >= 0; bit--) ws2812_lbuffer[i++] = (b >> bit) & 1 ? WS2812_HIGH : WS2812_LOW;
 8008910:	fa49 f102 	asr.w	r1, r9, r2
 8008914:	f011 0f01 	tst.w	r1, #1
 8008918:	bf0c      	ite	eq
 800891a:	2119      	moveq	r1, #25
 800891c:	212c      	movne	r1, #44	@ 0x2c
 800891e:	3a01      	subs	r2, #1
 8008920:	f823 1f02 	strh.w	r1, [r3, #2]!
 8008924:	d2f4      	bcs.n	8008910 <ws2812_set_lowbeam_colors+0x88>
    for (int led = 0; led < LED_NUM; led++)
 8008926:	3603      	adds	r6, #3
 8008928:	4546      	cmp	r6, r8
        for (int8_t bit = 7; bit >= 0; bit--) ws2812_lbuffer[i++] = (b >> bit) & 1 ? WS2812_HIGH : WS2812_LOW;
 800892a:	f105 0518 	add.w	r5, r5, #24
    for (int led = 0; led < LED_NUM; led++)
 800892e:	d1b3      	bne.n	8008898 <ws2812_set_lowbeam_colors+0x10>
    }

    i = 0;
 8008930:	2500      	movs	r5, #0
	{
		uint8_t g = rcolors[led][1];
		uint8_t r = rcolors[led][0];
		uint8_t b = rcolors[led][2];

		for (; i < 80; i++) ws2812_rbuffer[i] = 0;
 8008932:	4e29      	ldr	r6, [pc, #164]	@ (80089d8 <ws2812_set_lowbeam_colors+0x150>)
 8008934:	f104 0718 	add.w	r7, r4, #24
 8008938:	2d50      	cmp	r5, #80	@ 0x50
 800893a:	f1c5 0b50 	rsb	fp, r5, #80	@ 0x50
 800893e:	ea4f 024b 	mov.w	r2, fp, lsl #1
 8008942:	eb06 0045 	add.w	r0, r6, r5, lsl #1
 8008946:	bf88      	it	hi
 8008948:	2200      	movhi	r2, #0
 800894a:	2100      	movs	r1, #0
		uint8_t g = rcolors[led][1];
 800894c:	f894 a001 	ldrb.w	sl, [r4, #1]
		uint8_t r = rcolors[led][0];
 8008950:	f894 9000 	ldrb.w	r9, [r4]
		uint8_t b = rcolors[led][2];
 8008954:	f894 8002 	ldrb.w	r8, [r4, #2]
		for (; i < 80; i++) ws2812_rbuffer[i] = 0;
 8008958:	f002 fe35 	bl	800b5c6 <memset>
 800895c:	2d50      	cmp	r5, #80	@ 0x50
 800895e:	bf88      	it	hi
 8008960:	f04f 0b00 	movhi.w	fp, #0
 8008964:	2307      	movs	r3, #7
 8008966:	445d      	add	r5, fp
 8008968:	eb06 0245 	add.w	r2, r6, r5, lsl #1
		for (int8_t bit = 7; bit >= 0; bit--) ws2812_rbuffer[i++] = (g >> bit) & 1 ? WS2812_HIGH : WS2812_LOW;
 800896c:	fa4a f103 	asr.w	r1, sl, r3
 8008970:	f011 0f01 	tst.w	r1, #1
 8008974:	bf0c      	ite	eq
 8008976:	2119      	moveq	r1, #25
 8008978:	212c      	movne	r1, #44	@ 0x2c
 800897a:	3b01      	subs	r3, #1
 800897c:	f822 1b02 	strh.w	r1, [r2], #2
 8008980:	d2f4      	bcs.n	800896c <ws2812_set_lowbeam_colors+0xe4>
 8008982:	2107      	movs	r1, #7
 8008984:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8008988:	3307      	adds	r3, #7
 800898a:	005a      	lsls	r2, r3, #1
 800898c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
		for (int8_t bit = 7; bit >= 0; bit--) ws2812_rbuffer[i++] = (r >> bit) & 1 ? WS2812_HIGH : WS2812_LOW;
 8008990:	fa49 f001 	asr.w	r0, r9, r1
 8008994:	f010 0f01 	tst.w	r0, #1
 8008998:	bf0c      	ite	eq
 800899a:	2019      	moveq	r0, #25
 800899c:	202c      	movne	r0, #44	@ 0x2c
 800899e:	3901      	subs	r1, #1
 80089a0:	f823 0f02 	strh.w	r0, [r3, #2]!
 80089a4:	d2f4      	bcs.n	8008990 <ws2812_set_lowbeam_colors+0x108>
 80089a6:	f102 0310 	add.w	r3, r2, #16
 80089aa:	2207      	movs	r2, #7
 80089ac:	4433      	add	r3, r6
		for (int8_t bit = 7; bit >= 0; bit--) ws2812_rbuffer[i++] = (b >> bit) & 1 ? WS2812_HIGH : WS2812_LOW;
 80089ae:	fa48 f102 	asr.w	r1, r8, r2
 80089b2:	f011 0f01 	tst.w	r1, #1
 80089b6:	bf0c      	ite	eq
 80089b8:	2119      	moveq	r1, #25
 80089ba:	212c      	movne	r1, #44	@ 0x2c
 80089bc:	3a01      	subs	r2, #1
 80089be:	f823 1f02 	strh.w	r1, [r3, #2]!
 80089c2:	d2f4      	bcs.n	80089ae <ws2812_set_lowbeam_colors+0x126>
	for (int led = 0; led < LED_NUM; led++)
 80089c4:	3403      	adds	r4, #3
 80089c6:	42a7      	cmp	r7, r4
		for (int8_t bit = 7; bit >= 0; bit--) ws2812_rbuffer[i++] = (b >> bit) & 1 ? WS2812_HIGH : WS2812_LOW;
 80089c8:	f105 0518 	add.w	r5, r5, #24
	for (int led = 0; led < LED_NUM; led++)
 80089cc:	d1b4      	bne.n	8008938 <ws2812_set_lowbeam_colors+0xb0>

	}
}
 80089ce:	b003      	add	sp, #12
 80089d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d4:	200008fa 	.word	0x200008fa
 80089d8:	200006da 	.word	0x200006da

080089dc <ws2812_set_highbeam_colors>:
void ws2812_set_highbeam_colors(uint8_t (*hcolors)[3])  // colors[i][0]=R, [1]=G, [2]=B

{
 80089dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e0:	4605      	mov	r5, r0
    uint32_t i = 0;
 80089e2:	2400      	movs	r4, #0
    {
        uint8_t g = hcolors[led][1];
        uint8_t r = hcolors[led][0];
        uint8_t b = hcolors[led][2];

        for (; i <  80; i++) ws2812_hbuffer[i] = 0;
 80089e4:	4e27      	ldr	r6, [pc, #156]	@ (8008a84 <ws2812_set_highbeam_colors+0xa8>)
 80089e6:	f100 0718 	add.w	r7, r0, #24
 80089ea:	2c50      	cmp	r4, #80	@ 0x50
 80089ec:	f1c4 0b50 	rsb	fp, r4, #80	@ 0x50
 80089f0:	ea4f 024b 	mov.w	r2, fp, lsl #1
 80089f4:	eb06 0044 	add.w	r0, r6, r4, lsl #1
 80089f8:	bf88      	it	hi
 80089fa:	2200      	movhi	r2, #0
 80089fc:	2100      	movs	r1, #0
        uint8_t g = hcolors[led][1];
 80089fe:	f895 a001 	ldrb.w	sl, [r5, #1]
        uint8_t r = hcolors[led][0];
 8008a02:	f895 9000 	ldrb.w	r9, [r5]
        uint8_t b = hcolors[led][2];
 8008a06:	f895 8002 	ldrb.w	r8, [r5, #2]
        for (; i <  80; i++) ws2812_hbuffer[i] = 0;
 8008a0a:	f002 fddc 	bl	800b5c6 <memset>
 8008a0e:	2c50      	cmp	r4, #80	@ 0x50
 8008a10:	bf88      	it	hi
 8008a12:	f04f 0b00 	movhi.w	fp, #0
 8008a16:	2307      	movs	r3, #7
 8008a18:	445c      	add	r4, fp
 8008a1a:	eb06 0244 	add.w	r2, r6, r4, lsl #1
        for (int8_t bit = 7; bit >= 0; bit--) ws2812_hbuffer[i++] = (g >> bit) & 1 ? WS2812_HIGH : WS2812_LOW;
 8008a1e:	fa4a f103 	asr.w	r1, sl, r3
 8008a22:	f011 0f01 	tst.w	r1, #1
 8008a26:	bf0c      	ite	eq
 8008a28:	2119      	moveq	r1, #25
 8008a2a:	212c      	movne	r1, #44	@ 0x2c
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	f822 1b02 	strh.w	r1, [r2], #2
 8008a32:	d2f4      	bcs.n	8008a1e <ws2812_set_highbeam_colors+0x42>
 8008a34:	2107      	movs	r1, #7
 8008a36:	f104 4300 	add.w	r3, r4, #2147483648	@ 0x80000000
 8008a3a:	3307      	adds	r3, #7
 8008a3c:	005a      	lsls	r2, r3, #1
 8008a3e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
        for (int8_t bit = 7; bit >= 0; bit--) ws2812_hbuffer[i++] = (r >> bit) & 1 ? WS2812_HIGH : WS2812_LOW;
 8008a42:	fa49 f001 	asr.w	r0, r9, r1
 8008a46:	f010 0f01 	tst.w	r0, #1
 8008a4a:	bf0c      	ite	eq
 8008a4c:	2019      	moveq	r0, #25
 8008a4e:	202c      	movne	r0, #44	@ 0x2c
 8008a50:	3901      	subs	r1, #1
 8008a52:	f823 0f02 	strh.w	r0, [r3, #2]!
 8008a56:	d2f4      	bcs.n	8008a42 <ws2812_set_highbeam_colors+0x66>
 8008a58:	f102 0310 	add.w	r3, r2, #16
 8008a5c:	2207      	movs	r2, #7
 8008a5e:	4433      	add	r3, r6
        for (int8_t bit = 7; bit >= 0; bit--) ws2812_hbuffer[i++] = (b >> bit) & 1 ? WS2812_HIGH : WS2812_LOW;
 8008a60:	fa48 f102 	asr.w	r1, r8, r2
 8008a64:	f011 0f01 	tst.w	r1, #1
 8008a68:	bf0c      	ite	eq
 8008a6a:	2119      	moveq	r1, #25
 8008a6c:	212c      	movne	r1, #44	@ 0x2c
 8008a6e:	3a01      	subs	r2, #1
 8008a70:	f823 1f02 	strh.w	r1, [r3, #2]!
 8008a74:	d2f4      	bcs.n	8008a60 <ws2812_set_highbeam_colors+0x84>
    for (int led = 0; led < LED_NUM; led++)
 8008a76:	3503      	adds	r5, #3
 8008a78:	42bd      	cmp	r5, r7
        for (int8_t bit = 7; bit >= 0; bit--) ws2812_hbuffer[i++] = (b >> bit) & 1 ? WS2812_HIGH : WS2812_LOW;
 8008a7a:	f104 0418 	add.w	r4, r4, #24
    for (int led = 0; led < LED_NUM; led++)
 8008a7e:	d1b4      	bne.n	80089ea <ws2812_set_highbeam_colors+0xe>
    }


}
 8008a80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a84:	200004ba 	.word	0x200004ba

08008a88 <ws2812_show>:
void ws2812_show(void)
{
 8008a88:	b508      	push	{r3, lr}
    // DMA로 PWM 전송 시작
    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)ws2812_lbuffer, LED_BIT_LEN + BIT_OFFSET);
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008a90:	4a0b      	ldr	r2, [pc, #44]	@ (8008ac0 <ws2812_show+0x38>)
 8008a92:	480c      	ldr	r0, [pc, #48]	@ (8008ac4 <ws2812_show+0x3c>)
 8008a94:	f002 fcd8 	bl	800b448 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t*)ws2812_rbuffer, LED_BIT_LEN + BIT_OFFSET);
 8008a98:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008a9c:	2104      	movs	r1, #4
 8008a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8008ac8 <ws2812_show+0x40>)
 8008aa0:	480a      	ldr	r0, [pc, #40]	@ (8008acc <ws2812_show+0x44>)
 8008aa2:	f002 fcd1 	bl	800b448 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t*)ws2812_hbuffer, LED_BIT_LEN + BIT_OFFSET);
 8008aa6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008aaa:	2104      	movs	r1, #4
 8008aac:	4a08      	ldr	r2, [pc, #32]	@ (8008ad0 <ws2812_show+0x48>)
 8008aae:	4809      	ldr	r0, [pc, #36]	@ (8008ad4 <ws2812_show+0x4c>)
 8008ab0:	f002 fcca 	bl	800b448 <HAL_TIM_PWM_Start_DMA>
    // reset time 확보를 위해 전송 후 잠시 대기
    HAL_Delay(2);  // 최소 50µs 이상 필요 (1ms이면 충분)
}
 8008ab4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_Delay(2);  // 최소 50µs 이상 필요 (1ms이면 충분)
 8008ab8:	2002      	movs	r0, #2
 8008aba:	f001 b8ad 	b.w	8009c18 <HAL_Delay>
 8008abe:	bf00      	nop
 8008ac0:	200008fa 	.word	0x200008fa
 8008ac4:	20001e44 	.word	0x20001e44
 8008ac8:	200006da 	.word	0x200006da
 8008acc:	20001e8c 	.word	0x20001e8c
 8008ad0:	200004ba 	.word	0x200004ba
 8008ad4:	20001ed4 	.word	0x20001ed4

08008ad8 <set_lowbeam>:
void set_lowbeam(uint8_t brightness)
{
	for (int i = 0; i < LED_NUM; i++)
 8008ad8:	2100      	movs	r1, #0
{
 8008ada:	b508      	push	{r3, lr}
 8008adc:	4a0a      	ldr	r2, [pc, #40]	@ (8008b08 <set_lowbeam+0x30>)
 8008ade:	4b0b      	ldr	r3, [pc, #44]	@ (8008b0c <set_lowbeam+0x34>)
	for (int i = 0; i < LED_NUM; i++)
 8008ae0:	3101      	adds	r1, #1
 8008ae2:	2908      	cmp	r1, #8
	{
		lcolors[i][0] = lcolors[i][1] = lcolors[i][2] = brightness;
 8008ae4:	7090      	strb	r0, [r2, #2]
 8008ae6:	7050      	strb	r0, [r2, #1]
		rcolors[i][0] = rcolors[i][1] = rcolors[i][2] = brightness;
 8008ae8:	7098      	strb	r0, [r3, #2]
 8008aea:	7058      	strb	r0, [r3, #1]
		lcolors[i][0] = lcolors[i][1] = lcolors[i][2] = brightness;
 8008aec:	f802 0b03 	strb.w	r0, [r2], #3
		rcolors[i][0] = rcolors[i][1] = rcolors[i][2] = brightness;
 8008af0:	f803 0b03 	strb.w	r0, [r3], #3
	for (int i = 0; i < LED_NUM; i++)
 8008af4:	d1f4      	bne.n	8008ae0 <set_lowbeam+0x8>
	}
	ws2812_set_lowbeam_colors(lcolors,rcolors);
 8008af6:	4905      	ldr	r1, [pc, #20]	@ (8008b0c <set_lowbeam+0x34>)
 8008af8:	4803      	ldr	r0, [pc, #12]	@ (8008b08 <set_lowbeam+0x30>)
 8008afa:	f7ff fec5 	bl	8008888 <ws2812_set_lowbeam_colors>
	ws2812_show();
}
 8008afe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ws2812_show();
 8008b02:	f7ff bfc1 	b.w	8008a88 <ws2812_show>
 8008b06:	bf00      	nop
 8008b08:	200004a1 	.word	0x200004a1
 8008b0c:	20000489 	.word	0x20000489

08008b10 <set_highbeam>:
void set_highbeam(uint8_t brightness)
{
	for (int i = 0; i < LED_NUM; i++)
 8008b10:	2200      	movs	r2, #0
{
 8008b12:	b508      	push	{r3, lr}
 8008b14:	4b07      	ldr	r3, [pc, #28]	@ (8008b34 <set_highbeam+0x24>)
	for (int i = 0; i < LED_NUM; i++)
 8008b16:	3201      	adds	r2, #1
 8008b18:	2a08      	cmp	r2, #8
	{
		hcolors[i][0] = hcolors[i][1] = hcolors[i][2] = brightness;
 8008b1a:	7098      	strb	r0, [r3, #2]
 8008b1c:	7058      	strb	r0, [r3, #1]
 8008b1e:	f803 0b03 	strb.w	r0, [r3], #3
	for (int i = 0; i < LED_NUM; i++)
 8008b22:	d1f8      	bne.n	8008b16 <set_highbeam+0x6>
	}
	ws2812_set_highbeam_colors(hcolors);
 8008b24:	4803      	ldr	r0, [pc, #12]	@ (8008b34 <set_highbeam+0x24>)
 8008b26:	f7ff ff59 	bl	80089dc <ws2812_set_highbeam_colors>
	ws2812_show();
}
 8008b2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ws2812_show();
 8008b2e:	f7ff bfab 	b.w	8008a88 <ws2812_show>
 8008b32:	bf00      	nop
 8008b34:	20000471 	.word	0x20000471

08008b38 <ws2812_scroll_init>:
//		ws2812_show();
//
//		HAL_Delay(100);  // 속도 조절
//		}
//	}
	for (int i = 0; i < LED_NUM; i++) {
 8008b38:	2200      	movs	r2, #0
{
 8008b3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b3e:	4e19      	ldr	r6, [pc, #100]	@ (8008ba4 <ws2812_scroll_init+0x6c>)
 8008b40:	4f19      	ldr	r7, [pc, #100]	@ (8008ba8 <ws2812_scroll_init+0x70>)
 8008b42:	4630      	mov	r0, r6
 8008b44:	4639      	mov	r1, r7
		  	        lcolors[i][0] = lcolors[i][1] = lcolors[i][2] = 0;
 8008b46:	4613      	mov	r3, r2
	for (int i = 0; i < LED_NUM; i++) {
 8008b48:	3201      	adds	r2, #1
 8008b4a:	2a08      	cmp	r2, #8
		  	        lcolors[i][0] = lcolors[i][1] = lcolors[i][2] = 0;
 8008b4c:	7083      	strb	r3, [r0, #2]
 8008b4e:	7043      	strb	r3, [r0, #1]
		  	        rcolors[i][0] = rcolors[i][1] = rcolors[i][2] = 0;
 8008b50:	708b      	strb	r3, [r1, #2]
 8008b52:	704b      	strb	r3, [r1, #1]
		  	        lcolors[i][0] = lcolors[i][1] = lcolors[i][2] = 0;
 8008b54:	f800 3b03 	strb.w	r3, [r0], #3
		  	        rcolors[i][0] = rcolors[i][1] = rcolors[i][2] = 0;
 8008b58:	f801 3b03 	strb.w	r3, [r1], #3
	for (int i = 0; i < LED_NUM; i++) {
 8008b5c:	d1f4      	bne.n	8008b48 <ws2812_scroll_init+0x10>
		  	    }

		  	    for (int i = 0; i < LED_NUM; i++) {
 8008b5e:	2500      	movs	r5, #0
		  	        // i번째까지 흰색으로 설정
		  	        for (int j = 0; j <= i; j++) {
		  	            lcolors[j][0] = lcolors[j][1] = lcolors[j][2] = 255;  // 왼쪽
 8008b60:	24ff      	movs	r4, #255	@ 0xff
		  	            rcolors[j][0] = rcolors[j][1] = rcolors[j][2] = 255;  // 오른쪽
		  	        }

		  	        ws2812_set_lowbeam_colors(lcolors, rcolors);
 8008b62:	f8df 9044 	ldr.w	r9, [pc, #68]	@ 8008ba8 <ws2812_scroll_init+0x70>
 8008b66:	f8df 803c 	ldr.w	r8, [pc, #60]	@ 8008ba4 <ws2812_scroll_init+0x6c>
	for (int i = 0; i < LED_NUM; i++) {
 8008b6a:	463a      	mov	r2, r7
 8008b6c:	4633      	mov	r3, r6
		  	        for (int j = 0; j <= i; j++) {
 8008b6e:	2000      	movs	r0, #0
 8008b70:	3001      	adds	r0, #1
 8008b72:	42a8      	cmp	r0, r5
		  	            lcolors[j][0] = lcolors[j][1] = lcolors[j][2] = 255;  // 왼쪽
 8008b74:	709c      	strb	r4, [r3, #2]
 8008b76:	705c      	strb	r4, [r3, #1]
		  	            rcolors[j][0] = rcolors[j][1] = rcolors[j][2] = 255;  // 오른쪽
 8008b78:	7094      	strb	r4, [r2, #2]
 8008b7a:	7054      	strb	r4, [r2, #1]
		  	            lcolors[j][0] = lcolors[j][1] = lcolors[j][2] = 255;  // 왼쪽
 8008b7c:	f803 4b03 	strb.w	r4, [r3], #3
		  	            rcolors[j][0] = rcolors[j][1] = rcolors[j][2] = 255;  // 오른쪽
 8008b80:	f802 4b03 	strb.w	r4, [r2], #3
		  	        for (int j = 0; j <= i; j++) {
 8008b84:	ddf4      	ble.n	8008b70 <ws2812_scroll_init+0x38>
		  	        ws2812_set_lowbeam_colors(lcolors, rcolors);
 8008b86:	4649      	mov	r1, r9
 8008b88:	4640      	mov	r0, r8
 8008b8a:	f7ff fe7d 	bl	8008888 <ws2812_set_lowbeam_colors>
		  	    for (int i = 0; i < LED_NUM; i++) {
 8008b8e:	3501      	adds	r5, #1
		  	        ws2812_show();
 8008b90:	f7ff ff7a 	bl	8008a88 <ws2812_show>
		  	        HAL_Delay(100);  // 속도 조절
 8008b94:	2064      	movs	r0, #100	@ 0x64
 8008b96:	f001 f83f 	bl	8009c18 <HAL_Delay>
		  	    for (int i = 0; i < LED_NUM; i++) {
 8008b9a:	2d08      	cmp	r5, #8
 8008b9c:	d1e5      	bne.n	8008b6a <ws2812_scroll_init+0x32>
		  	    }
}
 8008b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ba2:	bf00      	nop
 8008ba4:	200004a1 	.word	0x200004a1
 8008ba8:	20000489 	.word	0x20000489

08008bac <light_init>:
{
 8008bac:	b508      	push	{r3, lr}
	ws2812_scroll_init();
 8008bae:	f7ff ffc3 	bl	8008b38 <ws2812_scroll_init>
	set_lowbeam(255);
 8008bb2:	20ff      	movs	r0, #255	@ 0xff
 8008bb4:	f7ff ff90 	bl	8008ad8 <set_lowbeam>
	set_highbeam(255);
 8008bb8:	20ff      	movs	r0, #255	@ 0xff
 8008bba:	f7ff ffa9 	bl	8008b10 <set_highbeam>
	HAL_Delay(500);
 8008bbe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008bc2:	f001 f829 	bl	8009c18 <HAL_Delay>
	set_lowbeam(125);
 8008bc6:	207d      	movs	r0, #125	@ 0x7d
 8008bc8:	f7ff ff86 	bl	8008ad8 <set_lowbeam>
	set_highbeam(125);
 8008bcc:	207d      	movs	r0, #125	@ 0x7d
 8008bce:	f7ff ff9f 	bl	8008b10 <set_highbeam>
	HAL_Delay(500);
 8008bd2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008bd6:	f001 f81f 	bl	8009c18 <HAL_Delay>
	set_lowbeam(0);
 8008bda:	2000      	movs	r0, #0
 8008bdc:	f7ff ff7c 	bl	8008ad8 <set_lowbeam>
	set_highbeam(0);
 8008be0:	2000      	movs	r0, #0
 8008be2:	f7ff ff95 	bl	8008b10 <set_highbeam>
}
 8008be6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(500);
 8008bea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008bee:	f001 b813 	b.w	8009c18 <HAL_Delay>
	...

08008bf4 <low_beam_power_control>:
void low_beam_power_control(LowBeam mode) // LED를 0%와 70%로 토글
{
 8008bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static uint8_t day_count = 0;
	static uint8_t night_count = 0;
	static LowBeam last_input = -1;
	static LowBeam current_mode = -1;
	if (mode != last_input)
 8008bf8:	4f1c      	ldr	r7, [pc, #112]	@ (8008c6c <low_beam_power_control+0x78>)
 8008bfa:	4e1d      	ldr	r6, [pc, #116]	@ (8008c70 <low_beam_power_control+0x7c>)
 8008bfc:	783b      	ldrb	r3, [r7, #0]
 8008bfe:	4d1d      	ldr	r5, [pc, #116]	@ (8008c74 <low_beam_power_control+0x80>)
 8008c00:	4283      	cmp	r3, r0
	{
		day_count = 0;
 8008c02:	bf1e      	ittt	ne
 8008c04:	2300      	movne	r3, #0
 8008c06:	7033      	strbne	r3, [r6, #0]
		night_count = 0;
 8008c08:	702b      	strbne	r3, [r5, #0]
{
 8008c0a:	4604      	mov	r4, r0
	}
	switch(mode)
	{
	case DAY:
		day_count++;
 8008c0c:	7833      	ldrb	r3, [r6, #0]
	switch(mode)
 8008c0e:	b1a0      	cbz	r0, 8008c3a <low_beam_power_control+0x46>
 8008c10:	2801      	cmp	r0, #1
 8008c12:	d015      	beq.n	8008c40 <low_beam_power_control+0x4c>
		night_count++;
		break;
	}


	if (day_count >= THRESHOLD && current_mode !=DAY)
 8008c14:	7833      	ldrb	r3, [r6, #0]
 8008c16:	2b04      	cmp	r3, #4
 8008c18:	d916      	bls.n	8008c48 <low_beam_power_control+0x54>
 8008c1a:	f8df 805c 	ldr.w	r8, [pc, #92]	@ 8008c78 <low_beam_power_control+0x84>
 8008c1e:	f898 3000 	ldrb.w	r3, [r8]
 8008c22:	b18b      	cbz	r3, 8008c48 <low_beam_power_control+0x54>
	{
		uint8_t brightness = 0;
		set_lowbeam(brightness);
 8008c24:	2000      	movs	r0, #0
 8008c26:	f7ff ff57 	bl	8008ad8 <set_lowbeam>
		current_mode = DAY;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	f888 3000 	strb.w	r3, [r8]
	if (night_count >= THRESHOLD && current_mode != NIGHT)
	{
		uint8_t brightness = 178;
		set_lowbeam(brightness);
		current_mode = NIGHT;
		day_count = 0;
 8008c30:	7033      	strb	r3, [r6, #0]
		night_count = 0;
 8008c32:	702b      	strb	r3, [r5, #0]
	}

	last_input = mode;
 8008c34:	703c      	strb	r4, [r7, #0]
}/*
 8008c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		day_count++;
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	7033      	strb	r3, [r6, #0]
		break;
 8008c3e:	e7e9      	b.n	8008c14 <low_beam_power_control+0x20>
		night_count++;
 8008c40:	782b      	ldrb	r3, [r5, #0]
 8008c42:	3301      	adds	r3, #1
 8008c44:	702b      	strb	r3, [r5, #0]
		break;
 8008c46:	e7e5      	b.n	8008c14 <low_beam_power_control+0x20>
	if (night_count >= THRESHOLD && current_mode != NIGHT)
 8008c48:	782b      	ldrb	r3, [r5, #0]
 8008c4a:	2b04      	cmp	r3, #4
 8008c4c:	d9f2      	bls.n	8008c34 <low_beam_power_control+0x40>
 8008c4e:	f8df 8028 	ldr.w	r8, [pc, #40]	@ 8008c78 <low_beam_power_control+0x84>
 8008c52:	f898 3000 	ldrb.w	r3, [r8]
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d0ec      	beq.n	8008c34 <low_beam_power_control+0x40>
		set_lowbeam(brightness);
 8008c5a:	20b2      	movs	r0, #178	@ 0xb2
 8008c5c:	f7ff ff3c 	bl	8008ad8 <set_lowbeam>
		current_mode = NIGHT;
 8008c60:	2301      	movs	r3, #1
 8008c62:	f888 3000 	strb.w	r3, [r8]
		day_count = 0;
 8008c66:	2300      	movs	r3, #0
 8008c68:	e7e2      	b.n	8008c30 <low_beam_power_control+0x3c>
 8008c6a:	bf00      	nop
 8008c6c:	20000009 	.word	0x20000009
 8008c70:	2000046f 	.word	0x2000046f
 8008c74:	2000046e 	.word	0x2000046e
 8008c78:	20000008 	.word	0x20000008

08008c7c <rainroad_mode_change>:

	last_input = mode;

}*/
void rainroad_mode_change(RainRoad mode) // LED의 밝기를 70% 와 100%로 토글
{
 8008c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    static uint8_t weak_count = 0;
    static uint8_t strong_count = 0;
    static RainRoad last_input = -1;
    static RainRoad current_mode = -1;
    if (mode != last_input)
 8008c80:	4f1c      	ldr	r7, [pc, #112]	@ (8008cf4 <rainroad_mode_change+0x78>)
 8008c82:	4e1d      	ldr	r6, [pc, #116]	@ (8008cf8 <rainroad_mode_change+0x7c>)
 8008c84:	783b      	ldrb	r3, [r7, #0]
 8008c86:	4d1d      	ldr	r5, [pc, #116]	@ (8008cfc <rainroad_mode_change+0x80>)
 8008c88:	4283      	cmp	r3, r0
    {
		weak_count = 0;
 8008c8a:	bf1e      	ittt	ne
 8008c8c:	2300      	movne	r3, #0
 8008c8e:	7033      	strbne	r3, [r6, #0]
		strong_count = 0;
 8008c90:	702b      	strbne	r3, [r5, #0]
{
 8008c92:	4604      	mov	r4, r0
    }

    switch(mode)
    {
    case WEAK:
    	weak_count++;
 8008c94:	7833      	ldrb	r3, [r6, #0]
    switch(mode)
 8008c96:	b1a0      	cbz	r0, 8008cc2 <rainroad_mode_change+0x46>
 8008c98:	2801      	cmp	r0, #1
 8008c9a:	d015      	beq.n	8008cc8 <rainroad_mode_change+0x4c>
    case STRONG:
    	strong_count++;
    	break;
    }

    if (weak_count >= THRESHOLD && current_mode!=WEAK)
 8008c9c:	7833      	ldrb	r3, [r6, #0]
 8008c9e:	2b04      	cmp	r3, #4
 8008ca0:	d916      	bls.n	8008cd0 <rainroad_mode_change+0x54>
 8008ca2:	f8df 805c 	ldr.w	r8, [pc, #92]	@ 8008d00 <rainroad_mode_change+0x84>
 8008ca6:	f898 3000 	ldrb.w	r3, [r8]
 8008caa:	b18b      	cbz	r3, 8008cd0 <rainroad_mode_change+0x54>
    {
		uint8_t brightness = 178;
		set_lowbeam(brightness);
 8008cac:	20b2      	movs	r0, #178	@ 0xb2
 8008cae:	f7ff ff13 	bl	8008ad8 <set_lowbeam>
		current_mode = WEAK;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	f888 3000 	strb.w	r3, [r8]
	if (strong_count >= THRESHOLD && current_mode!=STRONG)
	{
		uint8_t brightness = 255;
		set_lowbeam(brightness);
		current_mode = STRONG;
		weak_count = 0;
 8008cb8:	7033      	strb	r3, [r6, #0]
		strong_count = 0;
 8008cba:	702b      	strb	r3, [r5, #0]
	}

	last_input = mode;
 8008cbc:	703c      	strb	r4, [r7, #0]

}
 8008cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	weak_count++;
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	7033      	strb	r3, [r6, #0]
    	break;
 8008cc6:	e7e9      	b.n	8008c9c <rainroad_mode_change+0x20>
    	strong_count++;
 8008cc8:	782b      	ldrb	r3, [r5, #0]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	702b      	strb	r3, [r5, #0]
    	break;
 8008cce:	e7e5      	b.n	8008c9c <rainroad_mode_change+0x20>
	if (strong_count >= THRESHOLD && current_mode!=STRONG)
 8008cd0:	782b      	ldrb	r3, [r5, #0]
 8008cd2:	2b04      	cmp	r3, #4
 8008cd4:	d9f2      	bls.n	8008cbc <rainroad_mode_change+0x40>
 8008cd6:	f8df 8028 	ldr.w	r8, [pc, #40]	@ 8008d00 <rainroad_mode_change+0x84>
 8008cda:	f898 3000 	ldrb.w	r3, [r8]
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d0ec      	beq.n	8008cbc <rainroad_mode_change+0x40>
		set_lowbeam(brightness);
 8008ce2:	20ff      	movs	r0, #255	@ 0xff
 8008ce4:	f7ff fef8 	bl	8008ad8 <set_lowbeam>
		current_mode = STRONG;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	f888 3000 	strb.w	r3, [r8]
		weak_count = 0;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	e7e2      	b.n	8008cb8 <rainroad_mode_change+0x3c>
 8008cf2:	bf00      	nop
 8008cf4:	20000007 	.word	0x20000007
 8008cf8:	2000046d 	.word	0x2000046d
 8008cfc:	2000046c 	.word	0x2000046c
 8008d00:	20000006 	.word	0x20000006

08008d04 <high_beam_power_control>:
void high_beam_power_control(HighBeam mode)
{
 8008d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static uint8_t on_count = 0;
	static uint8_t off_count = 0;
	static HighBeam last_input = -1;
	static HighBeam current_mode = -1;
	if (mode != last_input)
 8008d08:	4f1c      	ldr	r7, [pc, #112]	@ (8008d7c <high_beam_power_control+0x78>)
 8008d0a:	4e1d      	ldr	r6, [pc, #116]	@ (8008d80 <high_beam_power_control+0x7c>)
 8008d0c:	783b      	ldrb	r3, [r7, #0]
 8008d0e:	4d1d      	ldr	r5, [pc, #116]	@ (8008d84 <high_beam_power_control+0x80>)
 8008d10:	4283      	cmp	r3, r0
	{
		on_count = 0;
 8008d12:	bf1e      	ittt	ne
 8008d14:	2300      	movne	r3, #0
 8008d16:	7033      	strbne	r3, [r6, #0]
		off_count = 0;
 8008d18:	702b      	strbne	r3, [r5, #0]
{
 8008d1a:	4604      	mov	r4, r0
	}
	switch(mode)
	{
	case H_ON:
		on_count++;
 8008d1c:	7833      	ldrb	r3, [r6, #0]
	switch(mode)
 8008d1e:	b1c0      	cbz	r0, 8008d52 <high_beam_power_control+0x4e>
 8008d20:	2801      	cmp	r0, #1
 8008d22:	d101      	bne.n	8008d28 <high_beam_power_control+0x24>
		on_count++;
 8008d24:	3301      	adds	r3, #1
 8008d26:	7033      	strb	r3, [r6, #0]
		off_count++;
		break;
	}


	if (on_count >= THRESHOLD && current_mode !=H_ON)
 8008d28:	7833      	ldrb	r3, [r6, #0]
 8008d2a:	2b04      	cmp	r3, #4
 8008d2c:	d915      	bls.n	8008d5a <high_beam_power_control+0x56>
 8008d2e:	f8df 8058 	ldr.w	r8, [pc, #88]	@ 8008d88 <high_beam_power_control+0x84>
 8008d32:	f898 3000 	ldrb.w	r3, [r8]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d00f      	beq.n	8008d5a <high_beam_power_control+0x56>
	{
		uint8_t brightness = 255;
		set_highbeam(brightness);
 8008d3a:	20ff      	movs	r0, #255	@ 0xff
 8008d3c:	f7ff fee8 	bl	8008b10 <set_highbeam>
		current_mode = H_ON;
 8008d40:	2301      	movs	r3, #1
 8008d42:	f888 3000 	strb.w	r3, [r8]
		on_count = 0;
 8008d46:	2300      	movs	r3, #0
	if (off_count >= THRESHOLD && current_mode != H_OFF)
	{
		uint8_t brightness = 0;
		set_highbeam(brightness);
		current_mode = H_OFF;
		on_count = 0;
 8008d48:	7033      	strb	r3, [r6, #0]
		off_count = 0;
 8008d4a:	702b      	strb	r3, [r5, #0]
	}

	last_input = mode;
 8008d4c:	703c      	strb	r4, [r7, #0]
}
 8008d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		off_count++;
 8008d52:	782b      	ldrb	r3, [r5, #0]
 8008d54:	3301      	adds	r3, #1
 8008d56:	702b      	strb	r3, [r5, #0]
		break;
 8008d58:	e7e6      	b.n	8008d28 <high_beam_power_control+0x24>
	if (off_count >= THRESHOLD && current_mode != H_OFF)
 8008d5a:	782b      	ldrb	r3, [r5, #0]
 8008d5c:	2b04      	cmp	r3, #4
 8008d5e:	d9f5      	bls.n	8008d4c <high_beam_power_control+0x48>
 8008d60:	f8df 8024 	ldr.w	r8, [pc, #36]	@ 8008d88 <high_beam_power_control+0x84>
 8008d64:	f898 3000 	ldrb.w	r3, [r8]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d0ef      	beq.n	8008d4c <high_beam_power_control+0x48>
		set_highbeam(brightness);
 8008d6c:	2000      	movs	r0, #0
 8008d6e:	f7ff fecf 	bl	8008b10 <set_highbeam>
		current_mode = H_OFF;
 8008d72:	2300      	movs	r3, #0
 8008d74:	f888 3000 	strb.w	r3, [r8]
 8008d78:	e7e6      	b.n	8008d48 <high_beam_power_control+0x44>
 8008d7a:	bf00      	nop
 8008d7c:	20000005 	.word	0x20000005
 8008d80:	2000046b 	.word	0x2000046b
 8008d84:	2000046a 	.word	0x2000046a
 8008d88:	20000004 	.word	0x20000004

08008d8c <foglight_power_control>:
void foglight_power_control(FogLight mode)
{
 8008d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static uint8_t clean_count = 0;
	static uint8_t fog_count = 0;
	static FogLight last_input = -1;
	static FogLight current_mode = -1;
	if (mode != last_input)
 8008d90:	4f1e      	ldr	r7, [pc, #120]	@ (8008e0c <foglight_power_control+0x80>)
 8008d92:	4e1f      	ldr	r6, [pc, #124]	@ (8008e10 <foglight_power_control+0x84>)
 8008d94:	783b      	ldrb	r3, [r7, #0]
 8008d96:	4d1f      	ldr	r5, [pc, #124]	@ (8008e14 <foglight_power_control+0x88>)
 8008d98:	4283      	cmp	r3, r0
	{
		clean_count = 0;
 8008d9a:	bf1e      	ittt	ne
 8008d9c:	2300      	movne	r3, #0
 8008d9e:	7033      	strbne	r3, [r6, #0]
		fog_count = 0;
 8008da0:	702b      	strbne	r3, [r5, #0]
{
 8008da2:	4604      	mov	r4, r0
	}
	switch(mode)
	{
	case CLEAN:
		clean_count++;
 8008da4:	7833      	ldrb	r3, [r6, #0]
	switch(mode)
 8008da6:	b1b0      	cbz	r0, 8008dd6 <foglight_power_control+0x4a>
 8008da8:	2801      	cmp	r0, #1
 8008daa:	d017      	beq.n	8008ddc <foglight_power_control+0x50>
		fog_count++;
		break;
	}


	if (clean_count >= THRESHOLD && current_mode !=CLEAN)
 8008dac:	7833      	ldrb	r3, [r6, #0]
 8008dae:	2b04      	cmp	r3, #4
 8008db0:	d918      	bls.n	8008de4 <foglight_power_control+0x58>
 8008db2:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 8008e18 <foglight_power_control+0x8c>
 8008db6:	f898 3000 	ldrb.w	r3, [r8]
 8008dba:	b19b      	cbz	r3, 8008de4 <foglight_power_control+0x58>
	{
		FOG_OFF();
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	2180      	movs	r1, #128	@ 0x80
 8008dc0:	4816      	ldr	r0, [pc, #88]	@ (8008e1c <foglight_power_control+0x90>)
 8008dc2:	f001 fdad 	bl	800a920 <HAL_GPIO_WritePin>
		//안개등 작동 off
		current_mode = CLEAN;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	f888 3000 	strb.w	r3, [r8]
	if (fog_count >= THRESHOLD && current_mode != FOG)
	{
		FOG_ON();
		//안개등 작동 on
		current_mode = FOG;
		clean_count = 0;
 8008dcc:	7033      	strb	r3, [r6, #0]
		fog_count = 0;
 8008dce:	702b      	strb	r3, [r5, #0]
	}

	last_input = mode;
 8008dd0:	703c      	strb	r4, [r7, #0]
}
 8008dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		clean_count++;
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	7033      	strb	r3, [r6, #0]
		break;
 8008dda:	e7e7      	b.n	8008dac <foglight_power_control+0x20>
		fog_count++;
 8008ddc:	782b      	ldrb	r3, [r5, #0]
 8008dde:	3301      	adds	r3, #1
 8008de0:	702b      	strb	r3, [r5, #0]
		break;
 8008de2:	e7e3      	b.n	8008dac <foglight_power_control+0x20>
	if (fog_count >= THRESHOLD && current_mode != FOG)
 8008de4:	782b      	ldrb	r3, [r5, #0]
 8008de6:	2b04      	cmp	r3, #4
 8008de8:	d9f2      	bls.n	8008dd0 <foglight_power_control+0x44>
 8008dea:	f8df 802c 	ldr.w	r8, [pc, #44]	@ 8008e18 <foglight_power_control+0x8c>
 8008dee:	f898 3000 	ldrb.w	r3, [r8]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d0ec      	beq.n	8008dd0 <foglight_power_control+0x44>
		FOG_ON();
 8008df6:	2201      	movs	r2, #1
 8008df8:	2180      	movs	r1, #128	@ 0x80
 8008dfa:	4808      	ldr	r0, [pc, #32]	@ (8008e1c <foglight_power_control+0x90>)
 8008dfc:	f001 fd90 	bl	800a920 <HAL_GPIO_WritePin>
		current_mode = FOG;
 8008e00:	2301      	movs	r3, #1
 8008e02:	f888 3000 	strb.w	r3, [r8]
		clean_count = 0;
 8008e06:	2300      	movs	r3, #0
 8008e08:	e7e0      	b.n	8008dcc <foglight_power_control+0x40>
 8008e0a:	bf00      	nop
 8008e0c:	20000003 	.word	0x20000003
 8008e10:	20000469 	.word	0x20000469
 8008e14:	20000468 	.word	0x20000468
 8008e18:	20000002 	.word	0x20000002
 8008e1c:	40011000 	.word	0x40011000

08008e20 <cornerlight_power_control>:
void cornerlight_power_control(CornerLight mode)
{
 8008e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	static uint8_t right_count = 0;
	static uint8_t left_count = 0;

	static CornerLight last_input = -1;
	static CornerLight current_mode = -1;
	if (mode != last_input)
 8008e24:	f8df 910c 	ldr.w	r9, [pc, #268]	@ 8008f34 <cornerlight_power_control+0x114>
{
 8008e28:	4680      	mov	r8, r0
	if (mode != last_input)
 8008e2a:	f899 3000 	ldrb.w	r3, [r9]
 8008e2e:	4f42      	ldr	r7, [pc, #264]	@ (8008f38 <cornerlight_power_control+0x118>)
 8008e30:	4283      	cmp	r3, r0
 8008e32:	4e42      	ldr	r6, [pc, #264]	@ (8008f3c <cornerlight_power_control+0x11c>)
 8008e34:	4d42      	ldr	r5, [pc, #264]	@ (8008f40 <cornerlight_power_control+0x120>)
 8008e36:	4c43      	ldr	r4, [pc, #268]	@ (8008f44 <cornerlight_power_control+0x124>)
 8008e38:	d004      	beq.n	8008e44 <cornerlight_power_control+0x24>
	{
		off_count = 0;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	703b      	strb	r3, [r7, #0]
		both_count = 0;
 8008e3e:	7033      	strb	r3, [r6, #0]
		right_count = 0;
 8008e40:	702b      	strb	r3, [r5, #0]
		left_count = 0;
 8008e42:	7023      	strb	r3, [r4, #0]
	}
	switch(mode)
	{
	case OFF:
		off_count++;
 8008e44:	783b      	ldrb	r3, [r7, #0]
	switch(mode)
 8008e46:	f1b8 0f03 	cmp.w	r8, #3
 8008e4a:	d805      	bhi.n	8008e58 <cornerlight_power_control+0x38>
 8008e4c:	e8df f008 	tbb	[pc, r8]
 8008e50:	32363a02 	.word	0x32363a02
		off_count++;
 8008e54:	3301      	adds	r3, #1
 8008e56:	703b      	strb	r3, [r7, #0]
	case LEFT:
		left_count++;
		break;
	}

	if (off_count >= THRESHOLD && current_mode !=OFF)
 8008e58:	783b      	ldrb	r3, [r7, #0]
 8008e5a:	2b04      	cmp	r3, #4
 8008e5c:	d936      	bls.n	8008ecc <cornerlight_power_control+0xac>
 8008e5e:	f8df a0e8 	ldr.w	sl, [pc, #232]	@ 8008f48 <cornerlight_power_control+0x128>
 8008e62:	f89a 3000 	ldrb.w	r3, [sl]
 8008e66:	b38b      	cbz	r3, 8008ecc <cornerlight_power_control+0xac>
	{
		LCORNER_OFF();
 8008e68:	2200      	movs	r2, #0
 8008e6a:	2110      	movs	r1, #16
 8008e6c:	4837      	ldr	r0, [pc, #220]	@ (8008f4c <cornerlight_power_control+0x12c>)
 8008e6e:	f001 fd57 	bl	800a920 <HAL_GPIO_WritePin>
		RCORNER_OFF();
 8008e72:	2200      	movs	r2, #0
 8008e74:	2120      	movs	r1, #32
 8008e76:	4835      	ldr	r0, [pc, #212]	@ (8008f4c <cornerlight_power_control+0x12c>)
 8008e78:	f001 fd52 	bl	800a920 <HAL_GPIO_WritePin>

		current_mode = OFF;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	f88a 3000 	strb.w	r3, [sl]
		off_count = 0;
 8008e82:	703b      	strb	r3, [r7, #0]
		both_count = 0;
 8008e84:	7033      	strb	r3, [r6, #0]
		right_count = 0;
 8008e86:	702b      	strb	r3, [r5, #0]
		left_count = 0;
 8008e88:	7023      	strb	r3, [r4, #0]
		off_count = 0;
		both_count = 0;
		right_count = 0;
		left_count = 0;
	}
	if (left_count >= THRESHOLD && current_mode != LEFT)
 8008e8a:	7823      	ldrb	r3, [r4, #0]
 8008e8c:	2b04      	cmp	r3, #4
 8008e8e:	d938      	bls.n	8008f02 <cornerlight_power_control+0xe2>
 8008e90:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008f48 <cornerlight_power_control+0x128>
 8008e94:	f89a 3000 	ldrb.w	r3, [sl]
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d032      	beq.n	8008f02 <cornerlight_power_control+0xe2>
	{
		LCORNER_ON();
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	2110      	movs	r1, #16
 8008ea0:	482a      	ldr	r0, [pc, #168]	@ (8008f4c <cornerlight_power_control+0x12c>)
 8008ea2:	f001 fd3d 	bl	800a920 <HAL_GPIO_WritePin>
		RCORNER_OFF();
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	2120      	movs	r1, #32
 8008eaa:	4828      	ldr	r0, [pc, #160]	@ (8008f4c <cornerlight_power_control+0x12c>)
 8008eac:	f001 fd38 	bl	800a920 <HAL_GPIO_WritePin>

		current_mode = LEFT;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e01f      	b.n	8008ef4 <cornerlight_power_control+0xd4>
		both_count++;
 8008eb4:	7833      	ldrb	r3, [r6, #0]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	7033      	strb	r3, [r6, #0]
		break;
 8008eba:	e7cd      	b.n	8008e58 <cornerlight_power_control+0x38>
		right_count++;
 8008ebc:	782b      	ldrb	r3, [r5, #0]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	702b      	strb	r3, [r5, #0]
		break;
 8008ec2:	e7c9      	b.n	8008e58 <cornerlight_power_control+0x38>
		left_count++;
 8008ec4:	7823      	ldrb	r3, [r4, #0]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	7023      	strb	r3, [r4, #0]
		break;
 8008eca:	e7c5      	b.n	8008e58 <cornerlight_power_control+0x38>
	if (both_count >= THRESHOLD && current_mode != BOTH)
 8008ecc:	7833      	ldrb	r3, [r6, #0]
 8008ece:	2b04      	cmp	r3, #4
 8008ed0:	d91b      	bls.n	8008f0a <cornerlight_power_control+0xea>
 8008ed2:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8008f48 <cornerlight_power_control+0x128>
 8008ed6:	f89a 3000 	ldrb.w	r3, [sl]
 8008eda:	2b03      	cmp	r3, #3
 8008edc:	d015      	beq.n	8008f0a <cornerlight_power_control+0xea>
		LCORNER_ON();
 8008ede:	2201      	movs	r2, #1
 8008ee0:	2110      	movs	r1, #16
 8008ee2:	481a      	ldr	r0, [pc, #104]	@ (8008f4c <cornerlight_power_control+0x12c>)
 8008ee4:	f001 fd1c 	bl	800a920 <HAL_GPIO_WritePin>
		RCORNER_ON();
 8008ee8:	2201      	movs	r2, #1
 8008eea:	2120      	movs	r1, #32
 8008eec:	4817      	ldr	r0, [pc, #92]	@ (8008f4c <cornerlight_power_control+0x12c>)
 8008eee:	f001 fd17 	bl	800a920 <HAL_GPIO_WritePin>
		current_mode = BOTH;
 8008ef2:	2303      	movs	r3, #3
		current_mode = LEFT;
 8008ef4:	f88a 3000 	strb.w	r3, [sl]
		off_count = 0;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	703b      	strb	r3, [r7, #0]
		both_count = 0;
 8008efc:	7033      	strb	r3, [r6, #0]
		right_count = 0;
 8008efe:	702b      	strb	r3, [r5, #0]
		left_count = 0;
 8008f00:	7023      	strb	r3, [r4, #0]
	}

	last_input = mode;
 8008f02:	f889 8000 	strb.w	r8, [r9]
}
 8008f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (right_count >= THRESHOLD && current_mode != RIGHT)
 8008f0a:	782b      	ldrb	r3, [r5, #0]
 8008f0c:	2b04      	cmp	r3, #4
 8008f0e:	d9bc      	bls.n	8008e8a <cornerlight_power_control+0x6a>
 8008f10:	f8df a034 	ldr.w	sl, [pc, #52]	@ 8008f48 <cornerlight_power_control+0x128>
 8008f14:	f89a 3000 	ldrb.w	r3, [sl]
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d0b6      	beq.n	8008e8a <cornerlight_power_control+0x6a>
		LCORNER_OFF();
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	2110      	movs	r1, #16
 8008f20:	480a      	ldr	r0, [pc, #40]	@ (8008f4c <cornerlight_power_control+0x12c>)
 8008f22:	f001 fcfd 	bl	800a920 <HAL_GPIO_WritePin>
		RCORNER_ON();
 8008f26:	2201      	movs	r2, #1
 8008f28:	2120      	movs	r1, #32
 8008f2a:	4808      	ldr	r0, [pc, #32]	@ (8008f4c <cornerlight_power_control+0x12c>)
 8008f2c:	f001 fcf8 	bl	800a920 <HAL_GPIO_WritePin>
		current_mode = RIGHT;
 8008f30:	2302      	movs	r3, #2
 8008f32:	e7df      	b.n	8008ef4 <cornerlight_power_control+0xd4>
 8008f34:	20000001 	.word	0x20000001
 8008f38:	20000467 	.word	0x20000467
 8008f3c:	20000466 	.word	0x20000466
 8008f40:	20000465 	.word	0x20000465
 8008f44:	20000464 	.word	0x20000464
 8008f48:	20000000 	.word	0x20000000
 8008f4c:	40010c00 	.word	0x40010c00

08008f50 <change_light>:
        uint8_t step = dir ? (i % 4) : (3 - (i % 4));
        rstep_motor(step);
        HAL_Delay(delay_ms);
    }
}*/
void change_light(uint8_t *lightMode){
 8008f50:	b510      	push	{r4, lr}
 8008f52:	4604      	mov	r4, r0
	low_beam_power_control(lightMode[0]);
 8008f54:	7800      	ldrb	r0, [r0, #0]
 8008f56:	f7ff fe4d 	bl	8008bf4 <low_beam_power_control>
	/*driving_mode_change(lightMode[1]);*/
	rainroad_mode_change(lightMode[2]);
 8008f5a:	78a0      	ldrb	r0, [r4, #2]
 8008f5c:	f7ff fe8e 	bl	8008c7c <rainroad_mode_change>
	high_beam_power_control(lightMode[3]);
 8008f60:	78e0      	ldrb	r0, [r4, #3]
 8008f62:	f7ff fecf 	bl	8008d04 <high_beam_power_control>
	foglight_power_control(lightMode[4]);
 8008f66:	7920      	ldrb	r0, [r4, #4]
 8008f68:	f7ff ff10 	bl	8008d8c <foglight_power_control>
	cornerlight_power_control(lightMode[5]);
 8008f6c:	7960      	ldrb	r0, [r4, #5]
}
 8008f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	cornerlight_power_control(lightMode[5]);
 8008f72:	f7ff bf55 	b.w	8008e20 <cornerlight_power_control>
	...

08008f78 <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008f78:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008f7c:	4905      	ldr	r1, [pc, #20]	@ (8008f94 <__NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008f7e:	4b06      	ldr	r3, [pc, #24]	@ (8008f98 <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008f80:	68ca      	ldr	r2, [r1, #12]
 8008f82:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008f86:	4313      	orrs	r3, r2
 8008f88:	60cb      	str	r3, [r1, #12]
 8008f8a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8008f8e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8008f90:	e7fd      	b.n	8008f8e <__NVIC_SystemReset+0x16>
 8008f92:	bf00      	nop
 8008f94:	e000ed00 	.word	0xe000ed00
 8008f98:	05fa0004 	.word	0x05fa0004

08008f9c <NVIC_Config>:
}

/* USER CODE BEGIN 4 */

void NVIC_Config(void) {
	HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008f9c:	2200      	movs	r2, #0
void NVIC_Config(void) {
 8008f9e:	b508      	push	{r3, lr}
	HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008fa0:	2014      	movs	r0, #20
 8008fa2:	4611      	mov	r1, r2
 8008fa4:	f001 f96a 	bl	800a27c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
}
 8008fa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008fac:	2014      	movs	r0, #20
 8008fae:	f001 b995 	b.w	800a2dc <HAL_NVIC_EnableIRQ>
	...

08008fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008fb4:	b507      	push	{r0, r1, r2, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8008fb6:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 8008fb8:	2201      	movs	r2, #1
 8008fba:	2120      	movs	r1, #32
 8008fbc:	480c      	ldr	r0, [pc, #48]	@ (8008ff0 <Error_Handler+0x3c>)
 8008fbe:	f001 fcaf 	bl	800a920 <HAL_GPIO_WritePin>
	while (1) {
		// 여기서 rollback 해야한다.
		canMsgWrite(CAN_ID_NACK, 1, TxData);	// update mode no 응답
 8008fc2:	4a0c      	ldr	r2, [pc, #48]	@ (8008ff4 <Error_Handler+0x40>)
 8008fc4:	2101      	movs	r1, #1
 8008fc6:	f240 50cc 	movw	r0, #1484	@ 0x5cc
 8008fca:	f000 f845 	bl	8009058 <canMsgWrite>
		HAL_PWR_EnableBkUpAccess();
 8008fce:	f001 fcb9 	bl	800a944 <HAL_PWR_EnableBkUpAccess>
		__HAL_RCC_BKP_CLK_ENABLE();
 8008fd2:	4b09      	ldr	r3, [pc, #36]	@ (8008ff8 <Error_Handler+0x44>)
 8008fd4:	69da      	ldr	r2, [r3, #28]
 8008fd6:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8008fda:	61da      	str	r2, [r3, #28]
		BOOT_FLAG_ADDR = BOOT_FLAG_BOOT;
 8008fdc:	2201      	movs	r2, #1
		__HAL_RCC_BKP_CLK_ENABLE();
 8008fde:	69db      	ldr	r3, [r3, #28]
 8008fe0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fe4:	9301      	str	r3, [sp, #4]
 8008fe6:	9b01      	ldr	r3, [sp, #4]
		BOOT_FLAG_ADDR = BOOT_FLAG_BOOT;
 8008fe8:	4b04      	ldr	r3, [pc, #16]	@ (8008ffc <Error_Handler+0x48>)
 8008fea:	605a      	str	r2, [r3, #4]
		NVIC_SystemReset(); 				// 이거는 왜 있는건지 모르겠네
 8008fec:	f7ff ffc4 	bl	8008f78 <__NVIC_SystemReset>
 8008ff0:	40010800 	.word	0x40010800
 8008ff4:	20000b3c 	.word	0x20000b3c
 8008ff8:	40021000 	.word	0x40021000
 8008ffc:	40006c00 	.word	0x40006c00

08009000 <SystemClock_Config>:
{
 8009000:	b510      	push	{r4, lr}
 8009002:	b090      	sub	sp, #64	@ 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009004:	2220      	movs	r2, #32
 8009006:	2100      	movs	r1, #0
 8009008:	a807      	add	r0, sp, #28
 800900a:	f002 fadc 	bl	800b5c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800900e:	2214      	movs	r2, #20
 8009010:	2100      	movs	r1, #0
 8009012:	a801      	add	r0, sp, #4
 8009014:	f002 fad7 	bl	800b5c6 <memset>
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009018:	2310      	movs	r3, #16
 800901a:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800901c:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800901e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8009022:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009026:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8009028:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800902a:	940d      	str	r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800902c:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800902e:	f001 fc8f 	bl	800a950 <HAL_RCC_OscConfig>
 8009032:	b108      	cbz	r0, 8009038 <SystemClock_Config+0x38>
    Error_Handler();
 8009034:	f7ff ffbe 	bl	8008fb4 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009038:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800903a:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800903e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009042:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009044:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009048:	4621      	mov	r1, r4
 800904a:	a801      	add	r0, sp, #4
 800904c:	f001 fe42 	bl	800acd4 <HAL_RCC_ClockConfig>
 8009050:	2800      	cmp	r0, #0
 8009052:	d1ef      	bne.n	8009034 <SystemClock_Config+0x34>
}
 8009054:	b010      	add	sp, #64	@ 0x40
 8009056:	bd10      	pop	{r4, pc}

08009058 <canMsgWrite>:
void canMsgWrite(uint32_t id, uint8_t dlc, uint8_t *txData) {
 8009058:	b538      	push	{r3, r4, r5, lr}
	txHeader.RTR = CAN_RTR_DATA;
 800905a:	2300      	movs	r3, #0
void canMsgWrite(uint32_t id, uint8_t dlc, uint8_t *txData) {
 800905c:	460c      	mov	r4, r1
	txHeader.StdId = id;
 800905e:	490a      	ldr	r1, [pc, #40]	@ (8009088 <canMsgWrite+0x30>)
	txHeader.IDE = CAN_ID_STD;
 8009060:	e9c1 3302 	strd	r3, r3, [r1, #8]
	txHeader.StdId = id;
 8009064:	6008      	str	r0, [r1, #0]
	if (HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox) != HAL_OK) {
 8009066:	4b09      	ldr	r3, [pc, #36]	@ (800908c <canMsgWrite+0x34>)
 8009068:	4809      	ldr	r0, [pc, #36]	@ (8009090 <canMsgWrite+0x38>)
	txHeader.DLC = dlc;
 800906a:	610c      	str	r4, [r1, #16]
	if (HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox) != HAL_OK) {
 800906c:	f000 fefc 	bl	8009e68 <HAL_CAN_AddTxMessage>
 8009070:	b940      	cbnz	r0, 8009084 <canMsgWrite+0x2c>
	while (HAL_CAN_IsTxMessagePending(&hcan, txMailbox)) {
 8009072:	4d06      	ldr	r5, [pc, #24]	@ (800908c <canMsgWrite+0x34>)
 8009074:	4c06      	ldr	r4, [pc, #24]	@ (8009090 <canMsgWrite+0x38>)
 8009076:	4620      	mov	r0, r4
 8009078:	6829      	ldr	r1, [r5, #0]
 800907a:	f000 ff3e 	bl	8009efa <HAL_CAN_IsTxMessagePending>
 800907e:	2800      	cmp	r0, #0
 8009080:	d1f9      	bne.n	8009076 <canMsgWrite+0x1e>
}
 8009082:	bd38      	pop	{r3, r4, r5, pc}
		Error_Handler();
 8009084:	f7ff ff96 	bl	8008fb4 <Error_Handler>
 8009088:	20000b50 	.word	0x20000b50
 800908c:	20000b4c 	.word	0x20000b4c
 8009090:	2000003c 	.word	0x2000003c

08009094 <EraseFlashMemory>:
void EraseFlashMemory(void) {
 8009094:	b510      	push	{r4, lr}
 8009096:	b086      	sub	sp, #24
	HAL_FLASH_Unlock();
 8009098:	f001 fa6c 	bl	800a574 <HAL_FLASH_Unlock>
	uint32_t pageError = 0;
 800909c:	2400      	movs	r4, #0
	eraseInitStruct.NbPages = NUMBER_OF_PAGES_IN_PARTITION;
 800909e:	232f      	movs	r3, #47	@ 0x2f
 80090a0:	4a0c      	ldr	r2, [pc, #48]	@ (80090d4 <EraseFlashMemory+0x40>)
	if (HAL_FLASHEx_Erase(&eraseInitStruct, &pageError) != HAL_OK) {
 80090a2:	a901      	add	r1, sp, #4
 80090a4:	a802      	add	r0, sp, #8
	eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80090a6:	e9cd 4401 	strd	r4, r4, [sp, #4]
	eraseInitStruct.NbPages = NUMBER_OF_PAGES_IN_PARTITION;
 80090aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
	if (HAL_FLASHEx_Erase(&eraseInitStruct, &pageError) != HAL_OK) {
 80090ae:	f001 fb0b 	bl	800a6c8 <HAL_FLASHEx_Erase>
 80090b2:	b158      	cbz	r0, 80090cc <EraseFlashMemory+0x38>
		HAL_FLASH_Lock();
 80090b4:	f001 fa70 	bl	800a598 <HAL_FLASH_Lock>
		fwUpdateState = FW_UPDATE_IDLE;
 80090b8:	4b07      	ldr	r3, [pc, #28]	@ (80090d8 <EraseFlashMemory+0x44>)
		canMsgWrite(CAN_ID_NACK, 1, TxData);	// update mode no 응답
 80090ba:	2101      	movs	r1, #1
 80090bc:	4a07      	ldr	r2, [pc, #28]	@ (80090dc <EraseFlashMemory+0x48>)
 80090be:	f240 50cc 	movw	r0, #1484	@ 0x5cc
		fwUpdateState = FW_UPDATE_IDLE;
 80090c2:	701c      	strb	r4, [r3, #0]
		canMsgWrite(CAN_ID_NACK, 1, TxData);	// update mode no 응답
 80090c4:	f7ff ffc8 	bl	8009058 <canMsgWrite>
		NVIC_SystemReset(); 				// 이거는 왜 있는건지 모르겠네
 80090c8:	f7ff ff56 	bl	8008f78 <__NVIC_SystemReset>
	HAL_FLASH_Lock();
 80090cc:	f001 fa64 	bl	800a598 <HAL_FLASH_Lock>
}
 80090d0:	b006      	add	sp, #24
 80090d2:	bd10      	pop	{r4, pc}
 80090d4:	08014400 	.word	0x08014400
 80090d8:	20000b49 	.word	0x20000b49
 80090dc:	20000b3c 	.word	0x20000b3c

080090e0 <StartFirmwareUpdate>:
void StartFirmwareUpdate(void) {
 80090e0:	b513      	push	{r0, r1, r4, lr}
	if (updateMode == 0) {
 80090e2:	4c0c      	ldr	r4, [pc, #48]	@ (8009114 <StartFirmwareUpdate+0x34>)
 80090e4:	7823      	ldrb	r3, [r4, #0]
 80090e6:	b993      	cbnz	r3, 800910e <StartFirmwareUpdate+0x2e>
		fwUpdateReceivedBytes = 0;
 80090e8:	4a0b      	ldr	r2, [pc, #44]	@ (8009118 <StartFirmwareUpdate+0x38>)
 80090ea:	6013      	str	r3, [r2, #0]
		blockReceivedBytes = 0;    // 블록 카운터 초기화
 80090ec:	4a0b      	ldr	r2, [pc, #44]	@ (800911c <StartFirmwareUpdate+0x3c>)
 80090ee:	6013      	str	r3, [r2, #0]
		EraseFlashMemory();
 80090f0:	f7ff ffd0 	bl	8009094 <EraseFlashMemory>
		uint8_t data = 0x52;
 80090f4:	2352      	movs	r3, #82	@ 0x52
		canMsgWrite(CAN_ID_ACK, 1, &data);	// 준비 완료 ack
 80090f6:	2101      	movs	r1, #1
 80090f8:	f240 50cb 	movw	r0, #1483	@ 0x5cb
 80090fc:	f10d 0207 	add.w	r2, sp, #7
		uint8_t data = 0x52;
 8009100:	f88d 3007 	strb.w	r3, [sp, #7]
		canMsgWrite(CAN_ID_ACK, 1, &data);	// 준비 완료 ack
 8009104:	f7ff ffa8 	bl	8009058 <canMsgWrite>
		updateMode++;
 8009108:	7823      	ldrb	r3, [r4, #0]
 800910a:	3301      	adds	r3, #1
 800910c:	7023      	strb	r3, [r4, #0]
}
 800910e:	b002      	add	sp, #8
 8009110:	bd10      	pop	{r4, pc}
 8009112:	bf00      	nop
 8009114:	20000b2c 	.word	0x20000b2c
 8009118:	20000b44 	.word	0x20000b44
 800911c:	20000b38 	.word	0x20000b38

08009120 <ProcessFirmwareMeta>:
void ProcessFirmwareMeta(CAN_RxHeaderTypeDef *rxHeader, uint8_t *rxData) {
 8009120:	b537      	push	{r0, r1, r2, r4, r5, lr}
	fwUpdateState = FW_UPDATE_IN_PROGRESS;
 8009122:	2202      	movs	r2, #2
	update_meta.ecu = rxData[1];
 8009124:	784b      	ldrb	r3, [r1, #1]
 8009126:	4c14      	ldr	r4, [pc, #80]	@ (8009178 <ProcessFirmwareMeta+0x58>)
	flashRead(FLASH_ADDR_FIRM, (uint8_t*) p_meta, sizeof(fw_meta_t));
 8009128:	4d14      	ldr	r5, [pc, #80]	@ (800917c <ProcessFirmwareMeta+0x5c>)
	update_meta.ecu = rxData[1];
 800912a:	7023      	strb	r3, [r4, #0]
	update_meta.version = rxData[2];
 800912c:	788b      	ldrb	r3, [r1, #2]
	flashRead(FLASH_ADDR_FIRM, (uint8_t*) p_meta, sizeof(fw_meta_t));
 800912e:	4814      	ldr	r0, [pc, #80]	@ (8009180 <ProcessFirmwareMeta+0x60>)
	update_meta.version = rxData[2];
 8009130:	7063      	strb	r3, [r4, #1]
	update_meta.size = (rxData[4] << 8) | rxData[3];
 8009132:	f8b1 3003 	ldrh.w	r3, [r1, #3]
	flashRead(FLASH_ADDR_FIRM, (uint8_t*) p_meta, sizeof(fw_meta_t));
 8009136:	4629      	mov	r1, r5
	update_meta.size = (rxData[4] << 8) | rxData[3];
 8009138:	8063      	strh	r3, [r4, #2]
	fwUpdateState = FW_UPDATE_IN_PROGRESS;
 800913a:	4b12      	ldr	r3, [pc, #72]	@ (8009184 <ProcessFirmwareMeta+0x64>)
 800913c:	701a      	strb	r2, [r3, #0]
	flashRead(FLASH_ADDR_FIRM, (uint8_t*) p_meta, sizeof(fw_meta_t));
 800913e:	2208      	movs	r2, #8
 8009140:	f7ff fb1a 	bl	8008778 <flashRead>
	if (update_meta.ecu != p_meta->ecu)						// 내 ecu가 맞는지
 8009144:	7822      	ldrb	r2, [r4, #0]
 8009146:	782b      	ldrb	r3, [r5, #0]
 8009148:	429a      	cmp	r2, r3
 800914a:	d001      	beq.n	8009150 <ProcessFirmwareMeta+0x30>
		Error_Handler();
 800914c:	f7ff ff32 	bl	8008fb4 <Error_Handler>
	if (update_meta.version <= p_meta->version)		// download할 version이 맞는지
 8009150:	7862      	ldrb	r2, [r4, #1]
 8009152:	786b      	ldrb	r3, [r5, #1]
 8009154:	429a      	cmp	r2, r3
 8009156:	d9f9      	bls.n	800914c <ProcessFirmwareMeta+0x2c>
	if (update_meta.size > FLASH_SIZE_FIRM) 	// firmware size over 오류
 8009158:	8863      	ldrh	r3, [r4, #2]
 800915a:	f5b3 4f3c 	cmp.w	r3, #48128	@ 0xbc00
 800915e:	d8f5      	bhi.n	800914c <ProcessFirmwareMeta+0x2c>
	uint8_t data = 0x53;
 8009160:	2353      	movs	r3, #83	@ 0x53
	canMsgWrite(CAN_ID_ACK, 1, &data);
 8009162:	2101      	movs	r1, #1
 8009164:	f240 50cb 	movw	r0, #1483	@ 0x5cb
 8009168:	f10d 0207 	add.w	r2, sp, #7
	uint8_t data = 0x53;
 800916c:	f88d 3007 	strb.w	r3, [sp, #7]
	canMsgWrite(CAN_ID_ACK, 1, &data);
 8009170:	f7ff ff72 	bl	8009058 <canMsgWrite>
}
 8009174:	b003      	add	sp, #12
 8009176:	bd30      	pop	{r4, r5, pc}
 8009178:	20000b1c 	.word	0x20000b1c
 800917c:	20000b24 	.word	0x20000b24
 8009180:	08008000 	.word	0x08008000
 8009184:	20000b49 	.word	0x20000b49

08009188 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8009188:	b500      	push	{lr}
 800918a:	b08b      	sub	sp, #44	@ 0x2c
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK) {
 800918c:	2100      	movs	r1, #0
 800918e:	ab01      	add	r3, sp, #4
 8009190:	aa03      	add	r2, sp, #12
 8009192:	f000 fec3 	bl	8009f1c <HAL_CAN_GetRxMessage>
 8009196:	b108      	cbz	r0, 800919c <HAL_CAN_RxFifo0MsgPendingCallback+0x14>
		Error_Handler();
 8009198:	f7ff ff0c 	bl	8008fb4 <Error_Handler>
	if (rxHeader.StdId == CAN_ID_LIGHT && fwUpdateRequested == 0)
 800919c:	f240 53c9 	movw	r3, #1481	@ 0x5c9
 80091a0:	9a03      	ldr	r2, [sp, #12]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	4b17      	ldr	r3, [pc, #92]	@ (8009204 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80091a6:	d10c      	bne.n	80091c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
 80091a8:	7819      	ldrb	r1, [r3, #0]
 80091aa:	b991      	cbnz	r1, 80091d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
	    change_flag = 1;
 80091ac:	2201      	movs	r2, #1
 80091ae:	4b16      	ldr	r3, [pc, #88]	@ (8009208 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80091b0:	701a      	strb	r2, [r3, #0]
	    memcpy(lightMode, rxData, sizeof(uint8_t) * 8);
 80091b2:	4a16      	ldr	r2, [pc, #88]	@ (800920c <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80091b4:	ab01      	add	r3, sp, #4
 80091b6:	cb03      	ldmia	r3!, {r0, r1}
 80091b8:	6010      	str	r0, [r2, #0]
 80091ba:	6051      	str	r1, [r2, #4]
}
 80091bc:	b00b      	add	sp, #44	@ 0x2c
 80091be:	f85d fb04 	ldr.w	pc, [sp], #4
	else if (rxHeader.StdId == CAN_SID_UPDATE && fwUpdateRequested == 0)
 80091c2:	f5b2 6fd0 	cmp.w	r2, #1664	@ 0x680
 80091c6:	d104      	bne.n	80091d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 80091c8:	7819      	ldrb	r1, [r3, #0]
 80091ca:	b911      	cbnz	r1, 80091d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
		fwUpdateRequested = 1;
 80091cc:	2201      	movs	r2, #1
 80091ce:	701a      	strb	r2, [r3, #0]
 80091d0:	e7f4      	b.n	80091bc <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
	else if (fwUpdateRequested == 1 && rxHeader.StdId == CAN_ID_META)	// meta 수신한다.
 80091d2:	7819      	ldrb	r1, [r3, #0]
 80091d4:	2901      	cmp	r1, #1
 80091d6:	d108      	bne.n	80091ea <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
 80091d8:	f240 6181 	movw	r1, #1665	@ 0x681
 80091dc:	428a      	cmp	r2, r1
 80091de:	d104      	bne.n	80091ea <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
		ProcessFirmwareMeta(&rxHeader, rxData);
 80091e0:	a901      	add	r1, sp, #4
 80091e2:	a803      	add	r0, sp, #12
 80091e4:	f7ff ff9c 	bl	8009120 <ProcessFirmwareMeta>
 80091e8:	e7e8      	b.n	80091bc <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
	else if (fwUpdateRequested == 1 && rxHeader.StdId == CAN_ID_FILE) {
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d1e5      	bne.n	80091bc <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
 80091f0:	f240 638c 	movw	r3, #1676	@ 0x68c
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d1e1      	bne.n	80091bc <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
		MessageBufferPut(&rxHeader, rxData);
 80091f8:	a901      	add	r1, sp, #4
 80091fa:	a803      	add	r0, sp, #12
 80091fc:	f000 f9d8 	bl	80095b0 <MessageBufferPut>
 8009200:	e7dc      	b.n	80091bc <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
 8009202:	bf00      	nop
 8009204:	20000b48 	.word	0x20000b48
 8009208:	20000470 	.word	0x20000470
 800920c:	20000b2d 	.word	0x20000b2d

08009210 <bootVerifyUpdate>:
{
 8009210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t crc = 0xFFFFFFFF;
 8009214:	f04f 34ff 	mov.w	r4, #4294967295
  uint32_t remaining = update_meta.size - sizeof(uint32_t);
 8009218:	f8df 805c 	ldr.w	r8, [pc, #92]	@ 8009278 <bootVerifyUpdate+0x68>
  uint32_t addr = FLASH_ADDR_UPDATE + FLASH_SIZE_META;
 800921c:	4f17      	ldr	r7, [pc, #92]	@ (800927c <bootVerifyUpdate+0x6c>)
  uint32_t remaining = update_meta.size - sizeof(uint32_t);
 800921e:	f8b8 5002 	ldrh.w	r5, [r8, #2]
          crc = (crc >> 8) ^ crc_table[(crc ^ buf[i]) & 0xFF];
 8009222:	f8df 905c 	ldr.w	r9, [pc, #92]	@ 8009280 <bootVerifyUpdate+0x70>
{
 8009226:	b0a1      	sub	sp, #132	@ 0x84
  uint32_t remaining = update_meta.size - sizeof(uint32_t);
 8009228:	3d04      	subs	r5, #4
  while (remaining)
 800922a:	b945      	cbnz	r5, 800923e <bootVerifyUpdate+0x2e>
  crc ^= 0xFFFFFFFF;
 800922c:	43e4      	mvns	r4, r4
  return (update_meta.crc == crc) ? 0 : 1;
 800922e:	f8d8 0004 	ldr.w	r0, [r8, #4]
}
 8009232:	1b00      	subs	r0, r0, r4
 8009234:	bf18      	it	ne
 8009236:	2001      	movne	r0, #1
 8009238:	b021      	add	sp, #132	@ 0x84
 800923a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      uint32_t chunk = remaining > sizeof(buf) ? sizeof(buf) : remaining;
 800923e:	2d80      	cmp	r5, #128	@ 0x80
 8009240:	462e      	mov	r6, r5
 8009242:	bf28      	it	cs
 8009244:	2680      	movcs	r6, #128	@ 0x80
      if (!flashRead(addr, buf, chunk))
 8009246:	4669      	mov	r1, sp
 8009248:	4632      	mov	r2, r6
 800924a:	4638      	mov	r0, r7
 800924c:	f7ff fa94 	bl	8008778 <flashRead>
 8009250:	b178      	cbz	r0, 8009272 <bootVerifyUpdate+0x62>
      for (uint32_t i = 0; i < chunk; i++)
 8009252:	4669      	mov	r1, sp
 8009254:	2200      	movs	r2, #0
          crc = (crc >> 8) ^ crc_table[(crc ^ buf[i]) & 0xFF];
 8009256:	f811 3b01 	ldrb.w	r3, [r1], #1
      for (uint32_t i = 0; i < chunk; i++)
 800925a:	3201      	adds	r2, #1
          crc = (crc >> 8) ^ crc_table[(crc ^ buf[i]) & 0xFF];
 800925c:	4063      	eors	r3, r4
 800925e:	b2db      	uxtb	r3, r3
 8009260:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
      for (uint32_t i = 0; i < chunk; i++)
 8009264:	4296      	cmp	r6, r2
          crc = (crc >> 8) ^ crc_table[(crc ^ buf[i]) & 0xFF];
 8009266:	ea83 2414 	eor.w	r4, r3, r4, lsr #8
      for (uint32_t i = 0; i < chunk; i++)
 800926a:	d1f4      	bne.n	8009256 <bootVerifyUpdate+0x46>
      addr      += chunk;
 800926c:	4437      	add	r7, r6
      remaining -= chunk;
 800926e:	1bad      	subs	r5, r5, r6
 8009270:	e7db      	b.n	800922a <bootVerifyUpdate+0x1a>
          Error_Handler();
 8009272:	f7ff fe9f 	bl	8008fb4 <Error_Handler>
 8009276:	bf00      	nop
 8009278:	20000b1c 	.word	0x20000b1c
 800927c:	08014400 	.word	0x08014400
 8009280:	0800b654 	.word	0x0800b654

08009284 <FirmwareUpdateStateMachine>:
void FirmwareUpdateStateMachine(void) {
 8009284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (fwUpdateState) {
 8009288:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800942c <FirmwareUpdateStateMachine+0x1a8>
void FirmwareUpdateStateMachine(void) {
 800928c:	b08d      	sub	sp, #52	@ 0x34
	switch (fwUpdateState) {
 800928e:	f898 3000 	ldrb.w	r3, [r8]
 8009292:	2b02      	cmp	r3, #2
 8009294:	d00e      	beq.n	80092b4 <FirmwareUpdateStateMachine+0x30>
 8009296:	2b03      	cmp	r3, #3
 8009298:	f000 8094 	beq.w	80093c4 <FirmwareUpdateStateMachine+0x140>
 800929c:	2b00      	cmp	r3, #0
 800929e:	f040 80c1 	bne.w	8009424 <FirmwareUpdateStateMachine+0x1a0>
		if (fwUpdateRequested) {
 80092a2:	4b63      	ldr	r3, [pc, #396]	@ (8009430 <FirmwareUpdateStateMachine+0x1ac>)
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d075      	beq.n	8009396 <FirmwareUpdateStateMachine+0x112>
}
 80092aa:	b00d      	add	sp, #52	@ 0x34
 80092ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			StartFirmwareUpdate();
 80092b0:	f7ff bf16 	b.w	80090e0 <StartFirmwareUpdate>
				(totalSize - fwUpdateReceivedBytes >= BLOCK_SIZE_BYTES) ?
 80092b4:	4b5f      	ldr	r3, [pc, #380]	@ (8009434 <FirmwareUpdateStateMachine+0x1b0>)
 80092b6:	4f60      	ldr	r7, [pc, #384]	@ (8009438 <FirmwareUpdateStateMachine+0x1b4>)
 80092b8:	885b      	ldrh	r3, [r3, #2]
 80092ba:	683e      	ldr	r6, [r7, #0]
 80092bc:	9301      	str	r3, [sp, #4]
 80092be:	1b9e      	subs	r6, r3, r6
		uint32_t thisBlockSize =
 80092c0:	f5b6 5f80 	cmp.w	r6, #4096	@ 0x1000
 80092c4:	bf28      	it	cs
 80092c6:	f44f 5680 	movcs.w	r6, #4096	@ 0x1000
		if (MessageBufferIsFull()
 80092ca:	f000 f943 	bl	8009554 <MessageBufferIsFull>
 80092ce:	b920      	cbnz	r0, 80092da <FirmwareUpdateStateMachine+0x56>
				|| ((thisBlockSize + fwUpdateReceivedBytes) == totalSize)) {
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	9a01      	ldr	r2, [sp, #4]
 80092d4:	4433      	add	r3, r6
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d15d      	bne.n	8009396 <FirmwareUpdateStateMachine+0x112>
			while (thisBlockSize > blockReceivedBytes) {
 80092da:	f8df 9160 	ldr.w	r9, [pc, #352]	@ 800943c <FirmwareUpdateStateMachine+0x1b8>
 80092de:	e011      	b.n	8009304 <FirmwareUpdateStateMachine+0x80>
				if (!MessageBufferIsEmpty()) {
 80092e0:	f000 f958 	bl	8009594 <MessageBufferIsEmpty>
 80092e4:	4604      	mov	r4, r0
 80092e6:	b968      	cbnz	r0, 8009304 <FirmwareUpdateStateMachine+0x80>
					MessageBufferGet(&rxHeader, rxData);
 80092e8:	a903      	add	r1, sp, #12
 80092ea:	a805      	add	r0, sp, #20
 80092ec:	f000 f988 	bl	8009600 <MessageBufferGet>
					dataLength = rxHeader.DLC;
 80092f0:	f89d a024 	ldrb.w	sl, [sp, #36]	@ 0x24
					HAL_FLASH_Unlock();
 80092f4:	f001 f93e 	bl	800a574 <HAL_FLASH_Unlock>
						if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 80092f8:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8009440 <FirmwareUpdateStateMachine+0x1bc>
					for (uint8_t i = 0; i < dataLength; i += 2) {
 80092fc:	4554      	cmp	r4, sl
 80092fe:	d324      	bcc.n	800934a <FirmwareUpdateStateMachine+0xc6>
					HAL_FLASH_Lock();
 8009300:	f001 f94a 	bl	800a598 <HAL_FLASH_Lock>
			while (thisBlockSize > blockReceivedBytes) {
 8009304:	f8d9 3000 	ldr.w	r3, [r9]
 8009308:	42b3      	cmp	r3, r6
 800930a:	d3e9      	bcc.n	80092e0 <FirmwareUpdateStateMachine+0x5c>
			if (fwUpdateReceivedBytes == totalSize) {
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	9a01      	ldr	r2, [sp, #4]
 8009310:	429a      	cmp	r2, r3
 8009312:	d10d      	bne.n	8009330 <FirmwareUpdateStateMachine+0xac>
				flashRead(currentAddress - sizeof(uint32_t), data, sizeof(uint32_t));
 8009314:	4b4a      	ldr	r3, [pc, #296]	@ (8009440 <FirmwareUpdateStateMachine+0x1bc>)
 8009316:	2204      	movs	r2, #4
 8009318:	6818      	ldr	r0, [r3, #0]
 800931a:	a902      	add	r1, sp, #8
 800931c:	3804      	subs	r0, #4
 800931e:	f7ff fa2b 	bl	8008778 <flashRead>
				update_meta.crc = (data[0] << 24) | (data[1] << 16)
 8009322:	9b02      	ldr	r3, [sp, #8]
 8009324:	4a43      	ldr	r2, [pc, #268]	@ (8009434 <FirmwareUpdateStateMachine+0x1b0>)
 8009326:	ba1b      	rev	r3, r3
 8009328:	6053      	str	r3, [r2, #4]
				fwUpdateState = FW_UPDATE_COMPLETE;
 800932a:	2303      	movs	r3, #3
 800932c:	f888 3000 	strb.w	r3, [r8]
			blockReceivedBytes = 0;
 8009330:	2300      	movs	r3, #0
 8009332:	f8c9 3000 	str.w	r3, [r9]
			MessageBufferFlush();
 8009336:	f000 f923 	bl	8009580 <MessageBufferFlush>
			uint8_t data = 0x54;
 800933a:	2354      	movs	r3, #84	@ 0x54
			canMsgWrite(CAN_ID_ACK, 8, &data);
 800933c:	2108      	movs	r1, #8
 800933e:	f240 50cb 	movw	r0, #1483	@ 0x5cb
			uint8_t data = 0x54;
 8009342:	f88d 3008 	strb.w	r3, [sp, #8]
			canMsgWrite(CAN_ID_ACK, 8, &data);
 8009346:	aa02      	add	r2, sp, #8
 8009348:	e023      	b.n	8009392 <FirmwareUpdateStateMachine+0x10e>
						if (i + 1 < dataLength) {
 800934a:	1c65      	adds	r5, r4, #1
						uint16_t data16 = rxData[i];
 800934c:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8009350:	446b      	add	r3, sp
						if (i + 1 < dataLength) {
 8009352:	4555      	cmp	r5, sl
						uint16_t data16 = rxData[i];
 8009354:	f813 2c24 	ldrb.w	r2, [r3, #-36]
							data16 |= rxData[i + 1] << 8;
 8009358:	bfbe      	ittt	lt
 800935a:	f105 0330 	addlt.w	r3, r5, #48	@ 0x30
 800935e:	446b      	addlt	r3, sp
 8009360:	f813 3c24 	ldrblt.w	r3, [r3, #-36]
						if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8009364:	f04f 0001 	mov.w	r0, #1
							data16 |= rxData[i + 1] << 8;
 8009368:	bfb8      	it	lt
 800936a:	ea42 2203 	orrlt.w	r2, r2, r3, lsl #8
						if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 800936e:	f8db 1000 	ldr.w	r1, [fp]
 8009372:	2300      	movs	r3, #0
 8009374:	f001 f944 	bl	800a600 <HAL_FLASH_Program>
 8009378:	b180      	cbz	r0, 800939c <FirmwareUpdateStateMachine+0x118>
							HAL_FLASH_Lock();
 800937a:	f001 f90d 	bl	800a598 <HAL_FLASH_Lock>
							fwUpdateRequested = 0;
 800937e:	f04f 0200 	mov.w	r2, #0
							canMsgWrite(CAN_ID_NACK, 1, TxData); // flash wirte 오류 nack
 8009382:	2101      	movs	r1, #1
 8009384:	f240 50cc 	movw	r0, #1484	@ 0x5cc
							fwUpdateRequested = 0;
 8009388:	4b29      	ldr	r3, [pc, #164]	@ (8009430 <FirmwareUpdateStateMachine+0x1ac>)
							fwUpdateState = FW_UPDATE_IDLE;
 800938a:	f888 2000 	strb.w	r2, [r8]
							fwUpdateRequested = 0;
 800938e:	701a      	strb	r2, [r3, #0]
							canMsgWrite(CAN_ID_NACK, 1, TxData); // flash wirte 오류 nack
 8009390:	4a2c      	ldr	r2, [pc, #176]	@ (8009444 <FirmwareUpdateStateMachine+0x1c0>)
			canMsgWrite(CAN_ID_ACK, 8, &data);
 8009392:	f7ff fe61 	bl	8009058 <canMsgWrite>
}
 8009396:	b00d      	add	sp, #52	@ 0x34
 8009398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						currentAddress += (i + 1 < dataLength) ? 2 : 1;
 800939c:	4555      	cmp	r5, sl
 800939e:	bfac      	ite	ge
 80093a0:	2501      	movge	r5, #1
 80093a2:	2502      	movlt	r5, #2
 80093a4:	f8db 3000 	ldr.w	r3, [fp]
					for (uint8_t i = 0; i < dataLength; i += 2) {
 80093a8:	3402      	adds	r4, #2
						currentAddress += (i + 1 < dataLength) ? 2 : 1;
 80093aa:	442b      	add	r3, r5
 80093ac:	f8cb 3000 	str.w	r3, [fp]
						fwUpdateReceivedBytes += (i + 1 < dataLength) ? 2 : 1;
 80093b0:	683b      	ldr	r3, [r7, #0]
					for (uint8_t i = 0; i < dataLength; i += 2) {
 80093b2:	b2e4      	uxtb	r4, r4
						fwUpdateReceivedBytes += (i + 1 < dataLength) ? 2 : 1;
 80093b4:	442b      	add	r3, r5
 80093b6:	603b      	str	r3, [r7, #0]
						blockReceivedBytes += (i + 1 < dataLength) ? 2 : 1;
 80093b8:	f8d9 3000 	ldr.w	r3, [r9]
 80093bc:	442b      	add	r3, r5
 80093be:	f8c9 3000 	str.w	r3, [r9]
					for (uint8_t i = 0; i < dataLength; i += 2) {
 80093c2:	e79b      	b.n	80092fc <FirmwareUpdateStateMachine+0x78>
		if(bootVerifyUpdate())
 80093c4:	f7ff ff24 	bl	8009210 <bootVerifyUpdate>
 80093c8:	b108      	cbz	r0, 80093ce <FirmwareUpdateStateMachine+0x14a>
			Error_Handler();
 80093ca:	f7ff fdf3 	bl	8008fb4 <Error_Handler>
		if(flashErase(FLASH_ADDR_UPDATE, sizeof(fw_meta_t)) != true)
 80093ce:	2108      	movs	r1, #8
 80093d0:	481d      	ldr	r0, [pc, #116]	@ (8009448 <FirmwareUpdateStateMachine+0x1c4>)
 80093d2:	f7ff f95f 	bl	8008694 <flashErase>
 80093d6:	2800      	cmp	r0, #0
 80093d8:	d0f7      	beq.n	80093ca <FirmwareUpdateStateMachine+0x146>
		if(flashWrite(FLASH_ADDR_UPDATE, (uint8_t *)&update_meta, sizeof(fw_meta_t)) != true)
 80093da:	2208      	movs	r2, #8
 80093dc:	4915      	ldr	r1, [pc, #84]	@ (8009434 <FirmwareUpdateStateMachine+0x1b0>)
 80093de:	481a      	ldr	r0, [pc, #104]	@ (8009448 <FirmwareUpdateStateMachine+0x1c4>)
 80093e0:	f7ff f9a6 	bl	8008730 <flashWrite>
 80093e4:	2800      	cmp	r0, #0
 80093e6:	d0f0      	beq.n	80093ca <FirmwareUpdateStateMachine+0x146>
		uint8_t data = 0x55;
 80093e8:	2355      	movs	r3, #85	@ 0x55
		canMsgWrite(CAN_ID_ACK, 8, &data);
 80093ea:	2108      	movs	r1, #8
 80093ec:	f240 50cb 	movw	r0, #1483	@ 0x5cb
 80093f0:	aa03      	add	r2, sp, #12
		uint8_t data = 0x55;
 80093f2:	f88d 300c 	strb.w	r3, [sp, #12]
		canMsgWrite(CAN_ID_ACK, 8, &data);
 80093f6:	f7ff fe2f 	bl	8009058 <canMsgWrite>
		HAL_PWR_EnableBkUpAccess();
 80093fa:	f001 faa3 	bl	800a944 <HAL_PWR_EnableBkUpAccess>
		__HAL_RCC_BKP_CLK_ENABLE();
 80093fe:	4b13      	ldr	r3, [pc, #76]	@ (800944c <FirmwareUpdateStateMachine+0x1c8>)
		HAL_Delay(1000);
 8009400:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		__HAL_RCC_BKP_CLK_ENABLE();
 8009404:	69da      	ldr	r2, [r3, #28]
 8009406:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800940a:	61da      	str	r2, [r3, #28]
		BOOT_FLAG_ADDR = BOOT_FLAG_UPDATE;
 800940c:	2202      	movs	r2, #2
		__HAL_RCC_BKP_CLK_ENABLE();
 800940e:	69db      	ldr	r3, [r3, #28]
 8009410:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009414:	9305      	str	r3, [sp, #20]
 8009416:	9b05      	ldr	r3, [sp, #20]
		BOOT_FLAG_ADDR = BOOT_FLAG_UPDATE;
 8009418:	4b0d      	ldr	r3, [pc, #52]	@ (8009450 <FirmwareUpdateStateMachine+0x1cc>)
 800941a:	605a      	str	r2, [r3, #4]
		HAL_Delay(1000);
 800941c:	f000 fbfc 	bl	8009c18 <HAL_Delay>
		NVIC_SystemReset();
 8009420:	f7ff fdaa 	bl	8008f78 <__NVIC_SystemReset>
		fwUpdateState = FW_UPDATE_IDLE;
 8009424:	2300      	movs	r3, #0
 8009426:	f888 3000 	strb.w	r3, [r8]
		break;
 800942a:	e7b4      	b.n	8009396 <FirmwareUpdateStateMachine+0x112>
 800942c:	20000b49 	.word	0x20000b49
 8009430:	20000b48 	.word	0x20000b48
 8009434:	20000b1c 	.word	0x20000b1c
 8009438:	20000b44 	.word	0x20000b44
 800943c:	20000b38 	.word	0x20000b38
 8009440:	2000000c 	.word	0x2000000c
 8009444:	20000b3c 	.word	0x20000b3c
 8009448:	08014000 	.word	0x08014000
 800944c:	40021000 	.word	0x40021000
 8009450:	40006c00 	.word	0x40006c00

08009454 <main>:
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b08c      	sub	sp, #48	@ 0x30
  HAL_Init();
 8009458:	f000 fbba 	bl	8009bd0 <HAL_Init>
  SystemClock_Config();
 800945c:	f7ff fdd0 	bl	8009000 <SystemClock_Config>
	NVIC_Config();
 8009460:	f7ff fd9c 	bl	8008f9c <NVIC_Config>
	HAL_PWR_EnableBkUpAccess();
 8009464:	f001 fa6e 	bl	800a944 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_BKP_CLK_ENABLE();
 8009468:	4b33      	ldr	r3, [pc, #204]	@ (8009538 <main+0xe4>)
	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 800946a:	4c34      	ldr	r4, [pc, #208]	@ (800953c <main+0xe8>)
	__HAL_RCC_BKP_CLK_ENABLE();
 800946c:	69da      	ldr	r2, [r3, #28]
 800946e:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8009472:	61da      	str	r2, [r3, #28]
 8009474:	69db      	ldr	r3, [r3, #28]
 8009476:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800947a:	9301      	str	r3, [sp, #4]
 800947c:	9b01      	ldr	r3, [sp, #4]
  MX_GPIO_Init();
 800947e:	f7ff f983 	bl	8008788 <MX_GPIO_Init>
  MX_DMA_Init();
 8009482:	f7ff f8cb 	bl	800861c <MX_DMA_Init>
  MX_CAN_Init();
 8009486:	f7ff f861 	bl	800854c <MX_CAN_Init>
  MX_USART2_UART_Init();
 800948a:	f000 fb0b 	bl	8009aa4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800948e:	f000 fa35 	bl	80098fc <MX_TIM1_Init>
  MX_TIM2_Init();
 8009492:	f000 fa85 	bl	80099a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8009496:	f000 fabb 	bl	8009a10 <MX_TIM3_Init>
	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 800949a:	4620      	mov	r0, r4
 800949c:	f000 fcb9 	bl	8009e12 <HAL_CAN_Start>
 80094a0:	b108      	cbz	r0, 80094a6 <main+0x52>
		Error_Handler();
 80094a2:	f7ff fd87 	bl	8008fb4 <Error_Handler>
	  canFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80094a6:	2501      	movs	r5, #1
	__HAL_CAN_CLEAR_FLAG(&hcan, CAN_FLAG_FOV1);
 80094a8:	2610      	movs	r6, #16
 80094aa:	6823      	ldr	r3, [r4, #0]
	  canFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80094ac:	e9cd 0006 	strd	r0, r0, [sp, #24]
	  canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80094b0:	e9cd 0508 	strd	r0, r5, [sp, #32]
	  canFilterConfig.FilterIdLow = 0x0000;
 80094b4:	e9cd 0002 	strd	r0, r0, [sp, #8]
	  canFilterConfig.FilterMaskIdLow = 0x0000;
 80094b8:	e9cd 0004 	strd	r0, r0, [sp, #16]
	  canFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80094bc:	950a      	str	r5, [sp, #40]	@ 0x28
	if (HAL_CAN_ConfigFilter(&hcan, &canFilterConfig) != HAL_OK) {
 80094be:	4620      	mov	r0, r4
	__HAL_CAN_CLEAR_FLAG(&hcan, CAN_FLAG_FOV1);
 80094c0:	611e      	str	r6, [r3, #16]
	if (HAL_CAN_ConfigFilter(&hcan, &canFilterConfig) != HAL_OK) {
 80094c2:	a902      	add	r1, sp, #8
 80094c4:	f000 fc35 	bl	8009d32 <HAL_CAN_ConfigFilter>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	d1ea      	bne.n	80094a2 <main+0x4e>
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 80094cc:	2102      	movs	r1, #2
 80094ce:	4620      	mov	r0, r4
 80094d0:	f000 fda0 	bl	800a014 <HAL_CAN_ActivateNotification>
 80094d4:	4601      	mov	r1, r0
 80094d6:	2800      	cmp	r0, #0
 80094d8:	d1e3      	bne.n	80094a2 <main+0x4e>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80094da:	4819      	ldr	r0, [pc, #100]	@ (8009540 <main+0xec>)
 80094dc:	f001 fef6 	bl	800b2cc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80094e0:	2108      	movs	r1, #8
 80094e2:	4817      	ldr	r0, [pc, #92]	@ (8009540 <main+0xec>)
 80094e4:	f001 fef2 	bl	800b2cc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80094e8:	210c      	movs	r1, #12
 80094ea:	4815      	ldr	r0, [pc, #84]	@ (8009540 <main+0xec>)
 80094ec:	f001 feee 	bl	800b2cc <HAL_TIM_PWM_Start>
	flashInit();
 80094f0:	f7ff f8bc 	bl	800866c <flashInit>
    light_init();
 80094f4:	f7ff fb5a 	bl	8008bac <light_init>
    LCORNER_ON();
 80094f8:	462a      	mov	r2, r5
 80094fa:	4631      	mov	r1, r6
 80094fc:	4811      	ldr	r0, [pc, #68]	@ (8009544 <main+0xf0>)
 80094fe:	f001 fa0f 	bl	800a920 <HAL_GPIO_WritePin>
    set_lowbeam(120);
 8009502:	2078      	movs	r0, #120	@ 0x78
 8009504:	f7ff fae8 	bl	8008ad8 <set_lowbeam>
	  if(change_flag == 1 && !fwUpdateRequested){
 8009508:	4c0f      	ldr	r4, [pc, #60]	@ (8009548 <main+0xf4>)
 800950a:	4d10      	ldr	r5, [pc, #64]	@ (800954c <main+0xf8>)
		  change_light(lightMode);
 800950c:	4e10      	ldr	r6, [pc, #64]	@ (8009550 <main+0xfc>)
	  if(change_flag == 1 && !fwUpdateRequested){
 800950e:	7823      	ldrb	r3, [r4, #0]
 8009510:	2b01      	cmp	r3, #1
 8009512:	d10b      	bne.n	800952c <main+0xd8>
 8009514:	782b      	ldrb	r3, [r5, #0]
 8009516:	f003 07ff 	and.w	r7, r3, #255	@ 0xff
 800951a:	b93b      	cbnz	r3, 800952c <main+0xd8>
		  change_light(lightMode);
 800951c:	4630      	mov	r0, r6
 800951e:	f7ff fd17 	bl	8008f50 <change_light>
		  HAL_Delay(100);
 8009522:	2064      	movs	r0, #100	@ 0x64
 8009524:	f000 fb78 	bl	8009c18 <HAL_Delay>
		  change_flag = 0;
 8009528:	7027      	strb	r7, [r4, #0]
 800952a:	e7f0      	b.n	800950e <main+0xba>
	  else if (fwUpdateRequested)
 800952c:	782b      	ldrb	r3, [r5, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d0ed      	beq.n	800950e <main+0xba>
		  FirmwareUpdateStateMachine();
 8009532:	f7ff fea7 	bl	8009284 <FirmwareUpdateStateMachine>
 8009536:	e7ea      	b.n	800950e <main+0xba>
 8009538:	40021000 	.word	0x40021000
 800953c:	2000003c 	.word	0x2000003c
 8009540:	20001e44 	.word	0x20001e44
 8009544:	40010c00 	.word	0x40010c00
 8009548:	20000470 	.word	0x20000470
 800954c:	20000b48 	.word	0x20000b48
 8009550:	20000b2d 	.word	0x20000b2d

08009554 <MessageBufferIsFull>:
volatile uint16_t messageBufferHead = 0;
volatile uint16_t messageBufferTail = 0;

uint8_t MessageBufferIsFull()
{
    return (((messageBufferHead + 1) % MESSAGE_BUFFER_SIZE) == messageBufferTail);
 8009554:	4a08      	ldr	r2, [pc, #32]	@ (8009578 <MessageBufferIsFull+0x24>)
 8009556:	4b09      	ldr	r3, [pc, #36]	@ (800957c <MessageBufferIsFull+0x28>)
 8009558:	881b      	ldrh	r3, [r3, #0]
 800955a:	8810      	ldrh	r0, [r2, #0]
 800955c:	f240 2201 	movw	r2, #513	@ 0x201
 8009560:	b29b      	uxth	r3, r3
 8009562:	3301      	adds	r3, #1
 8009564:	fbb3 f2f2 	udiv	r2, r3, r2
 8009568:	eb02 2242 	add.w	r2, r2, r2, lsl #9
 800956c:	b280      	uxth	r0, r0
 800956e:	1a9b      	subs	r3, r3, r2
}
 8009570:	1a1b      	subs	r3, r3, r0
 8009572:	4258      	negs	r0, r3
 8009574:	4158      	adcs	r0, r3
 8009576:	4770      	bx	lr
 8009578:	20000b68 	.word	0x20000b68
 800957c:	20000b6a 	.word	0x20000b6a

08009580 <MessageBufferFlush>:


void MessageBufferFlush(void)
{
	messageBufferTail = 0;
 8009580:	2300      	movs	r3, #0
 8009582:	4a02      	ldr	r2, [pc, #8]	@ (800958c <MessageBufferFlush+0xc>)
 8009584:	8013      	strh	r3, [r2, #0]
	messageBufferHead = 0;
 8009586:	4a02      	ldr	r2, [pc, #8]	@ (8009590 <MessageBufferFlush+0x10>)
 8009588:	8013      	strh	r3, [r2, #0]
}
 800958a:	4770      	bx	lr
 800958c:	20000b68 	.word	0x20000b68
 8009590:	20000b6a 	.word	0x20000b6a

08009594 <MessageBufferIsEmpty>:


uint8_t MessageBufferIsEmpty(void)
{
	return messageBufferHead == messageBufferTail;
 8009594:	4b04      	ldr	r3, [pc, #16]	@ (80095a8 <MessageBufferIsEmpty+0x14>)
 8009596:	8818      	ldrh	r0, [r3, #0]
 8009598:	4b04      	ldr	r3, [pc, #16]	@ (80095ac <MessageBufferIsEmpty+0x18>)
 800959a:	b280      	uxth	r0, r0
 800959c:	881b      	ldrh	r3, [r3, #0]
 800959e:	b29b      	uxth	r3, r3
}
 80095a0:	1ac3      	subs	r3, r0, r3
 80095a2:	4258      	negs	r0, r3
 80095a4:	4158      	adcs	r0, r3
 80095a6:	4770      	bx	lr
 80095a8:	20000b6a 	.word	0x20000b6a
 80095ac:	20000b68 	.word	0x20000b68

080095b0 <MessageBufferPut>:

void MessageBufferPut(CAN_RxHeaderTypeDef *rxHeader, uint8_t *rxData)
{
 80095b0:	b570      	push	{r4, r5, r6, lr}
 80095b2:	4606      	mov	r6, r0
    if (!MessageBufferIsFull())
 80095b4:	f7ff ffce 	bl	8009554 <MessageBufferIsFull>
 80095b8:	b9e8      	cbnz	r0, 80095f6 <MessageBufferPut+0x46>
    {
        messageBuffer[messageBufferHead].len = rxHeader->DLC;
 80095ba:	4c0f      	ldr	r4, [pc, #60]	@ (80095f8 <MessageBufferPut+0x48>)
 80095bc:	6932      	ldr	r2, [r6, #16]
 80095be:	8823      	ldrh	r3, [r4, #0]
 80095c0:	4d0e      	ldr	r5, [pc, #56]	@ (80095fc <MessageBufferPut+0x4c>)
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80095c8:	54ea      	strb	r2, [r5, r3]
        memcpy(messageBuffer[messageBufferHead].rxData, rxData, 8);
 80095ca:	8823      	ldrh	r3, [r4, #0]
 80095cc:	680a      	ldr	r2, [r1, #0]
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80095d4:	3301      	adds	r3, #1
 80095d6:	50ea      	str	r2, [r5, r3]
 80095d8:	684a      	ldr	r2, [r1, #4]
 80095da:	1958      	adds	r0, r3, r5
 80095dc:	6042      	str	r2, [r0, #4]
        messageBufferHead = (messageBufferHead + 1) % MESSAGE_BUFFER_SIZE;
 80095de:	f240 2201 	movw	r2, #513	@ 0x201
 80095e2:	8823      	ldrh	r3, [r4, #0]
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	3301      	adds	r3, #1
 80095e8:	fbb3 f2f2 	udiv	r2, r3, r2
 80095ec:	eb02 2242 	add.w	r2, r2, r2, lsl #9
 80095f0:	1a9b      	subs	r3, r3, r2
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	8023      	strh	r3, [r4, #0]
    }
}
 80095f6:	bd70      	pop	{r4, r5, r6, pc}
 80095f8:	20000b6a 	.word	0x20000b6a
 80095fc:	20000b6c 	.word	0x20000b6c

08009600 <MessageBufferGet>:

void MessageBufferGet(CAN_RxHeaderTypeDef *rxHeader, uint8_t *rxData)
{
 8009600:	b538      	push	{r3, r4, r5, lr}
 8009602:	4605      	mov	r5, r0
    if (!MessageBufferIsEmpty())
 8009604:	f7ff ffc6 	bl	8009594 <MessageBufferIsEmpty>
 8009608:	b9e8      	cbnz	r0, 8009646 <MessageBufferGet+0x46>
    {
        rxHeader->DLC = messageBuffer[messageBufferTail].len;
 800960a:	4c0f      	ldr	r4, [pc, #60]	@ (8009648 <MessageBufferGet+0x48>)
 800960c:	4a0f      	ldr	r2, [pc, #60]	@ (800964c <MessageBufferGet+0x4c>)
 800960e:	8823      	ldrh	r3, [r4, #0]
 8009610:	b29b      	uxth	r3, r3
 8009612:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8009616:	5cd3      	ldrb	r3, [r2, r3]
 8009618:	612b      	str	r3, [r5, #16]
        memcpy(rxData, messageBuffer[messageBufferTail].rxData, 8);
 800961a:	8823      	ldrh	r3, [r4, #0]
 800961c:	b29b      	uxth	r3, r3
 800961e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8009622:	3301      	adds	r3, #1
 8009624:	1898      	adds	r0, r3, r2
 8009626:	58d3      	ldr	r3, [r2, r3]
        messageBufferTail = (messageBufferTail + 1) % MESSAGE_BUFFER_SIZE;
 8009628:	f240 2201 	movw	r2, #513	@ 0x201
        memcpy(rxData, messageBuffer[messageBufferTail].rxData, 8);
 800962c:	600b      	str	r3, [r1, #0]
 800962e:	6843      	ldr	r3, [r0, #4]
 8009630:	604b      	str	r3, [r1, #4]
        messageBufferTail = (messageBufferTail + 1) % MESSAGE_BUFFER_SIZE;
 8009632:	8823      	ldrh	r3, [r4, #0]
 8009634:	b29b      	uxth	r3, r3
 8009636:	3301      	adds	r3, #1
 8009638:	fbb3 f2f2 	udiv	r2, r3, r2
 800963c:	eb02 2242 	add.w	r2, r2, r2, lsl #9
 8009640:	1a9b      	subs	r3, r3, r2
 8009642:	b29b      	uxth	r3, r3
 8009644:	8023      	strh	r3, [r4, #0]
    }
}
 8009646:	bd38      	pop	{r3, r4, r5, pc}
 8009648:	20000b68 	.word	0x20000b68
 800964c:	20000b6c 	.word	0x20000b6c

08009650 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8009650:	4b0e      	ldr	r3, [pc, #56]	@ (800968c <HAL_MspInit+0x3c>)
{
 8009652:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8009654:	699a      	ldr	r2, [r3, #24]
 8009656:	f042 0201 	orr.w	r2, r2, #1
 800965a:	619a      	str	r2, [r3, #24]
 800965c:	699a      	ldr	r2, [r3, #24]
 800965e:	f002 0201 	and.w	r2, r2, #1
 8009662:	9200      	str	r2, [sp, #0]
 8009664:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009666:	69da      	ldr	r2, [r3, #28]
 8009668:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800966c:	61da      	str	r2, [r3, #28]
 800966e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8009670:	4a07      	ldr	r2, [pc, #28]	@ (8009690 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8009672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009676:	9301      	str	r3, [sp, #4]
 8009678:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800967a:	6853      	ldr	r3, [r2, #4]
 800967c:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8009680:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009684:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009686:	b002      	add	sp, #8
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	40021000 	.word	0x40021000
 8009690:	40010000 	.word	0x40010000

08009694 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009694:	e7fe      	b.n	8009694 <NMI_Handler>

08009696 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009696:	e7fe      	b.n	8009696 <HardFault_Handler>

08009698 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009698:	e7fe      	b.n	8009698 <MemManage_Handler>

0800969a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800969a:	e7fe      	b.n	800969a <BusFault_Handler>

0800969c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800969c:	e7fe      	b.n	800969c <UsageFault_Handler>

0800969e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800969e:	4770      	bx	lr

080096a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80096a0:	4770      	bx	lr

080096a2 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80096a2:	4770      	bx	lr

080096a4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80096a4:	f000 baa6 	b.w	8009bf4 <HAL_IncTick>

080096a8 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 80096a8:	4801      	ldr	r0, [pc, #4]	@ (80096b0 <DMA1_Channel3_IRQHandler+0x8>)
 80096aa:	f000 bea7 	b.w	800a3fc <HAL_DMA_IRQHandler>
 80096ae:	bf00      	nop
 80096b0:	20001e00 	.word	0x20001e00

080096b4 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80096b4:	4801      	ldr	r0, [pc, #4]	@ (80096bc <DMA1_Channel6_IRQHandler+0x8>)
 80096b6:	f000 bea1 	b.w	800a3fc <HAL_DMA_IRQHandler>
 80096ba:	bf00      	nop
 80096bc:	20001d78 	.word	0x20001d78

080096c0 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 80096c0:	4801      	ldr	r0, [pc, #4]	@ (80096c8 <DMA1_Channel7_IRQHandler+0x8>)
 80096c2:	f000 be9b 	b.w	800a3fc <HAL_DMA_IRQHandler>
 80096c6:	bf00      	nop
 80096c8:	20001dbc 	.word	0x20001dbc

080096cc <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80096cc:	4801      	ldr	r0, [pc, #4]	@ (80096d4 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80096ce:	f000 bcbe 	b.w	800a04e <HAL_CAN_IRQHandler>
 80096d2:	bf00      	nop
 80096d4:	2000003c 	.word	0x2000003c

080096d8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80096d8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80096dc:	f001 b926 	b.w	800a92c <HAL_GPIO_EXTI_IRQHandler>

080096e0 <SystemInit>:
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 80096e0:	4b01      	ldr	r3, [pc, #4]	@ (80096e8 <SystemInit+0x8>)
 80096e2:	4a02      	ldr	r2, [pc, #8]	@ (80096ec <SystemInit+0xc>)
 80096e4:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80096e6:	4770      	bx	lr
 80096e8:	e000ed00 	.word	0xe000ed00
 80096ec:	08008400 	.word	0x08008400

080096f0 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim3);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80096f0:	b530      	push	{r4, r5, lr}

  if(tim_pwmHandle->Instance==TIM1)
 80096f2:	6803      	ldr	r3, [r0, #0]
 80096f4:	4a40      	ldr	r2, [pc, #256]	@ (80097f8 <HAL_TIM_PWM_MspInit+0x108>)
{
 80096f6:	4605      	mov	r5, r0
  if(tim_pwmHandle->Instance==TIM1)
 80096f8:	4293      	cmp	r3, r2
{
 80096fa:	b085      	sub	sp, #20
  if(tim_pwmHandle->Instance==TIM1)
 80096fc:	d127      	bne.n	800974e <HAL_TIM_PWM_MspInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80096fe:	4b3f      	ldr	r3, [pc, #252]	@ (80097fc <HAL_TIM_PWM_MspInit+0x10c>)

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 8009700:	4c3f      	ldr	r4, [pc, #252]	@ (8009800 <HAL_TIM_PWM_MspInit+0x110>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009702:	699a      	ldr	r2, [r3, #24]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009704:	f8df e0fc 	ldr.w	lr, [pc, #252]	@ 8009804 <HAL_TIM_PWM_MspInit+0x114>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009708:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800970c:	619a      	str	r2, [r3, #24]
 800970e:	699b      	ldr	r3, [r3, #24]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8009710:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009712:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009716:	9301      	str	r3, [sp, #4]
 8009718:	9b01      	ldr	r3, [sp, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800971a:	2310      	movs	r3, #16
 800971c:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8009720:	2300      	movs	r3, #0
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009722:	f44f 7180 	mov.w	r1, #256	@ 0x100
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8009726:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 800972a:	61a3      	str	r3, [r4, #24]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800972c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8009730:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8009734:	4620      	mov	r0, r4
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009736:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800973a:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 800973c:	f000 fdf0 	bl	800a320 <HAL_DMA_Init>
 8009740:	b108      	cbz	r0, 8009746 <HAL_TIM_PWM_MspInit+0x56>
    {
      Error_Handler();
 8009742:	f7ff fc37 	bl	8008fb4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8009746:	62ac      	str	r4, [r5, #40]	@ 0x28
 8009748:	6265      	str	r5, [r4, #36]	@ 0x24

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800974a:	b005      	add	sp, #20
 800974c:	bd30      	pop	{r4, r5, pc}
  else if(tim_pwmHandle->Instance==TIM2)
 800974e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009752:	d127      	bne.n	80097a4 <HAL_TIM_PWM_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009754:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8009758:	69da      	ldr	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 800975a:	4c2b      	ldr	r4, [pc, #172]	@ (8009808 <HAL_TIM_PWM_MspInit+0x118>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 800975c:	f042 0201 	orr.w	r2, r2, #1
 8009760:	61da      	str	r2, [r3, #28]
 8009762:	69db      	ldr	r3, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009764:	4829      	ldr	r0, [pc, #164]	@ (800980c <HAL_TIM_PWM_MspInit+0x11c>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009766:	f003 0301 	and.w	r3, r3, #1
 800976a:	9302      	str	r3, [sp, #8]
 800976c:	9b02      	ldr	r3, [sp, #8]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800976e:	2310      	movs	r3, #16
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8009770:	2280      	movs	r2, #128	@ 0x80
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009772:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8009776:	2300      	movs	r3, #0
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009778:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800977c:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8009780:	61a3      	str	r3, [r4, #24]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009782:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8009786:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 800978a:	4620      	mov	r0, r4
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800978c:	e9c4 c204 	strd	ip, r2, [r4, #16]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8009790:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8009792:	f000 fdc5 	bl	800a320 <HAL_DMA_Init>
 8009796:	b108      	cbz	r0, 800979c <HAL_TIM_PWM_MspInit+0xac>
      Error_Handler();
 8009798:	f7ff fc0c 	bl	8008fb4 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 800979c:	62ac      	str	r4, [r5, #40]	@ 0x28
 800979e:	6265      	str	r5, [r4, #36]	@ 0x24
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 80097a0:	632c      	str	r4, [r5, #48]	@ 0x30
 80097a2:	e7d2      	b.n	800974a <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM3)
 80097a4:	4a1a      	ldr	r2, [pc, #104]	@ (8009810 <HAL_TIM_PWM_MspInit+0x120>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d1cf      	bne.n	800974a <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80097aa:	4b14      	ldr	r3, [pc, #80]	@ (80097fc <HAL_TIM_PWM_MspInit+0x10c>)
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 80097ac:	4c19      	ldr	r4, [pc, #100]	@ (8009814 <HAL_TIM_PWM_MspInit+0x124>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 80097ae:	69da      	ldr	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80097b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
    __HAL_RCC_TIM3_CLK_ENABLE();
 80097b4:	f042 0202 	orr.w	r2, r2, #2
 80097b8:	61da      	str	r2, [r3, #28]
 80097ba:	69db      	ldr	r3, [r3, #28]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80097bc:	4a16      	ldr	r2, [pc, #88]	@ (8009818 <HAL_TIM_PWM_MspInit+0x128>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 80097be:	f003 0302 	and.w	r3, r3, #2
 80097c2:	9303      	str	r3, [sp, #12]
 80097c4:	9b03      	ldr	r3, [sp, #12]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80097c6:	2310      	movs	r3, #16
 80097c8:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80097cc:	2300      	movs	r3, #0
 80097ce:	2280      	movs	r2, #128	@ 0x80
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80097d0:	61a3      	str	r3, [r4, #24]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80097d2:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80097d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 80097da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80097de:	4620      	mov	r0, r4
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80097e0:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 80097e4:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80097e6:	f000 fd9b 	bl	800a320 <HAL_DMA_Init>
 80097ea:	b108      	cbz	r0, 80097f0 <HAL_TIM_PWM_MspInit+0x100>
      Error_Handler();
 80097ec:	f7ff fbe2 	bl	8008fb4 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80097f0:	626c      	str	r4, [r5, #36]	@ 0x24
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80097f2:	63ac      	str	r4, [r5, #56]	@ 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80097f4:	6265      	str	r5, [r4, #36]	@ 0x24
}
 80097f6:	e7a8      	b.n	800974a <HAL_TIM_PWM_MspInit+0x5a>
 80097f8:	40012c00 	.word	0x40012c00
 80097fc:	40021000 	.word	0x40021000
 8009800:	20001e00 	.word	0x20001e00
 8009804:	40020030 	.word	0x40020030
 8009808:	20001dbc 	.word	0x20001dbc
 800980c:	40020080 	.word	0x40020080
 8009810:	40000400 	.word	0x40000400
 8009814:	20001d78 	.word	0x20001d78
 8009818:	4002006c 	.word	0x4002006c

0800981c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800981c:	2210      	movs	r2, #16
{
 800981e:	b510      	push	{r4, lr}
 8009820:	4604      	mov	r4, r0
 8009822:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009824:	eb0d 0002 	add.w	r0, sp, r2
 8009828:	2100      	movs	r1, #0
 800982a:	f001 fecc 	bl	800b5c6 <memset>
  if(timHandle->Instance==TIM1)
 800982e:	6823      	ldr	r3, [r4, #0]
 8009830:	4a2b      	ldr	r2, [pc, #172]	@ (80098e0 <HAL_TIM_MspPostInit+0xc4>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d115      	bne.n	8009862 <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009836:	4b2b      	ldr	r3, [pc, #172]	@ (80098e4 <HAL_TIM_MspPostInit+0xc8>)
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009838:	f44f 7000 	mov.w	r0, #512	@ 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800983c:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800983e:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009840:	f042 0204 	orr.w	r2, r2, #4
 8009844:	619a      	str	r2, [r3, #24]
 8009846:	699b      	ldr	r3, [r3, #24]
 8009848:	f003 0304 	and.w	r3, r3, #4
 800984c:	9301      	str	r3, [sp, #4]
 800984e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009850:	2302      	movs	r3, #2
 8009852:	e9cd 0304 	strd	r0, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009856:	4824      	ldr	r0, [pc, #144]	@ (80098e8 <HAL_TIM_MspPostInit+0xcc>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009858:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800985a:	f000 ff89 	bl	800a770 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800985e:	b008      	add	sp, #32
 8009860:	bd10      	pop	{r4, pc}
  else if(timHandle->Instance==TIM2)
 8009862:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009866:	d11d      	bne.n	80098a4 <HAL_TIM_MspPostInit+0x88>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009868:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 800986c:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800986e:	2108      	movs	r1, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009870:	f042 0208 	orr.w	r2, r2, #8
 8009874:	619a      	str	r2, [r3, #24]
 8009876:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009878:	481c      	ldr	r0, [pc, #112]	@ (80098ec <HAL_TIM_MspPostInit+0xd0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800987a:	f003 0308 	and.w	r3, r3, #8
 800987e:	9302      	str	r3, [sp, #8]
 8009880:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009882:	2302      	movs	r3, #2
 8009884:	e9cd 1304 	strd	r1, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009888:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800988a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800988c:	f000 ff70 	bl	800a770 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8009890:	4a17      	ldr	r2, [pc, #92]	@ (80098f0 <HAL_TIM_MspPostInit+0xd4>)
 8009892:	6853      	ldr	r3, [r2, #4]
 8009894:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009898:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800989c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80098a0:	6053      	str	r3, [r2, #4]
}
 80098a2:	e7dc      	b.n	800985e <HAL_TIM_MspPostInit+0x42>
  else if(timHandle->Instance==TIM3)
 80098a4:	4a13      	ldr	r2, [pc, #76]	@ (80098f4 <HAL_TIM_MspPostInit+0xd8>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d1d9      	bne.n	800985e <HAL_TIM_MspPostInit+0x42>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80098aa:	4b0e      	ldr	r3, [pc, #56]	@ (80098e4 <HAL_TIM_MspPostInit+0xc8>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80098ac:	4812      	ldr	r0, [pc, #72]	@ (80098f8 <HAL_TIM_MspPostInit+0xdc>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80098ae:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80098b0:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80098b2:	f042 0210 	orr.w	r2, r2, #16
 80098b6:	619a      	str	r2, [r3, #24]
 80098b8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098ba:	f44f 7250 	mov.w	r2, #832	@ 0x340
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80098be:	f003 0310 	and.w	r3, r3, #16
 80098c2:	9303      	str	r3, [sp, #12]
 80098c4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098c6:	2302      	movs	r3, #2
 80098c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098cc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80098ce:	f000 ff4f 	bl	800a770 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80098d2:	4a07      	ldr	r2, [pc, #28]	@ (80098f0 <HAL_TIM_MspPostInit+0xd4>)
 80098d4:	6853      	ldr	r3, [r2, #4]
 80098d6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80098da:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80098de:	e7df      	b.n	80098a0 <HAL_TIM_MspPostInit+0x84>
 80098e0:	40012c00 	.word	0x40012c00
 80098e4:	40021000 	.word	0x40021000
 80098e8:	40010800 	.word	0x40010800
 80098ec:	40010c00 	.word	0x40010c00
 80098f0:	40010000 	.word	0x40010000
 80098f4:	40000400 	.word	0x40000400
 80098f8:	40011000 	.word	0x40011000

080098fc <MX_TIM1_Init>:
{
 80098fc:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80098fe:	2400      	movs	r4, #0
{
 8009900:	b092      	sub	sp, #72	@ 0x48
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009902:	221c      	movs	r2, #28
 8009904:	4621      	mov	r1, r4
 8009906:	a803      	add	r0, sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009908:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800990c:	f001 fe5b 	bl	800b5c6 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009910:	2220      	movs	r2, #32
 8009912:	4621      	mov	r1, r4
 8009914:	a80a      	add	r0, sp, #40	@ 0x28
 8009916:	f001 fe56 	bl	800b5c6 <memset>
  htim1.Instance = TIM1;
 800991a:	481f      	ldr	r0, [pc, #124]	@ (8009998 <MX_TIM1_Init+0x9c>)
 800991c:	4b1f      	ldr	r3, [pc, #124]	@ (800999c <MX_TIM1_Init+0xa0>)
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800991e:	e9c0 4405 	strd	r4, r4, [r0, #20]
  htim1.Init.Prescaler = 0;
 8009922:	e9c0 3400 	strd	r3, r4, [r0]
  htim1.Init.Period = 79;
 8009926:	234f      	movs	r3, #79	@ 0x4f
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009928:	6084      	str	r4, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800992a:	e9c0 3403 	strd	r3, r4, [r0, #12]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800992e:	f001 fbc1 	bl	800b0b4 <HAL_TIM_PWM_Init>
 8009932:	b108      	cbz	r0, 8009938 <MX_TIM1_Init+0x3c>
    Error_Handler();
 8009934:	f7ff fb3e 	bl	8008fb4 <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009938:	4817      	ldr	r0, [pc, #92]	@ (8009998 <MX_TIM1_Init+0x9c>)
 800993a:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800993c:	e9cd 4401 	strd	r4, r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009940:	f001 fd84 	bl	800b44c <HAL_TIMEx_MasterConfigSynchronization>
 8009944:	b108      	cbz	r0, 800994a <MX_TIM1_Init+0x4e>
    Error_Handler();
 8009946:	f7ff fb35 	bl	8008fb4 <Error_Handler>
  sConfigOC.Pulse = 0;
 800994a:	2400      	movs	r4, #0
 800994c:	2360      	movs	r3, #96	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800994e:	2204      	movs	r2, #4
 8009950:	4811      	ldr	r0, [pc, #68]	@ (8009998 <MX_TIM1_Init+0x9c>)
 8009952:	a903      	add	r1, sp, #12
  sConfigOC.Pulse = 0;
 8009954:	e9cd 3403 	strd	r3, r4, [sp, #12]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009958:	e9cd 4405 	strd	r4, r4, [sp, #20]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800995c:	e9cd 4407 	strd	r4, r4, [sp, #28]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009960:	9409      	str	r4, [sp, #36]	@ 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009962:	f001 fbff 	bl	800b164 <HAL_TIM_PWM_ConfigChannel>
 8009966:	b108      	cbz	r0, 800996c <MX_TIM1_Init+0x70>
    Error_Handler();
 8009968:	f7ff fb24 	bl	8008fb4 <Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800996c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8009970:	4809      	ldr	r0, [pc, #36]	@ (8009998 <MX_TIM1_Init+0x9c>)
 8009972:	a90a      	add	r1, sp, #40	@ 0x28
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009974:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  sBreakDeadTimeConfig.DeadTime = 0;
 8009978:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800997c:	940e      	str	r4, [sp, #56]	@ 0x38
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800997e:	930f      	str	r3, [sp, #60]	@ 0x3c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009980:	9411      	str	r4, [sp, #68]	@ 0x44
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8009982:	f001 fd91 	bl	800b4a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8009986:	b108      	cbz	r0, 800998c <MX_TIM1_Init+0x90>
    Error_Handler();
 8009988:	f7ff fb14 	bl	8008fb4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 800998c:	4802      	ldr	r0, [pc, #8]	@ (8009998 <MX_TIM1_Init+0x9c>)
 800998e:	f7ff ff45 	bl	800981c <HAL_TIM_MspPostInit>
}
 8009992:	b012      	add	sp, #72	@ 0x48
 8009994:	bd10      	pop	{r4, pc}
 8009996:	bf00      	nop
 8009998:	20001ed4 	.word	0x20001ed4
 800999c:	40012c00 	.word	0x40012c00

080099a0 <MX_TIM2_Init>:
{
 80099a0:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80099a2:	2400      	movs	r4, #0
{
 80099a4:	b08a      	sub	sp, #40	@ 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 80099a6:	221c      	movs	r2, #28
 80099a8:	4621      	mov	r1, r4
 80099aa:	a803      	add	r0, sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80099ac:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80099b0:	f001 fe09 	bl	800b5c6 <memset>
  htim2.Instance = TIM2;
 80099b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80099b8:	4814      	ldr	r0, [pc, #80]	@ (8009a0c <MX_TIM2_Init+0x6c>)
  htim2.Init.Prescaler = 0;
 80099ba:	e9c0 3400 	strd	r3, r4, [r0]
  htim2.Init.Period = 79;
 80099be:	234f      	movs	r3, #79	@ 0x4f
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80099c0:	6084      	str	r4, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80099c2:	e9c0 3403 	strd	r3, r4, [r0, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80099c6:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80099c8:	f001 fb74 	bl	800b0b4 <HAL_TIM_PWM_Init>
 80099cc:	b108      	cbz	r0, 80099d2 <MX_TIM2_Init+0x32>
    Error_Handler();
 80099ce:	f7ff faf1 	bl	8008fb4 <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80099d2:	480e      	ldr	r0, [pc, #56]	@ (8009a0c <MX_TIM2_Init+0x6c>)
 80099d4:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80099d6:	e9cd 4401 	strd	r4, r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80099da:	f001 fd37 	bl	800b44c <HAL_TIMEx_MasterConfigSynchronization>
 80099de:	b108      	cbz	r0, 80099e4 <MX_TIM2_Init+0x44>
    Error_Handler();
 80099e0:	f7ff fae8 	bl	8008fb4 <Error_Handler>
  sConfigOC.Pulse = 0;
 80099e4:	2300      	movs	r3, #0
 80099e6:	2260      	movs	r2, #96	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80099e8:	4808      	ldr	r0, [pc, #32]	@ (8009a0c <MX_TIM2_Init+0x6c>)
  sConfigOC.Pulse = 0;
 80099ea:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80099ee:	a903      	add	r1, sp, #12
 80099f0:	2204      	movs	r2, #4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80099f2:	9305      	str	r3, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80099f4:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80099f6:	f001 fbb5 	bl	800b164 <HAL_TIM_PWM_ConfigChannel>
 80099fa:	b108      	cbz	r0, 8009a00 <MX_TIM2_Init+0x60>
    Error_Handler();
 80099fc:	f7ff fada 	bl	8008fb4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 8009a00:	4802      	ldr	r0, [pc, #8]	@ (8009a0c <MX_TIM2_Init+0x6c>)
 8009a02:	f7ff ff0b 	bl	800981c <HAL_TIM_MspPostInit>
}
 8009a06:	b00a      	add	sp, #40	@ 0x28
 8009a08:	bd10      	pop	{r4, pc}
 8009a0a:	bf00      	nop
 8009a0c:	20001e8c 	.word	0x20001e8c

08009a10 <MX_TIM3_Init>:
{
 8009a10:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009a12:	2400      	movs	r4, #0
{
 8009a14:	b08a      	sub	sp, #40	@ 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009a16:	221c      	movs	r2, #28
 8009a18:	4621      	mov	r1, r4
 8009a1a:	a803      	add	r0, sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009a1c:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009a20:	f001 fdd1 	bl	800b5c6 <memset>
  htim3.Init.Prescaler = 127;
 8009a24:	237f      	movs	r3, #127	@ 0x7f
  htim3.Instance = TIM3;
 8009a26:	481d      	ldr	r0, [pc, #116]	@ (8009a9c <MX_TIM3_Init+0x8c>)
  htim3.Init.Prescaler = 127;
 8009a28:	4a1d      	ldr	r2, [pc, #116]	@ (8009aa0 <MX_TIM3_Init+0x90>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009a2a:	6084      	str	r4, [r0, #8]
  htim3.Init.Prescaler = 127;
 8009a2c:	e9c0 2300 	strd	r2, r3, [r0]
  htim3.Init.Period = 9999;
 8009a30:	f242 730f 	movw	r3, #9999	@ 0x270f
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009a34:	6184      	str	r4, [r0, #24]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009a36:	e9c0 3403 	strd	r3, r4, [r0, #12]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8009a3a:	f001 fb3b 	bl	800b0b4 <HAL_TIM_PWM_Init>
 8009a3e:	b108      	cbz	r0, 8009a44 <MX_TIM3_Init+0x34>
    Error_Handler();
 8009a40:	f7ff fab8 	bl	8008fb4 <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009a44:	4815      	ldr	r0, [pc, #84]	@ (8009a9c <MX_TIM3_Init+0x8c>)
 8009a46:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009a48:	e9cd 4401 	strd	r4, r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009a4c:	f001 fcfe 	bl	800b44c <HAL_TIMEx_MasterConfigSynchronization>
 8009a50:	b108      	cbz	r0, 8009a56 <MX_TIM3_Init+0x46>
    Error_Handler();
 8009a52:	f7ff faaf 	bl	8008fb4 <Error_Handler>
  sConfigOC.Pulse = 0;
 8009a56:	2200      	movs	r2, #0
 8009a58:	2360      	movs	r3, #96	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009a5a:	4810      	ldr	r0, [pc, #64]	@ (8009a9c <MX_TIM3_Init+0x8c>)
 8009a5c:	a903      	add	r1, sp, #12
  sConfigOC.Pulse = 0;
 8009a5e:	e9cd 3203 	strd	r3, r2, [sp, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009a62:	9205      	str	r2, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009a64:	9207      	str	r2, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009a66:	f001 fb7d 	bl	800b164 <HAL_TIM_PWM_ConfigChannel>
 8009a6a:	b108      	cbz	r0, 8009a70 <MX_TIM3_Init+0x60>
    Error_Handler();
 8009a6c:	f7ff faa2 	bl	8008fb4 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009a70:	2208      	movs	r2, #8
 8009a72:	480a      	ldr	r0, [pc, #40]	@ (8009a9c <MX_TIM3_Init+0x8c>)
 8009a74:	a903      	add	r1, sp, #12
 8009a76:	f001 fb75 	bl	800b164 <HAL_TIM_PWM_ConfigChannel>
 8009a7a:	b108      	cbz	r0, 8009a80 <MX_TIM3_Init+0x70>
    Error_Handler();
 8009a7c:	f7ff fa9a 	bl	8008fb4 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009a80:	220c      	movs	r2, #12
 8009a82:	4806      	ldr	r0, [pc, #24]	@ (8009a9c <MX_TIM3_Init+0x8c>)
 8009a84:	eb0d 0102 	add.w	r1, sp, r2
 8009a88:	f001 fb6c 	bl	800b164 <HAL_TIM_PWM_ConfigChannel>
 8009a8c:	b108      	cbz	r0, 8009a92 <MX_TIM3_Init+0x82>
    Error_Handler();
 8009a8e:	f7ff fa91 	bl	8008fb4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8009a92:	4802      	ldr	r0, [pc, #8]	@ (8009a9c <MX_TIM3_Init+0x8c>)
 8009a94:	f7ff fec2 	bl	800981c <HAL_TIM_MspPostInit>
}
 8009a98:	b00a      	add	sp, #40	@ 0x28
 8009a9a:	bd10      	pop	{r4, pc}
 8009a9c:	20001e44 	.word	0x20001e44
 8009aa0:	40000400 	.word	0x40000400

08009aa4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009aa4:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8009aa6:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart2.Instance = USART2;
 8009aaa:	480a      	ldr	r0, [pc, #40]	@ (8009ad4 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8009aac:	4a0a      	ldr	r2, [pc, #40]	@ (8009ad8 <MX_USART2_UART_Init+0x34>)
 8009aae:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009ab2:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009ab4:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009ab6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009aba:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009abe:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009ac0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009ac2:	f001 fd51 	bl	800b568 <HAL_UART_Init>
 8009ac6:	b118      	cbz	r0, 8009ad0 <MX_USART2_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009ac8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8009acc:	f7ff ba72 	b.w	8008fb4 <Error_Handler>
}
 8009ad0:	bd08      	pop	{r3, pc}
 8009ad2:	bf00      	nop
 8009ad4:	20001f1c 	.word	0x20001f1c
 8009ad8:	40004400 	.word	0x40004400

08009adc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009adc:	b510      	push	{r4, lr}
 8009ade:	4604      	mov	r4, r0
 8009ae0:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ae2:	2210      	movs	r2, #16
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	a802      	add	r0, sp, #8
 8009ae8:	f001 fd6d 	bl	800b5c6 <memset>
  if(uartHandle->Instance==USART2)
 8009aec:	6822      	ldr	r2, [r4, #0]
 8009aee:	4b11      	ldr	r3, [pc, #68]	@ (8009b34 <HAL_UART_MspInit+0x58>)
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d11c      	bne.n	8009b2e <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8009af4:	f503 33e6 	add.w	r3, r3, #117760	@ 0x1cc00
 8009af8:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009afa:	480f      	ldr	r0, [pc, #60]	@ (8009b38 <HAL_UART_MspInit+0x5c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8009afc:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009b00:	61da      	str	r2, [r3, #28]
 8009b02:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b04:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8009b06:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8009b0a:	9200      	str	r2, [sp, #0]
 8009b0c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b0e:	699a      	ldr	r2, [r3, #24]
 8009b10:	f042 0204 	orr.w	r2, r2, #4
 8009b14:	619a      	str	r2, [r3, #24]
 8009b16:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b18:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b1a:	f003 0304 	and.w	r3, r3, #4
 8009b1e:	9301      	str	r3, [sp, #4]
 8009b20:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b22:	2302      	movs	r3, #2
 8009b24:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b28:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b2a:	f000 fe21 	bl	800a770 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8009b2e:	b006      	add	sp, #24
 8009b30:	bd10      	pop	{r4, pc}
 8009b32:	bf00      	nop
 8009b34:	40004400 	.word	0x40004400
 8009b38:	40010800 	.word	0x40010800

08009b3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8009b3c:	f7ff fdd0 	bl	80096e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009b40:	480b      	ldr	r0, [pc, #44]	@ (8009b70 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8009b42:	490c      	ldr	r1, [pc, #48]	@ (8009b74 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8009b44:	4a0c      	ldr	r2, [pc, #48]	@ (8009b78 <LoopFillZerobss+0x16>)
  movs r3, #0
 8009b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009b48:	e002      	b.n	8009b50 <LoopCopyDataInit>

08009b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009b4e:	3304      	adds	r3, #4

08009b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009b54:	d3f9      	bcc.n	8009b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009b56:	4a09      	ldr	r2, [pc, #36]	@ (8009b7c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8009b58:	4c09      	ldr	r4, [pc, #36]	@ (8009b80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8009b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009b5c:	e001      	b.n	8009b62 <LoopFillZerobss>

08009b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009b60:	3204      	adds	r2, #4

08009b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009b64:	d3fb      	bcc.n	8009b5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009b66:	f001 fd37 	bl	800b5d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009b6a:	f7ff fc73 	bl	8009454 <main>
  bx lr
 8009b6e:	4770      	bx	lr
  ldr r0, =_sdata
 8009b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009b74:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8009b78:	0800ba88 	.word	0x0800ba88
  ldr r2, =_sbss
 8009b7c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8009b80:	20001f88 	.word	0x20001f88

08009b84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009b84:	e7fe      	b.n	8009b84 <ADC1_2_IRQHandler>
	...

08009b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009b88:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8009bc4 <HAL_InitTick+0x3c>)
{
 8009b8c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009b8e:	781a      	ldrb	r2, [r3, #0]
 8009b90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009b94:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b98:	4a0b      	ldr	r2, [pc, #44]	@ (8009bc8 <HAL_InitTick+0x40>)
 8009b9a:	6810      	ldr	r0, [r2, #0]
 8009b9c:	fbb0 f0f3 	udiv	r0, r0, r3
 8009ba0:	f000 fbaa 	bl	800a2f8 <HAL_SYSTICK_Config>
 8009ba4:	4604      	mov	r4, r0
 8009ba6:	b958      	cbnz	r0, 8009bc0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009ba8:	2d0f      	cmp	r5, #15
 8009baa:	d809      	bhi.n	8009bc0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009bac:	4602      	mov	r2, r0
 8009bae:	4629      	mov	r1, r5
 8009bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb4:	f000 fb62 	bl	800a27c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009bb8:	4620      	mov	r0, r4
 8009bba:	4b04      	ldr	r3, [pc, #16]	@ (8009bcc <HAL_InitTick+0x44>)
 8009bbc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8009bbe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009bc0:	2001      	movs	r0, #1
 8009bc2:	e7fc      	b.n	8009bbe <HAL_InitTick+0x36>
 8009bc4:	20000014 	.word	0x20000014
 8009bc8:	20000010 	.word	0x20000010
 8009bcc:	20000018 	.word	0x20000018

08009bd0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009bd0:	4a07      	ldr	r2, [pc, #28]	@ (8009bf0 <HAL_Init+0x20>)
{
 8009bd2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009bd4:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009bd6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009bd8:	f043 0310 	orr.w	r3, r3, #16
 8009bdc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009bde:	f000 fb3b 	bl	800a258 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8009be2:	2000      	movs	r0, #0
 8009be4:	f7ff ffd0 	bl	8009b88 <HAL_InitTick>
  HAL_MspInit();
 8009be8:	f7ff fd32 	bl	8009650 <HAL_MspInit>
}
 8009bec:	2000      	movs	r0, #0
 8009bee:	bd08      	pop	{r3, pc}
 8009bf0:	40022000 	.word	0x40022000

08009bf4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8009bf4:	4a03      	ldr	r2, [pc, #12]	@ (8009c04 <HAL_IncTick+0x10>)
 8009bf6:	4b04      	ldr	r3, [pc, #16]	@ (8009c08 <HAL_IncTick+0x14>)
 8009bf8:	6811      	ldr	r1, [r2, #0]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	440b      	add	r3, r1
 8009bfe:	6013      	str	r3, [r2, #0]
}
 8009c00:	4770      	bx	lr
 8009c02:	bf00      	nop
 8009c04:	20001f64 	.word	0x20001f64
 8009c08:	20000014 	.word	0x20000014

08009c0c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8009c0c:	4b01      	ldr	r3, [pc, #4]	@ (8009c14 <HAL_GetTick+0x8>)
 8009c0e:	6818      	ldr	r0, [r3, #0]
}
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop
 8009c14:	20001f64 	.word	0x20001f64

08009c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009c18:	b538      	push	{r3, r4, r5, lr}
 8009c1a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009c1c:	f7ff fff6 	bl	8009c0c <HAL_GetTick>
 8009c20:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009c22:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8009c24:	bf1e      	ittt	ne
 8009c26:	4b04      	ldrne	r3, [pc, #16]	@ (8009c38 <HAL_Delay+0x20>)
 8009c28:	781b      	ldrbne	r3, [r3, #0]
 8009c2a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009c2c:	f7ff ffee 	bl	8009c0c <HAL_GetTick>
 8009c30:	1b43      	subs	r3, r0, r5
 8009c32:	42a3      	cmp	r3, r4
 8009c34:	d3fa      	bcc.n	8009c2c <HAL_Delay+0x14>
  {
  }
}
 8009c36:	bd38      	pop	{r3, r4, r5, pc}
 8009c38:	20000014 	.word	0x20000014

08009c3c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009c3c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009c3e:	4604      	mov	r4, r0
 8009c40:	2800      	cmp	r0, #0
 8009c42:	d06e      	beq.n	8009d22 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009c44:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009c48:	b90b      	cbnz	r3, 8009c4e <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009c4a:	f7fe fca7 	bl	800859c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009c4e:	6822      	ldr	r2, [r4, #0]
 8009c50:	6813      	ldr	r3, [r2, #0]
 8009c52:	f043 0301 	orr.w	r3, r3, #1
 8009c56:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009c58:	f7ff ffd8 	bl	8009c0c <HAL_GetTick>
 8009c5c:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009c5e:	6823      	ldr	r3, [r4, #0]
 8009c60:	685a      	ldr	r2, [r3, #4]
 8009c62:	07d1      	lsls	r1, r2, #31
 8009c64:	d551      	bpl.n	8009d0a <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	f022 0202 	bic.w	r2, r2, #2
 8009c6c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009c6e:	f7ff ffcd 	bl	8009c0c <HAL_GetTick>
 8009c72:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009c74:	6823      	ldr	r3, [r4, #0]
 8009c76:	685a      	ldr	r2, [r3, #4]
 8009c78:	0792      	lsls	r2, r2, #30
 8009c7a:	d454      	bmi.n	8009d26 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009c7c:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009c7e:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009c80:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	bf0c      	ite	eq
 8009c86:	f042 0280 	orreq.w	r2, r2, #128	@ 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009c8a:	f022 0280 	bicne.w	r2, r2, #128	@ 0x80
 8009c8e:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8009c90:	7e62      	ldrb	r2, [r4, #25]
 8009c92:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	bf0c      	ite	eq
 8009c98:	f042 0240 	orreq.w	r2, r2, #64	@ 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009c9c:	f022 0240 	bicne.w	r2, r2, #64	@ 0x40
 8009ca0:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009ca2:	7ea2      	ldrb	r2, [r4, #26]
 8009ca4:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	bf0c      	ite	eq
 8009caa:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009cae:	f022 0220 	bicne.w	r2, r2, #32
 8009cb2:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009cb4:	7ee2      	ldrb	r2, [r4, #27]
 8009cb6:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	bf0c      	ite	eq
 8009cbc:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009cc0:	f042 0210 	orrne.w	r2, r2, #16
 8009cc4:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009cc6:	7f22      	ldrb	r2, [r4, #28]
 8009cc8:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	bf0c      	ite	eq
 8009cce:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009cd2:	f022 0208 	bicne.w	r2, r2, #8
 8009cd6:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009cd8:	7f62      	ldrb	r2, [r4, #29]
 8009cda:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	bf0c      	ite	eq
 8009ce0:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009ce4:	f022 0204 	bicne.w	r2, r2, #4
 8009ce8:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009cea:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8009cee:	430a      	orrs	r2, r1
 8009cf0:	6921      	ldr	r1, [r4, #16]
 8009cf2:	430a      	orrs	r2, r1
 8009cf4:	6961      	ldr	r1, [r4, #20]
 8009cf6:	430a      	orrs	r2, r1
 8009cf8:	6861      	ldr	r1, [r4, #4]
 8009cfa:	3901      	subs	r1, #1
 8009cfc:	430a      	orrs	r2, r1
 8009cfe:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009d00:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009d02:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8009d04:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8009d08:	e00c      	b.n	8009d24 <HAL_CAN_Init+0xe8>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009d0a:	f7ff ff7f 	bl	8009c0c <HAL_GetTick>
 8009d0e:	1b40      	subs	r0, r0, r5
 8009d10:	280a      	cmp	r0, #10
 8009d12:	d9a4      	bls.n	8009c5e <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009d14:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009d16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d1a:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8009d1c:	2305      	movs	r3, #5
 8009d1e:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8009d22:	2001      	movs	r0, #1
}
 8009d24:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009d26:	f7ff ff71 	bl	8009c0c <HAL_GetTick>
 8009d2a:	1b40      	subs	r0, r0, r5
 8009d2c:	280a      	cmp	r0, #10
 8009d2e:	d9a1      	bls.n	8009c74 <HAL_CAN_Init+0x38>
 8009d30:	e7f0      	b.n	8009d14 <HAL_CAN_Init+0xd8>

08009d32 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8009d32:	b570      	push	{r4, r5, r6, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8009d34:	f890 2020 	ldrb.w	r2, [r0, #32]
  CAN_TypeDef *can_ip = hcan->Instance;
 8009d38:	6803      	ldr	r3, [r0, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8009d3a:	3a01      	subs	r2, #1
 8009d3c:	2a01      	cmp	r2, #1
 8009d3e:	d862      	bhi.n	8009e06 <HAL_CAN_ConfigFilter+0xd4>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8009d40:	2001      	movs	r0, #1
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009d42:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8009d46:	f042 0201 	orr.w	r2, r2, #1
 8009d4a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8009d4e:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8009d50:	f8d3 521c 	ldr.w	r5, [r3, #540]	@ 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8009d54:	f002 041f 	and.w	r4, r2, #31
 8009d58:	40a0      	lsls	r0, r4
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8009d5a:	ea25 0500 	bic.w	r5, r5, r0
 8009d5e:	f8c3 521c 	str.w	r5, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8009d62:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8009d64:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8009d66:	bb95      	cbnz	r5, 8009dce <HAL_CAN_ConfigFilter+0x9c>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8009d68:	f8d3 520c 	ldr.w	r5, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009d6c:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8009d6e:	4025      	ands	r5, r4
 8009d70:	f8c3 520c 	str.w	r5, [r3, #524]	@ 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009d74:	888d      	ldrh	r5, [r1, #4]
 8009d76:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009d7a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009d7e:	f8c2 5240 	str.w	r5, [r2, #576]	@ 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009d82:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8009d84:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009d86:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009d8a:	f8c2 5244 	str.w	r5, [r2, #580]	@ 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8009d8e:	698a      	ldr	r2, [r1, #24]
 8009d90:	bb7a      	cbnz	r2, 8009df2 <HAL_CAN_ConfigFilter+0xc0>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8009d92:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d96:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8009d98:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8009d9c:	690a      	ldr	r2, [r1, #16]
 8009d9e:	bb62      	cbnz	r2, 8009dfa <HAL_CAN_ConfigFilter+0xc8>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8009da0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8009da4:	4014      	ands	r4, r2
 8009da6:	f8c3 4214 	str.w	r4, [r3, #532]	@ 0x214
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8009daa:	6a0a      	ldr	r2, [r1, #32]
 8009dac:	2a01      	cmp	r2, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8009dae:	bf04      	itt	eq
 8009db0:	f8d3 221c 	ldreq.w	r2, [r3, #540]	@ 0x21c
 8009db4:	4302      	orreq	r2, r0

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 8009db6:	f04f 0000 	mov.w	r0, #0
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8009dba:	bf08      	it	eq
 8009dbc:	f8c3 221c 	streq.w	r2, [r3, #540]	@ 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009dc0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8009dc4:	f022 0201 	bic.w	r2, r2, #1
 8009dc8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8009dcc:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8009dce:	2d01      	cmp	r5, #1
 8009dd0:	d1dd      	bne.n	8009d8e <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8009dd2:	f8d3 520c 	ldr.w	r5, [r3, #524]	@ 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009dd6:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8009dd8:	4305      	orrs	r5, r0
 8009dda:	f8c3 520c 	str.w	r5, [r3, #524]	@ 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009dde:	888d      	ldrh	r5, [r1, #4]
 8009de0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009de4:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009de8:	f8c2 5240 	str.w	r5, [r2, #576]	@ 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009dec:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8009dee:	898d      	ldrh	r5, [r1, #12]
 8009df0:	e7c9      	b.n	8009d86 <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8009df2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009df6:	4302      	orrs	r2, r0
 8009df8:	e7ce      	b.n	8009d98 <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8009dfa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8009dfe:	4302      	orrs	r2, r0
 8009e00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8009e04:	e7d1      	b.n	8009daa <HAL_CAN_ConfigFilter+0x78>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009e06:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009e08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009e0c:	6243      	str	r3, [r0, #36]	@ 0x24
    return HAL_ERROR;
 8009e0e:	2001      	movs	r0, #1
 8009e10:	e7dc      	b.n	8009dcc <HAL_CAN_ConfigFilter+0x9a>

08009e12 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8009e12:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8009e14:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8009e18:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d11f      	bne.n	8009e5e <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8009e1e:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009e20:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8009e22:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009e26:	6813      	ldr	r3, [r2, #0]
 8009e28:	f023 0301 	bic.w	r3, r3, #1
 8009e2c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009e2e:	f7ff feed 	bl	8009c0c <HAL_GetTick>
 8009e32:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009e34:	6823      	ldr	r3, [r4, #0]
 8009e36:	6858      	ldr	r0, [r3, #4]
 8009e38:	f010 0001 	ands.w	r0, r0, #1
 8009e3c:	d101      	bne.n	8009e42 <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009e3e:	6260      	str	r0, [r4, #36]	@ 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 8009e40:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009e42:	f7ff fee3 	bl	8009c0c <HAL_GetTick>
 8009e46:	1b40      	subs	r0, r0, r5
 8009e48:	280a      	cmp	r0, #10
 8009e4a:	d9f3      	bls.n	8009e34 <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009e4c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009e4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e52:	6263      	str	r3, [r4, #36]	@ 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8009e54:	2305      	movs	r3, #5
 8009e56:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8009e5a:	2001      	movs	r0, #1
 8009e5c:	e7f0      	b.n	8009e40 <HAL_CAN_Start+0x2e>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8009e5e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009e60:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009e64:	6243      	str	r3, [r0, #36]	@ 0x24
    return HAL_ERROR;
 8009e66:	e7f8      	b.n	8009e5a <HAL_CAN_Start+0x48>

08009e68 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8009e68:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8009e6a:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8009e6e:	6804      	ldr	r4, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8009e70:	3d01      	subs	r5, #1
 8009e72:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8009e74:	68a6      	ldr	r6, [r4, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8009e76:	d83c      	bhi.n	8009ef2 <HAL_CAN_AddTxMessage+0x8a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009e78:	f016 5fe0 	tst.w	r6, #469762048	@ 0x1c000000
 8009e7c:	d033      	beq.n	8009ee6 <HAL_CAN_AddTxMessage+0x7e>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8009e7e:	2501      	movs	r5, #1
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8009e80:	f3c6 6001 	ubfx	r0, r6, #24, #2
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8009e84:	4085      	lsls	r5, r0
 8009e86:	601d      	str	r5, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8009e88:	e9d1 5702 	ldrd	r5, r7, [r1, #8]
 8009e8c:	f100 0318 	add.w	r3, r0, #24
 8009e90:	bb15      	cbnz	r5, 8009ed8 <HAL_CAN_AddTxMessage+0x70>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009e92:	680d      	ldr	r5, [r1, #0]
 8009e94:	011b      	lsls	r3, r3, #4
 8009e96:	ea47 5745 	orr.w	r7, r7, r5, lsl #21
 8009e9a:	50e7      	str	r7, [r4, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8009e9c:	eb04 1300 	add.w	r3, r4, r0, lsl #4
 8009ea0:	0105      	lsls	r5, r0, #4

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);

      /* Return function status */
      return HAL_OK;
 8009ea2:	2000      	movs	r0, #0
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8009ea4:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8009ea6:	442c      	add	r4, r5
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8009ea8:	f8c3 6184 	str.w	r6, [r3, #388]	@ 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8009eac:	7d09      	ldrb	r1, [r1, #20]
 8009eae:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8009eb0:	bf02      	ittt	eq
 8009eb2:	f8d3 1184 	ldreq.w	r1, [r3, #388]	@ 0x184
 8009eb6:	f441 7180 	orreq.w	r1, r1, #256	@ 0x100
 8009eba:	f8c3 1184 	streq.w	r1, [r3, #388]	@ 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8009ebe:	6851      	ldr	r1, [r2, #4]
 8009ec0:	f8c4 118c 	str.w	r1, [r4, #396]	@ 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8009ec4:	6812      	ldr	r2, [r2, #0]
 8009ec6:	f8c4 2188 	str.w	r2, [r4, #392]	@ 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8009eca:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
 8009ece:	f042 0201 	orr.w	r2, r2, #1
 8009ed2:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8009ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009ed8:	684e      	ldr	r6, [r1, #4]
                                                           pHeader->IDE |
 8009eda:	433d      	orrs	r5, r7
 8009edc:	ea45 05c6 	orr.w	r5, r5, r6, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009ee0:	011b      	lsls	r3, r3, #4
 8009ee2:	50e5      	str	r5, [r4, r3]
 8009ee4:	e7da      	b.n	8009e9c <HAL_CAN_AddTxMessage+0x34>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009ee6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009ee8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009eec:	6243      	str	r3, [r0, #36]	@ 0x24
      return HAL_ERROR;
 8009eee:	2001      	movs	r0, #1
 8009ef0:	e7f1      	b.n	8009ed6 <HAL_CAN_AddTxMessage+0x6e>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009ef2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009ef4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009ef8:	e7f8      	b.n	8009eec <HAL_CAN_AddTxMessage+0x84>

08009efa <HAL_CAN_IsTxMessagePending>:
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
  uint32_t status = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8009efa:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8009efe:	3b01      	subs	r3, #1
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d809      	bhi.n	8009f18 <HAL_CAN_IsTxMessagePending+0x1e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8009f04:	6803      	ldr	r3, [r0, #0]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	ea03 6381 	and.w	r3, r3, r1, lsl #26
 8009f0c:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 8009f10:	bf14      	ite	ne
 8009f12:	2001      	movne	r0, #1
 8009f14:	2000      	moveq	r0, #0
 8009f16:	4770      	bx	lr
  uint32_t status = 0U;
 8009f18:	2000      	movs	r0, #0
    }
  }

  /* Return status */
  return status;
}
 8009f1a:	4770      	bx	lr

08009f1c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8009f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8009f1e:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8009f22:	3c01      	subs	r4, #1
 8009f24:	2c01      	cmp	r4, #1
 8009f26:	d871      	bhi.n	800a00c <HAL_CAN_GetRxMessage+0xf0>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8009f28:	6806      	ldr	r6, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009f2a:	b941      	cbnz	r1, 8009f3e <HAL_CAN_GetRxMessage+0x22>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8009f2c:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009f2e:	07a4      	lsls	r4, r4, #30
 8009f30:	d107      	bne.n	8009f42 <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009f32:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009f34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009f38:	6243      	str	r3, [r0, #36]	@ 0x24
        return HAL_ERROR;
 8009f3a:	2001      	movs	r0, #1
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8009f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009f3e:	6934      	ldr	r4, [r6, #16]
 8009f40:	e7f5      	b.n	8009f2e <HAL_CAN_GetRxMessage+0x12>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8009f42:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 8009f46:	f8d5 71b0 	ldr.w	r7, [r5, #432]	@ 0x1b0
 8009f4a:	010c      	lsls	r4, r1, #4
 8009f4c:	f007 0704 	and.w	r7, r7, #4
 8009f50:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8009f52:	2f00      	cmp	r7, #0
 8009f54:	d150      	bne.n	8009ff8 <HAL_CAN_GetRxMessage+0xdc>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009f56:	f8d5 71b0 	ldr.w	r7, [r5, #432]	@ 0x1b0
 8009f5a:	0d7f      	lsrs	r7, r7, #21
 8009f5c:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8009f5e:	f8d5 71b0 	ldr.w	r7, [r5, #432]	@ 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8009f62:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8009f64:	f007 0702 	and.w	r7, r7, #2
 8009f68:	60d7      	str	r7, [r2, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8009f6a:	f8d5 71b4 	ldr.w	r7, [r5, #436]	@ 0x1b4
 8009f6e:	073f      	lsls	r7, r7, #28
      pHeader->DLC = 8U;
 8009f70:	bf4e      	itee	mi
 8009f72:	2708      	movmi	r7, #8
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8009f74:	f8d5 71b4 	ldrpl.w	r7, [r5, #436]	@ 0x1b4
 8009f78:	f007 070f 	andpl.w	r7, r7, #15
 8009f7c:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8009f7e:	f8d5 71b4 	ldr.w	r7, [r5, #436]	@ 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8009f82:	f8d5 51b4 	ldr.w	r5, [r5, #436]	@ 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8009f86:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8009f8a:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8009f8c:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8009f8e:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8009f90:	f8d6 21b8 	ldr.w	r2, [r6, #440]	@ 0x1b8
 8009f94:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8009f96:	6802      	ldr	r2, [r0, #0]
 8009f98:	4422      	add	r2, r4
 8009f9a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8009f9e:	0a12      	lsrs	r2, r2, #8
 8009fa0:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8009fa2:	6802      	ldr	r2, [r0, #0]
 8009fa4:	4422      	add	r2, r4
 8009fa6:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8009faa:	0c12      	lsrs	r2, r2, #16
 8009fac:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8009fae:	6802      	ldr	r2, [r0, #0]
 8009fb0:	4422      	add	r2, r4
 8009fb2:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8009fb6:	0e12      	lsrs	r2, r2, #24
 8009fb8:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8009fba:	6802      	ldr	r2, [r0, #0]
 8009fbc:	4422      	add	r2, r4
 8009fbe:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8009fc2:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8009fc4:	6802      	ldr	r2, [r0, #0]
 8009fc6:	4422      	add	r2, r4
 8009fc8:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8009fcc:	0a12      	lsrs	r2, r2, #8
 8009fce:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8009fd0:	6802      	ldr	r2, [r0, #0]
 8009fd2:	4422      	add	r2, r4
 8009fd4:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8009fd8:	0c12      	lsrs	r2, r2, #16
 8009fda:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8009fdc:	6802      	ldr	r2, [r0, #0]
 8009fde:	4422      	add	r2, r4
 8009fe0:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8009fe4:	0e12      	lsrs	r2, r2, #24
 8009fe6:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009fe8:	6803      	ldr	r3, [r0, #0]
 8009fea:	b951      	cbnz	r1, 800a002 <HAL_CAN_GetRxMessage+0xe6>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8009fec:	68da      	ldr	r2, [r3, #12]
 8009fee:	f042 0220 	orr.w	r2, r2, #32
 8009ff2:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	e7a1      	b.n	8009f3c <HAL_CAN_GetRxMessage+0x20>
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8009ff8:	f8d5 71b0 	ldr.w	r7, [r5, #432]	@ 0x1b0
 8009ffc:	08ff      	lsrs	r7, r7, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8009ffe:	6057      	str	r7, [r2, #4]
 800a000:	e7ad      	b.n	8009f5e <HAL_CAN_GetRxMessage+0x42>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800a002:	691a      	ldr	r2, [r3, #16]
 800a004:	f042 0220 	orr.w	r2, r2, #32
 800a008:	611a      	str	r2, [r3, #16]
 800a00a:	e7f3      	b.n	8009ff4 <HAL_CAN_GetRxMessage+0xd8>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a00c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800a00e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a012:	e791      	b.n	8009f38 <HAL_CAN_GetRxMessage+0x1c>

0800a014 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 800a014:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800a018:	3b01      	subs	r3, #1
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d805      	bhi.n	800a02a <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800a01e:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 800a020:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800a022:	6953      	ldr	r3, [r2, #20]
 800a024:	4319      	orrs	r1, r3
 800a026:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 800a028:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a02a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800a02c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a030:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 800a032:	2001      	movs	r0, #1
  }
}
 800a034:	4770      	bx	lr

0800a036 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @brief  Transmission Mailbox 0 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
 800a036:	4770      	bx	lr

0800a038 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @brief  Transmission Mailbox 1 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
 800a038:	4770      	bx	lr

0800a03a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @brief  Transmission Mailbox 2 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
 800a03a:	4770      	bx	lr

0800a03c <HAL_CAN_TxMailbox0AbortCallback>:
  * @brief  Transmission Mailbox 0 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
 800a03c:	4770      	bx	lr

0800a03e <HAL_CAN_TxMailbox1AbortCallback>:
  * @brief  Transmission Mailbox 1 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
 800a03e:	4770      	bx	lr

0800a040 <HAL_CAN_TxMailbox2AbortCallback>:
  * @brief  Transmission Mailbox 2 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
 800a040:	4770      	bx	lr

0800a042 <HAL_CAN_RxFifo0FullCallback>:
  * @brief  Rx FIFO 0 full callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
 800a042:	4770      	bx	lr

0800a044 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @brief  Rx FIFO 1 message pending callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
 800a044:	4770      	bx	lr

0800a046 <HAL_CAN_RxFifo1FullCallback>:
  * @brief  Rx FIFO 1 full callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
 800a046:	4770      	bx	lr

0800a048 <HAL_CAN_SleepCallback>:
  * @brief  Sleep callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
 800a048:	4770      	bx	lr

0800a04a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @brief  WakeUp from Rx message callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
 800a04a:	4770      	bx	lr

0800a04c <HAL_CAN_ErrorCallback>:
  * @brief  Error CAN callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
 800a04c:	4770      	bx	lr

0800a04e <HAL_CAN_IRQHandler>:
{
 800a04e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800a052:	6803      	ldr	r3, [r0, #0]
{
 800a054:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800a056:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800a058:	f8d3 9004 	ldr.w	r9, [r3, #4]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800a05c:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800a060:	f8d3 8008 	ldr.w	r8, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800a064:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800a068:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800a06c:	699f      	ldr	r7, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800a06e:	d027      	beq.n	800a0c0 <HAL_CAN_IRQHandler+0x72>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800a070:	f018 0f01 	tst.w	r8, #1
 800a074:	d007      	beq.n	800a086 <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800a076:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800a078:	f018 0f02 	tst.w	r8, #2
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800a07c:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800a07e:	f000 80a6 	beq.w	800a1ce <HAL_CAN_IRQHandler+0x180>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800a082:	f7ff ffd8 	bl	800a036 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800a086:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800a088:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800a08c:	d00a      	beq.n	800a0a4 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800a08e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a092:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800a094:	f418 7f00 	tst.w	r8, #512	@ 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800a098:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800a09a:	f000 80a7 	beq.w	800a1ec <HAL_CAN_IRQHandler+0x19e>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800a09e:	4628      	mov	r0, r5
 800a0a0:	f7ff ffca 	bl	800a038 <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800a0a4:	f418 3f80 	tst.w	r8, #65536	@ 0x10000
 800a0a8:	d00a      	beq.n	800a0c0 <HAL_CAN_IRQHandler+0x72>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800a0aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a0ae:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800a0b0:	f418 3f00 	tst.w	r8, #131072	@ 0x20000
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800a0b4:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800a0b6:	f000 80a9 	beq.w	800a20c <HAL_CAN_IRQHandler+0x1be>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800a0ba:	4628      	mov	r0, r5
 800a0bc:	f7ff ffbd 	bl	800a03a <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800a0c0:	0730      	lsls	r0, r6, #28
 800a0c2:	d507      	bpl.n	800a0d4 <HAL_CAN_IRQHandler+0x86>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800a0c4:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800a0c8:	bf1f      	itttt	ne
 800a0ca:	2210      	movne	r2, #16
 800a0cc:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800a0ce:	f444 7400 	orrne.w	r4, r4, #512	@ 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800a0d2:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800a0d4:	0771      	lsls	r1, r6, #29
 800a0d6:	d508      	bpl.n	800a0ea <HAL_CAN_IRQHandler+0x9c>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800a0d8:	f01b 0f08 	tst.w	fp, #8
 800a0dc:	d005      	beq.n	800a0ea <HAL_CAN_IRQHandler+0x9c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800a0de:	2208      	movs	r2, #8
 800a0e0:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo0FullCallback(hcan);
 800a0e2:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800a0e4:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 800a0e6:	f7ff ffac 	bl	800a042 <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800a0ea:	07b2      	lsls	r2, r6, #30
 800a0ec:	d506      	bpl.n	800a0fc <HAL_CAN_IRQHandler+0xae>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800a0ee:	682b      	ldr	r3, [r5, #0]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	079b      	lsls	r3, r3, #30
 800a0f4:	d002      	beq.n	800a0fc <HAL_CAN_IRQHandler+0xae>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800a0f6:	4628      	mov	r0, r5
 800a0f8:	f7ff f846 	bl	8009188 <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800a0fc:	0670      	lsls	r0, r6, #25
 800a0fe:	d507      	bpl.n	800a110 <HAL_CAN_IRQHandler+0xc2>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800a100:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800a104:	bf1f      	itttt	ne
 800a106:	2210      	movne	r2, #16
 800a108:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800a10a:	f444 6480 	orrne.w	r4, r4, #1024	@ 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800a10e:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800a110:	06b1      	lsls	r1, r6, #26
 800a112:	d508      	bpl.n	800a126 <HAL_CAN_IRQHandler+0xd8>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800a114:	f01a 0f08 	tst.w	sl, #8
 800a118:	d005      	beq.n	800a126 <HAL_CAN_IRQHandler+0xd8>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800a11a:	2208      	movs	r2, #8
 800a11c:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo1FullCallback(hcan);
 800a11e:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800a120:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 800a122:	f7ff ff90 	bl	800a046 <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800a126:	06f2      	lsls	r2, r6, #27
 800a128:	d506      	bpl.n	800a138 <HAL_CAN_IRQHandler+0xea>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800a12a:	682b      	ldr	r3, [r5, #0]
 800a12c:	691b      	ldr	r3, [r3, #16]
 800a12e:	079b      	lsls	r3, r3, #30
 800a130:	d002      	beq.n	800a138 <HAL_CAN_IRQHandler+0xea>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800a132:	4628      	mov	r0, r5
 800a134:	f7ff ff86 	bl	800a044 <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800a138:	03b0      	lsls	r0, r6, #14
 800a13a:	d508      	bpl.n	800a14e <HAL_CAN_IRQHandler+0x100>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800a13c:	f019 0f10 	tst.w	r9, #16
 800a140:	d005      	beq.n	800a14e <HAL_CAN_IRQHandler+0x100>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800a142:	2210      	movs	r2, #16
 800a144:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_SleepCallback(hcan);
 800a146:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800a148:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 800a14a:	f7ff ff7d 	bl	800a048 <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800a14e:	03f1      	lsls	r1, r6, #15
 800a150:	d508      	bpl.n	800a164 <HAL_CAN_IRQHandler+0x116>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800a152:	f019 0f08 	tst.w	r9, #8
 800a156:	d005      	beq.n	800a164 <HAL_CAN_IRQHandler+0x116>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800a158:	2208      	movs	r2, #8
 800a15a:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800a15c:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800a15e:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800a160:	f7ff ff73 	bl	800a04a <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800a164:	0432      	lsls	r2, r6, #16
 800a166:	d529      	bpl.n	800a1bc <HAL_CAN_IRQHandler+0x16e>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800a168:	f019 0f04 	tst.w	r9, #4
 800a16c:	682a      	ldr	r2, [r5, #0]
 800a16e:	d023      	beq.n	800a1b8 <HAL_CAN_IRQHandler+0x16a>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800a170:	05f3      	lsls	r3, r6, #23
 800a172:	d503      	bpl.n	800a17c <HAL_CAN_IRQHandler+0x12e>
 800a174:	07f8      	lsls	r0, r7, #31
        errorcode |= HAL_CAN_ERROR_EWG;
 800a176:	bf48      	it	mi
 800a178:	f044 0401 	orrmi.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800a17c:	05b1      	lsls	r1, r6, #22
 800a17e:	d503      	bpl.n	800a188 <HAL_CAN_IRQHandler+0x13a>
 800a180:	07bb      	lsls	r3, r7, #30
        errorcode |= HAL_CAN_ERROR_EPV;
 800a182:	bf48      	it	mi
 800a184:	f044 0402 	orrmi.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800a188:	0570      	lsls	r0, r6, #21
 800a18a:	d503      	bpl.n	800a194 <HAL_CAN_IRQHandler+0x146>
 800a18c:	0779      	lsls	r1, r7, #29
        errorcode |= HAL_CAN_ERROR_BOF;
 800a18e:	bf48      	it	mi
 800a190:	f044 0404 	orrmi.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800a194:	0533      	lsls	r3, r6, #20
 800a196:	d50f      	bpl.n	800a1b8 <HAL_CAN_IRQHandler+0x16a>
 800a198:	f017 0370 	ands.w	r3, r7, #112	@ 0x70
 800a19c:	d00c      	beq.n	800a1b8 <HAL_CAN_IRQHandler+0x16a>
        switch (esrflags & CAN_ESR_LEC)
 800a19e:	2b40      	cmp	r3, #64	@ 0x40
 800a1a0:	d054      	beq.n	800a24c <HAL_CAN_IRQHandler+0x1fe>
 800a1a2:	d843      	bhi.n	800a22c <HAL_CAN_IRQHandler+0x1de>
 800a1a4:	2b20      	cmp	r3, #32
 800a1a6:	d04b      	beq.n	800a240 <HAL_CAN_IRQHandler+0x1f2>
 800a1a8:	2b30      	cmp	r3, #48	@ 0x30
 800a1aa:	d04c      	beq.n	800a246 <HAL_CAN_IRQHandler+0x1f8>
 800a1ac:	2b10      	cmp	r3, #16
 800a1ae:	d044      	beq.n	800a23a <HAL_CAN_IRQHandler+0x1ec>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800a1b0:	6993      	ldr	r3, [r2, #24]
 800a1b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1b6:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800a1b8:	2304      	movs	r3, #4
 800a1ba:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 800a1bc:	b12c      	cbz	r4, 800a1ca <HAL_CAN_IRQHandler+0x17c>
    hcan->ErrorCode |= errorcode;
 800a1be:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 800a1c0:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 800a1c2:	4323      	orrs	r3, r4
 800a1c4:	626b      	str	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 800a1c6:	f7ff ff41 	bl	800a04c <HAL_CAN_ErrorCallback>
}
 800a1ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800a1ce:	f018 0f04 	tst.w	r8, #4
 800a1d2:	d105      	bne.n	800a1e0 <HAL_CAN_IRQHandler+0x192>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800a1d4:	f018 0f08 	tst.w	r8, #8
 800a1d8:	d105      	bne.n	800a1e6 <HAL_CAN_IRQHandler+0x198>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800a1da:	f7ff ff2f 	bl	800a03c <HAL_CAN_TxMailbox0AbortCallback>
 800a1de:	e752      	b.n	800a086 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800a1e0:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 800a1e4:	e750      	b.n	800a088 <HAL_CAN_IRQHandler+0x3a>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800a1e6:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 800a1ea:	e74d      	b.n	800a088 <HAL_CAN_IRQHandler+0x3a>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800a1ec:	f418 6f80 	tst.w	r8, #1024	@ 0x400
 800a1f0:	d002      	beq.n	800a1f8 <HAL_CAN_IRQHandler+0x1aa>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800a1f2:	f444 5400 	orr.w	r4, r4, #8192	@ 0x2000
 800a1f6:	e755      	b.n	800a0a4 <HAL_CAN_IRQHandler+0x56>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800a1f8:	f418 6f00 	tst.w	r8, #2048	@ 0x800
 800a1fc:	d002      	beq.n	800a204 <HAL_CAN_IRQHandler+0x1b6>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800a1fe:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 800a202:	e74f      	b.n	800a0a4 <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800a204:	4628      	mov	r0, r5
 800a206:	f7ff ff1a 	bl	800a03e <HAL_CAN_TxMailbox1AbortCallback>
 800a20a:	e74b      	b.n	800a0a4 <HAL_CAN_IRQHandler+0x56>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800a20c:	f418 2f80 	tst.w	r8, #262144	@ 0x40000
 800a210:	d002      	beq.n	800a218 <HAL_CAN_IRQHandler+0x1ca>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800a212:	f444 4400 	orr.w	r4, r4, #32768	@ 0x8000
 800a216:	e753      	b.n	800a0c0 <HAL_CAN_IRQHandler+0x72>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800a218:	f418 2f00 	tst.w	r8, #524288	@ 0x80000
 800a21c:	d002      	beq.n	800a224 <HAL_CAN_IRQHandler+0x1d6>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800a21e:	f444 3480 	orr.w	r4, r4, #65536	@ 0x10000
 800a222:	e74d      	b.n	800a0c0 <HAL_CAN_IRQHandler+0x72>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800a224:	4628      	mov	r0, r5
 800a226:	f7ff ff0b 	bl	800a040 <HAL_CAN_TxMailbox2AbortCallback>
 800a22a:	e749      	b.n	800a0c0 <HAL_CAN_IRQHandler+0x72>
        switch (esrflags & CAN_ESR_LEC)
 800a22c:	2b50      	cmp	r3, #80	@ 0x50
 800a22e:	d010      	beq.n	800a252 <HAL_CAN_IRQHandler+0x204>
 800a230:	2b60      	cmp	r3, #96	@ 0x60
 800a232:	d1bd      	bne.n	800a1b0 <HAL_CAN_IRQHandler+0x162>
            errorcode |= HAL_CAN_ERROR_CRC;
 800a234:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
            break;
 800a238:	e7ba      	b.n	800a1b0 <HAL_CAN_IRQHandler+0x162>
            errorcode |= HAL_CAN_ERROR_STF;
 800a23a:	f044 0408 	orr.w	r4, r4, #8
            break;
 800a23e:	e7b7      	b.n	800a1b0 <HAL_CAN_IRQHandler+0x162>
            errorcode |= HAL_CAN_ERROR_FOR;
 800a240:	f044 0410 	orr.w	r4, r4, #16
            break;
 800a244:	e7b4      	b.n	800a1b0 <HAL_CAN_IRQHandler+0x162>
            errorcode |= HAL_CAN_ERROR_ACK;
 800a246:	f044 0420 	orr.w	r4, r4, #32
            break;
 800a24a:	e7b1      	b.n	800a1b0 <HAL_CAN_IRQHandler+0x162>
            errorcode |= HAL_CAN_ERROR_BR;
 800a24c:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
            break;
 800a250:	e7ae      	b.n	800a1b0 <HAL_CAN_IRQHandler+0x162>
            errorcode |= HAL_CAN_ERROR_BD;
 800a252:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
            break;
 800a256:	e7ab      	b.n	800a1b0 <HAL_CAN_IRQHandler+0x162>

0800a258 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a258:	4907      	ldr	r1, [pc, #28]	@ (800a278 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800a25a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a25c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800a25e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a262:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a266:	0412      	lsls	r2, r2, #16
 800a268:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a26a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a26c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a270:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800a274:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800a276:	4770      	bx	lr
 800a278:	e000ed00 	.word	0xe000ed00

0800a27c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a27c:	4b15      	ldr	r3, [pc, #84]	@ (800a2d4 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a27e:	b530      	push	{r4, r5, lr}
 800a280:	68dc      	ldr	r4, [r3, #12]
 800a282:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a286:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a28a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a28c:	2b04      	cmp	r3, #4
 800a28e:	bf28      	it	cs
 800a290:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a292:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a294:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a298:	bf94      	ite	ls
 800a29a:	2400      	movls	r4, #0
 800a29c:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a29e:	fa05 f303 	lsl.w	r3, r5, r3
 800a2a2:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a2a6:	40a5      	lsls	r5, r4
 800a2a8:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a2ac:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800a2ae:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a2b0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a2b4:	bfac      	ite	ge
 800a2b6:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a2ba:	4a07      	ldrlt	r2, [pc, #28]	@ (800a2d8 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a2bc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800a2c0:	b2db      	uxtb	r3, r3
 800a2c2:	bfab      	itete	ge
 800a2c4:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a2c8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a2cc:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a2d0:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800a2d2:	bd30      	pop	{r4, r5, pc}
 800a2d4:	e000ed00 	.word	0xe000ed00
 800a2d8:	e000ed14 	.word	0xe000ed14

0800a2dc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	db07      	blt.n	800a2f0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	0941      	lsrs	r1, r0, #5
 800a2e4:	4a03      	ldr	r2, [pc, #12]	@ (800a2f4 <HAL_NVIC_EnableIRQ+0x18>)
 800a2e6:	f000 001f 	and.w	r0, r0, #31
 800a2ea:	4083      	lsls	r3, r0
 800a2ec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	e000e100 	.word	0xe000e100

0800a2f8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a2f8:	3801      	subs	r0, #1
 800a2fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800a2fe:	d20b      	bcs.n	800a318 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a300:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a304:	21f0      	movs	r1, #240	@ 0xf0
 800a306:	4a05      	ldr	r2, [pc, #20]	@ (800a31c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a308:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a30a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a30e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a310:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a312:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a314:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a316:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800a318:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800a31a:	4770      	bx	lr
 800a31c:	e000ed00 	.word	0xe000ed00

0800a320 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800a320:	4603      	mov	r3, r0
{
 800a322:	b510      	push	{r4, lr}
  if(hdma == NULL)
 800a324:	b340      	cbz	r0, 800a378 <HAL_DMA_Init+0x58>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a326:	2114      	movs	r1, #20
 800a328:	6800      	ldr	r0, [r0, #0]
 800a32a:	4a14      	ldr	r2, [pc, #80]	@ (800a37c <HAL_DMA_Init+0x5c>)
 800a32c:	4402      	add	r2, r0
 800a32e:	fbb2 f2f1 	udiv	r2, r2, r1
 800a332:	0092      	lsls	r2, r2, #2
 800a334:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800a336:	4a12      	ldr	r2, [pc, #72]	@ (800a380 <HAL_DMA_Init+0x60>)
 800a338:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a33a:	2202      	movs	r2, #2
 800a33c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a340:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 800a344:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a346:	68dc      	ldr	r4, [r3, #12]
  tmp = hdma->Instance->CCR;
 800a348:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a34a:	4322      	orrs	r2, r4
 800a34c:	691c      	ldr	r4, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800a34e:	f421 517f 	bic.w	r1, r1, #16320	@ 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a352:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a354:	695c      	ldr	r4, [r3, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800a356:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a35a:	4322      	orrs	r2, r4
 800a35c:	699c      	ldr	r4, [r3, #24]
 800a35e:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800a360:	69dc      	ldr	r4, [r3, #28]
 800a362:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 800a364:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a366:	6002      	str	r2, [r0, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a368:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800a36a:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a36c:	6398      	str	r0, [r3, #56]	@ 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a36e:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 800a372:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
}
 800a376:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a378:	2001      	movs	r0, #1
 800a37a:	e7fc      	b.n	800a376 <HAL_DMA_Init+0x56>
 800a37c:	bffdfff8 	.word	0xbffdfff8
 800a380:	40020000 	.word	0x40020000

0800a384 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a384:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a386:	f890 4020 	ldrb.w	r4, [r0, #32]
 800a38a:	2c01      	cmp	r4, #1
 800a38c:	d034      	beq.n	800a3f8 <HAL_DMA_Start_IT+0x74>
 800a38e:	2401      	movs	r4, #1
 800a390:	f880 4020 	strb.w	r4, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a394:	f890 4021 	ldrb.w	r4, [r0, #33]	@ 0x21
 800a398:	2c01      	cmp	r4, #1
 800a39a:	b2e5      	uxtb	r5, r4
 800a39c:	f04f 0400 	mov.w	r4, #0
 800a3a0:	d128      	bne.n	800a3f4 <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a3a2:	2602      	movs	r6, #2
 800a3a4:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a3a8:	6384      	str	r4, [r0, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a3aa:	6804      	ldr	r4, [r0, #0]
 800a3ac:	6826      	ldr	r6, [r4, #0]
 800a3ae:	f026 0601 	bic.w	r6, r6, #1
 800a3b2:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a3b4:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 800a3b8:	40bd      	lsls	r5, r7
 800a3ba:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a3bc:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a3be:	6843      	ldr	r3, [r0, #4]
 800a3c0:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 800a3c2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a3c4:	bf0b      	itete	eq
 800a3c6:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800a3c8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800a3ca:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800a3cc:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800a3ce:	b14b      	cbz	r3, 800a3e4 <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a3d0:	6823      	ldr	r3, [r4, #0]
 800a3d2:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 800a3d6:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a3d8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800a3da:	6823      	ldr	r3, [r4, #0]
 800a3dc:	f043 0301 	orr.w	r3, r3, #1
 800a3e0:	6023      	str	r3, [r4, #0]
}
 800a3e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a3e4:	6823      	ldr	r3, [r4, #0]
 800a3e6:	f023 0304 	bic.w	r3, r3, #4
 800a3ea:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a3ec:	6823      	ldr	r3, [r4, #0]
 800a3ee:	f043 030a 	orr.w	r3, r3, #10
 800a3f2:	e7f0      	b.n	800a3d6 <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 800a3f4:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 800a3f8:	2002      	movs	r0, #2
 800a3fa:	e7f2      	b.n	800a3e2 <HAL_DMA_Start_IT+0x5e>

0800a3fc <HAL_DMA_IRQHandler>:
{
 800a3fc:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800a3fe:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a400:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800a402:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a404:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800a406:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800a408:	4095      	lsls	r5, r2
 800a40a:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 800a40c:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800a40e:	d032      	beq.n	800a476 <HAL_DMA_IRQHandler+0x7a>
 800a410:	074d      	lsls	r5, r1, #29
 800a412:	d530      	bpl.n	800a476 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a418:	bf5e      	ittt	pl
 800a41a:	681a      	ldrpl	r2, [r3, #0]
 800a41c:	f022 0204 	bicpl.w	r2, r2, #4
 800a420:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a422:	4a3e      	ldr	r2, [pc, #248]	@ (800a51c <HAL_DMA_IRQHandler+0x120>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d019      	beq.n	800a45c <HAL_DMA_IRQHandler+0x60>
 800a428:	3214      	adds	r2, #20
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d018      	beq.n	800a460 <HAL_DMA_IRQHandler+0x64>
 800a42e:	3214      	adds	r2, #20
 800a430:	4293      	cmp	r3, r2
 800a432:	d017      	beq.n	800a464 <HAL_DMA_IRQHandler+0x68>
 800a434:	3214      	adds	r2, #20
 800a436:	4293      	cmp	r3, r2
 800a438:	d017      	beq.n	800a46a <HAL_DMA_IRQHandler+0x6e>
 800a43a:	3214      	adds	r2, #20
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d017      	beq.n	800a470 <HAL_DMA_IRQHandler+0x74>
 800a440:	3214      	adds	r2, #20
 800a442:	4293      	cmp	r3, r2
 800a444:	bf14      	ite	ne
 800a446:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 800a44a:	f44f 0380 	moveq.w	r3, #4194304	@ 0x400000
 800a44e:	4a34      	ldr	r2, [pc, #208]	@ (800a520 <HAL_DMA_IRQHandler+0x124>)
 800a450:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800a452:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if (hdma->XferErrorCallback != NULL)
 800a454:	2b00      	cmp	r3, #0
 800a456:	d05e      	beq.n	800a516 <HAL_DMA_IRQHandler+0x11a>
}
 800a458:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800a45a:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a45c:	2304      	movs	r3, #4
 800a45e:	e7f6      	b.n	800a44e <HAL_DMA_IRQHandler+0x52>
 800a460:	2340      	movs	r3, #64	@ 0x40
 800a462:	e7f4      	b.n	800a44e <HAL_DMA_IRQHandler+0x52>
 800a464:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a468:	e7f1      	b.n	800a44e <HAL_DMA_IRQHandler+0x52>
 800a46a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a46e:	e7ee      	b.n	800a44e <HAL_DMA_IRQHandler+0x52>
 800a470:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a474:	e7eb      	b.n	800a44e <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800a476:	2502      	movs	r5, #2
 800a478:	4095      	lsls	r5, r2
 800a47a:	4225      	tst	r5, r4
 800a47c:	d035      	beq.n	800a4ea <HAL_DMA_IRQHandler+0xee>
 800a47e:	078d      	lsls	r5, r1, #30
 800a480:	d533      	bpl.n	800a4ea <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	0694      	lsls	r4, r2, #26
 800a486:	d406      	bmi.n	800a496 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	f022 020a 	bic.w	r2, r2, #10
 800a48e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800a490:	2201      	movs	r2, #1
 800a492:	f880 2021 	strb.w	r2, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a496:	4a21      	ldr	r2, [pc, #132]	@ (800a51c <HAL_DMA_IRQHandler+0x120>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d019      	beq.n	800a4d0 <HAL_DMA_IRQHandler+0xd4>
 800a49c:	3214      	adds	r2, #20
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d018      	beq.n	800a4d4 <HAL_DMA_IRQHandler+0xd8>
 800a4a2:	3214      	adds	r2, #20
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d017      	beq.n	800a4d8 <HAL_DMA_IRQHandler+0xdc>
 800a4a8:	3214      	adds	r2, #20
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d017      	beq.n	800a4de <HAL_DMA_IRQHandler+0xe2>
 800a4ae:	3214      	adds	r2, #20
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d017      	beq.n	800a4e4 <HAL_DMA_IRQHandler+0xe8>
 800a4b4:	3214      	adds	r2, #20
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	bf14      	ite	ne
 800a4ba:	f04f 7300 	movne.w	r3, #33554432	@ 0x2000000
 800a4be:	f44f 1300 	moveq.w	r3, #2097152	@ 0x200000
 800a4c2:	4a17      	ldr	r2, [pc, #92]	@ (800a520 <HAL_DMA_IRQHandler+0x124>)
 800a4c4:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800a4cc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800a4ce:	e7c1      	b.n	800a454 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a4d0:	2302      	movs	r3, #2
 800a4d2:	e7f6      	b.n	800a4c2 <HAL_DMA_IRQHandler+0xc6>
 800a4d4:	2320      	movs	r3, #32
 800a4d6:	e7f4      	b.n	800a4c2 <HAL_DMA_IRQHandler+0xc6>
 800a4d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a4dc:	e7f1      	b.n	800a4c2 <HAL_DMA_IRQHandler+0xc6>
 800a4de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a4e2:	e7ee      	b.n	800a4c2 <HAL_DMA_IRQHandler+0xc6>
 800a4e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a4e8:	e7eb      	b.n	800a4c2 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800a4ea:	2508      	movs	r5, #8
 800a4ec:	4095      	lsls	r5, r2
 800a4ee:	4225      	tst	r5, r4
 800a4f0:	d011      	beq.n	800a516 <HAL_DMA_IRQHandler+0x11a>
 800a4f2:	0709      	lsls	r1, r1, #28
 800a4f4:	d50f      	bpl.n	800a516 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a4f6:	6819      	ldr	r1, [r3, #0]
 800a4f8:	f021 010e 	bic.w	r1, r1, #14
 800a4fc:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a4fe:	2301      	movs	r3, #1
 800a500:	fa03 f202 	lsl.w	r2, r3, r2
 800a504:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a506:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800a508:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 800a50c:	2300      	movs	r3, #0
 800a50e:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800a512:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a514:	e79e      	b.n	800a454 <HAL_DMA_IRQHandler+0x58>
}
 800a516:	bc70      	pop	{r4, r5, r6}
 800a518:	4770      	bx	lr
 800a51a:	bf00      	nop
 800a51c:	40020008 	.word	0x40020008
 800a520:	40020000 	.word	0x40020000

0800a524 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800a524:	4a11      	ldr	r2, [pc, #68]	@ (800a56c <FLASH_SetErrorCode+0x48>)
 800a526:	68d3      	ldr	r3, [r2, #12]
 800a528:	f013 0310 	ands.w	r3, r3, #16
 800a52c:	d005      	beq.n	800a53a <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800a52e:	4910      	ldr	r1, [pc, #64]	@ (800a570 <FLASH_SetErrorCode+0x4c>)
 800a530:	69cb      	ldr	r3, [r1, #28]
 800a532:	f043 0302 	orr.w	r3, r3, #2
 800a536:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800a538:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800a53a:	68d2      	ldr	r2, [r2, #12]
 800a53c:	0750      	lsls	r0, r2, #29
 800a53e:	d506      	bpl.n	800a54e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800a540:	490b      	ldr	r1, [pc, #44]	@ (800a570 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800a542:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800a546:	69ca      	ldr	r2, [r1, #28]
 800a548:	f042 0201 	orr.w	r2, r2, #1
 800a54c:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800a54e:	4a07      	ldr	r2, [pc, #28]	@ (800a56c <FLASH_SetErrorCode+0x48>)
 800a550:	69d1      	ldr	r1, [r2, #28]
 800a552:	07c9      	lsls	r1, r1, #31
 800a554:	d508      	bpl.n	800a568 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800a556:	4806      	ldr	r0, [pc, #24]	@ (800a570 <FLASH_SetErrorCode+0x4c>)
 800a558:	69c1      	ldr	r1, [r0, #28]
 800a55a:	f041 0104 	orr.w	r1, r1, #4
 800a55e:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800a560:	69d1      	ldr	r1, [r2, #28]
 800a562:	f021 0101 	bic.w	r1, r1, #1
 800a566:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800a568:	60d3      	str	r3, [r2, #12]
}  
 800a56a:	4770      	bx	lr
 800a56c:	40022000 	.word	0x40022000
 800a570:	20001f68 	.word	0x20001f68

0800a574 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a574:	4b06      	ldr	r3, [pc, #24]	@ (800a590 <HAL_FLASH_Unlock+0x1c>)
 800a576:	6918      	ldr	r0, [r3, #16]
 800a578:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 800a57c:	d007      	beq.n	800a58e <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800a57e:	4a05      	ldr	r2, [pc, #20]	@ (800a594 <HAL_FLASH_Unlock+0x20>)
 800a580:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800a582:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 800a586:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a588:	6918      	ldr	r0, [r3, #16]
 800a58a:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 800a58e:	4770      	bx	lr
 800a590:	40022000 	.word	0x40022000
 800a594:	45670123 	.word	0x45670123

0800a598 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800a598:	4a03      	ldr	r2, [pc, #12]	@ (800a5a8 <HAL_FLASH_Lock+0x10>)
}
 800a59a:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800a59c:	6913      	ldr	r3, [r2, #16]
 800a59e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5a2:	6113      	str	r3, [r2, #16]
}
 800a5a4:	4770      	bx	lr
 800a5a6:	bf00      	nop
 800a5a8:	40022000 	.word	0x40022000

0800a5ac <FLASH_WaitForLastOperation>:
{
 800a5ac:	b570      	push	{r4, r5, r6, lr}
 800a5ae:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800a5b0:	f7ff fb2c 	bl	8009c0c <HAL_GetTick>
 800a5b4:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800a5b6:	4c11      	ldr	r4, [pc, #68]	@ (800a5fc <FLASH_WaitForLastOperation+0x50>)
 800a5b8:	68e3      	ldr	r3, [r4, #12]
 800a5ba:	07d8      	lsls	r0, r3, #31
 800a5bc:	d412      	bmi.n	800a5e4 <FLASH_WaitForLastOperation+0x38>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800a5be:	68e3      	ldr	r3, [r4, #12]
 800a5c0:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a5c2:	bf44      	itt	mi
 800a5c4:	2320      	movmi	r3, #32
 800a5c6:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800a5c8:	68e3      	ldr	r3, [r4, #12]
 800a5ca:	06da      	lsls	r2, r3, #27
 800a5cc:	d406      	bmi.n	800a5dc <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800a5ce:	69e3      	ldr	r3, [r4, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800a5d0:	07db      	lsls	r3, r3, #31
 800a5d2:	d403      	bmi.n	800a5dc <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800a5d4:	68e0      	ldr	r0, [r4, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800a5d6:	f010 0004 	ands.w	r0, r0, #4
 800a5da:	d007      	beq.n	800a5ec <FLASH_WaitForLastOperation+0x40>
    FLASH_SetErrorCode();
 800a5dc:	f7ff ffa2 	bl	800a524 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800a5e0:	2001      	movs	r0, #1
 800a5e2:	e003      	b.n	800a5ec <FLASH_WaitForLastOperation+0x40>
    if (Timeout != HAL_MAX_DELAY)
 800a5e4:	1c6b      	adds	r3, r5, #1
 800a5e6:	d0e7      	beq.n	800a5b8 <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800a5e8:	b90d      	cbnz	r5, 800a5ee <FLASH_WaitForLastOperation+0x42>
        return HAL_TIMEOUT;
 800a5ea:	2003      	movs	r0, #3
}
 800a5ec:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800a5ee:	f7ff fb0d 	bl	8009c0c <HAL_GetTick>
 800a5f2:	1b80      	subs	r0, r0, r6
 800a5f4:	42a8      	cmp	r0, r5
 800a5f6:	d9df      	bls.n	800a5b8 <FLASH_WaitForLastOperation+0xc>
 800a5f8:	e7f7      	b.n	800a5ea <FLASH_WaitForLastOperation+0x3e>
 800a5fa:	bf00      	nop
 800a5fc:	40022000 	.word	0x40022000

0800a600 <HAL_FLASH_Program>:
{
 800a600:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 800a604:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800a69c <HAL_FLASH_Program+0x9c>
{
 800a608:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 800a60a:	f89a 3018 	ldrb.w	r3, [sl, #24]
{
 800a60e:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 800a610:	2b01      	cmp	r3, #1
{
 800a612:	4688      	mov	r8, r1
 800a614:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 800a616:	d03f      	beq.n	800a698 <HAL_FLASH_Program+0x98>
 800a618:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800a61a:	f24c 3050 	movw	r0, #50000	@ 0xc350
  __HAL_LOCK(&pFlash);
 800a61e:	f88a 3018 	strb.w	r3, [sl, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800a622:	f7ff ffc3 	bl	800a5ac <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800a626:	bb90      	cbnz	r0, 800a68e <HAL_FLASH_Program+0x8e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800a628:	2d01      	cmp	r5, #1
 800a62a:	d003      	beq.n	800a634 <HAL_FLASH_Program+0x34>
      nbiterations = 2U;
 800a62c:	2d02      	cmp	r5, #2
 800a62e:	bf14      	ite	ne
 800a630:	2504      	movne	r5, #4
 800a632:	2502      	moveq	r5, #2
      nbiterations = 4U;
 800a634:	2600      	movs	r6, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a636:	4633      	mov	r3, r6
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800a638:	f8df b064 	ldr.w	fp, [pc, #100]	@ 800a6a0 <HAL_FLASH_Program+0xa0>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800a63c:	0134      	lsls	r4, r6, #4
 800a63e:	f1c4 0120 	rsb	r1, r4, #32
 800a642:	f1a4 0220 	sub.w	r2, r4, #32
 800a646:	fa07 f101 	lsl.w	r1, r7, r1
 800a64a:	fa29 f404 	lsr.w	r4, r9, r4
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a64e:	f8ca 301c 	str.w	r3, [sl, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800a652:	430c      	orrs	r4, r1
 800a654:	fa27 f202 	lsr.w	r2, r7, r2
 800a658:	4314      	orrs	r4, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800a65a:	f8db 2010 	ldr.w	r2, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800a65e:	b2a4      	uxth	r4, r4
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800a660:	f042 0201 	orr.w	r2, r2, #1
 800a664:	f8cb 2010 	str.w	r2, [fp, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800a668:	f24c 3050 	movw	r0, #50000	@ 0xc350
  *(__IO uint16_t*)Address = Data;
 800a66c:	f828 4016 	strh.w	r4, [r8, r6, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800a670:	f7ff ff9c 	bl	800a5ac <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a674:	f8db 2010 	ldr.w	r2, [fp, #16]
 800a678:	f022 0201 	bic.w	r2, r2, #1
 800a67c:	f8cb 2010 	str.w	r2, [fp, #16]
      if (status != HAL_OK)
 800a680:	b928      	cbnz	r0, 800a68e <HAL_FLASH_Program+0x8e>
    for (index = 0U; index < nbiterations; index++)
 800a682:	3601      	adds	r6, #1
 800a684:	b2f2      	uxtb	r2, r6
 800a686:	4295      	cmp	r5, r2
 800a688:	f04f 0300 	mov.w	r3, #0
 800a68c:	d8d6      	bhi.n	800a63c <HAL_FLASH_Program+0x3c>
  __HAL_UNLOCK(&pFlash);
 800a68e:	2300      	movs	r3, #0
 800a690:	f88a 3018 	strb.w	r3, [sl, #24]
}
 800a694:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 800a698:	2002      	movs	r0, #2
 800a69a:	e7fb      	b.n	800a694 <HAL_FLASH_Program+0x94>
 800a69c:	20001f68 	.word	0x20001f68
 800a6a0:	40022000 	.word	0x40022000

0800a6a4 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	4b06      	ldr	r3, [pc, #24]	@ (800a6c0 <FLASH_PageErase+0x1c>)
 800a6a8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800a6aa:	4b06      	ldr	r3, [pc, #24]	@ (800a6c4 <FLASH_PageErase+0x20>)
 800a6ac:	691a      	ldr	r2, [r3, #16]
 800a6ae:	f042 0202 	orr.w	r2, r2, #2
 800a6b2:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800a6b4:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800a6b6:	691a      	ldr	r2, [r3, #16]
 800a6b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a6bc:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800a6be:	4770      	bx	lr
 800a6c0:	20001f68 	.word	0x20001f68
 800a6c4:	40022000 	.word	0x40022000

0800a6c8 <HAL_FLASHEx_Erase>:
{
 800a6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 800a6cc:	4f26      	ldr	r7, [pc, #152]	@ (800a768 <HAL_FLASHEx_Erase+0xa0>)
{
 800a6ce:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 800a6d0:	7e3b      	ldrb	r3, [r7, #24]
{
 800a6d2:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d044      	beq.n	800a762 <HAL_FLASHEx_Erase+0x9a>
 800a6d8:	2401      	movs	r4, #1
 800a6da:	763c      	strb	r4, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a6dc:	6803      	ldr	r3, [r0, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800a6de:	f24c 3050 	movw	r0, #50000	@ 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a6e2:	2b02      	cmp	r3, #2
 800a6e4:	d11a      	bne.n	800a71c <HAL_FLASHEx_Erase+0x54>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800a6e6:	f7ff ff61 	bl	800a5ac <FLASH_WaitForLastOperation>
 800a6ea:	b120      	cbz	r0, 800a6f6 <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 800a6ec:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	763b      	strb	r3, [r7, #24]
}
 800a6f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800a6f6:	4c1d      	ldr	r4, [pc, #116]	@ (800a76c <HAL_FLASHEx_Erase+0xa4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a6f8:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800a6fa:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a6fc:	f24c 3050 	movw	r0, #50000	@ 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800a700:	f043 0304 	orr.w	r3, r3, #4
 800a704:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800a706:	6923      	ldr	r3, [r4, #16]
 800a708:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a70c:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a70e:	f7ff ff4d 	bl	800a5ac <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800a712:	6923      	ldr	r3, [r4, #16]
 800a714:	f023 0304 	bic.w	r3, r3, #4
 800a718:	6123      	str	r3, [r4, #16]
 800a71a:	e7e8      	b.n	800a6ee <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800a71c:	f7ff ff46 	bl	800a5ac <FLASH_WaitForLastOperation>
 800a720:	2800      	cmp	r0, #0
 800a722:	d1e3      	bne.n	800a6ec <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 800a724:	f04f 33ff 	mov.w	r3, #4294967295
 800a728:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a72c:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 800a72e:	68ae      	ldr	r6, [r5, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800a730:	4c0e      	ldr	r4, [pc, #56]	@ (800a76c <HAL_FLASHEx_Erase+0xa4>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800a732:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800a736:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 800a73a:	42b3      	cmp	r3, r6
 800a73c:	d9d7      	bls.n	800a6ee <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 800a73e:	4630      	mov	r0, r6
 800a740:	f7ff ffb0 	bl	800a6a4 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a744:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a748:	f7ff ff30 	bl	800a5ac <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800a74c:	6923      	ldr	r3, [r4, #16]
 800a74e:	f023 0302 	bic.w	r3, r3, #2
 800a752:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 800a754:	b110      	cbz	r0, 800a75c <HAL_FLASHEx_Erase+0x94>
            *PageError = address;
 800a756:	f8c8 6000 	str.w	r6, [r8]
            break;
 800a75a:	e7c8      	b.n	800a6ee <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 800a75c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800a760:	e7e7      	b.n	800a732 <HAL_FLASHEx_Erase+0x6a>
  __HAL_LOCK(&pFlash);
 800a762:	2002      	movs	r0, #2
 800a764:	e7c5      	b.n	800a6f2 <HAL_FLASHEx_Erase+0x2a>
 800a766:	bf00      	nop
 800a768:	20001f68 	.word	0x20001f68
 800a76c:	40022000 	.word	0x40022000

0800a770 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a770:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800a774:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800a776:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800a778:	f8df c188 	ldr.w	ip, [pc, #392]	@ 800a904 <HAL_GPIO_Init+0x194>
 800a77c:	4b62      	ldr	r3, [pc, #392]	@ (800a908 <HAL_GPIO_Init+0x198>)
      switch (GPIO_Init->Mode)
 800a77e:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 800a90c <HAL_GPIO_Init+0x19c>
 800a782:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 800a910 <HAL_GPIO_Init+0x1a0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a786:	680a      	ldr	r2, [r1, #0]
 800a788:	fa32 f506 	lsrs.w	r5, r2, r6
 800a78c:	d102      	bne.n	800a794 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 800a78e:	b003      	add	sp, #12
 800a790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800a794:	2701      	movs	r7, #1
 800a796:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a798:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 800a79c:	ea37 0202 	bics.w	r2, r7, r2
 800a7a0:	d17a      	bne.n	800a898 <HAL_GPIO_Init+0x128>
      switch (GPIO_Init->Mode)
 800a7a2:	684a      	ldr	r2, [r1, #4]
 800a7a4:	2a03      	cmp	r2, #3
 800a7a6:	d807      	bhi.n	800a7b8 <HAL_GPIO_Init+0x48>
 800a7a8:	3a01      	subs	r2, #1
 800a7aa:	2a02      	cmp	r2, #2
 800a7ac:	f200 8083 	bhi.w	800a8b6 <HAL_GPIO_Init+0x146>
 800a7b0:	e8df f002 	tbb	[pc, r2]
 800a7b4:	9792      	.short	0x9792
 800a7b6:	9d          	.byte	0x9d
 800a7b7:	00          	.byte	0x00
 800a7b8:	2a12      	cmp	r2, #18
 800a7ba:	f000 8095 	beq.w	800a8e8 <HAL_GPIO_Init+0x178>
 800a7be:	d86d      	bhi.n	800a89c <HAL_GPIO_Init+0x12c>
 800a7c0:	2a11      	cmp	r2, #17
 800a7c2:	f000 808b 	beq.w	800a8dc <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a7c6:	2dff      	cmp	r5, #255	@ 0xff
 800a7c8:	bf98      	it	ls
 800a7ca:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800a7cc:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a7d0:	bf88      	it	hi
 800a7d2:	f100 0904 	addhi.w	r9, r0, #4
 800a7d6:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800a7da:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a7de:	bf88      	it	hi
 800a7e0:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800a7e2:	fa0b fa02 	lsl.w	sl, fp, r2
 800a7e6:	ea27 070a 	bic.w	r7, r7, sl
 800a7ea:	fa04 f202 	lsl.w	r2, r4, r2
 800a7ee:	4317      	orrs	r7, r2
 800a7f0:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a7f4:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800a7f8:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 800a7fc:	d04c      	beq.n	800a898 <HAL_GPIO_Init+0x128>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800a7fe:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800a802:	f026 0703 	bic.w	r7, r6, #3
 800a806:	f042 0201 	orr.w	r2, r2, #1
 800a80a:	f8cc 2018 	str.w	r2, [ip, #24]
 800a80e:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800a812:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 800a816:	f002 0201 	and.w	r2, r2, #1
 800a81a:	9201      	str	r2, [sp, #4]
 800a81c:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800a820:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800a824:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800a826:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800a82a:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800a82c:	fa0b fb0a 	lsl.w	fp, fp, sl
 800a830:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800a834:	4a37      	ldr	r2, [pc, #220]	@ (800a914 <HAL_GPIO_Init+0x1a4>)
 800a836:	4290      	cmp	r0, r2
 800a838:	d05d      	beq.n	800a8f6 <HAL_GPIO_Init+0x186>
 800a83a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a83e:	4290      	cmp	r0, r2
 800a840:	d05b      	beq.n	800a8fa <HAL_GPIO_Init+0x18a>
 800a842:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a846:	4290      	cmp	r0, r2
 800a848:	d059      	beq.n	800a8fe <HAL_GPIO_Init+0x18e>
 800a84a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a84e:	4290      	cmp	r0, r2
 800a850:	bf14      	ite	ne
 800a852:	2204      	movne	r2, #4
 800a854:	2203      	moveq	r2, #3
 800a856:	fa02 f20a 	lsl.w	r2, r2, sl
 800a85a:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 800a85e:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 800a860:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a862:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800a866:	bf14      	ite	ne
 800a868:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800a86a:	43aa      	biceq	r2, r5
 800a86c:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800a86e:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a870:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800a874:	bf14      	ite	ne
 800a876:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800a878:	43aa      	biceq	r2, r5
 800a87a:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 800a87c:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a87e:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800a882:	bf14      	ite	ne
 800a884:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800a886:	43aa      	biceq	r2, r5
 800a888:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 800a88a:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a88c:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800a890:	bf14      	ite	ne
 800a892:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800a894:	43aa      	biceq	r2, r5
 800a896:	601a      	str	r2, [r3, #0]
	position++;
 800a898:	3601      	adds	r6, #1
 800a89a:	e774      	b.n	800a786 <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 800a89c:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 800a918 <HAL_GPIO_Init+0x1a8>
 800a8a0:	454a      	cmp	r2, r9
 800a8a2:	d008      	beq.n	800a8b6 <HAL_GPIO_Init+0x146>
 800a8a4:	d810      	bhi.n	800a8c8 <HAL_GPIO_Init+0x158>
 800a8a6:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 800a8aa:	454a      	cmp	r2, r9
 800a8ac:	d003      	beq.n	800a8b6 <HAL_GPIO_Init+0x146>
 800a8ae:	4572      	cmp	r2, lr
 800a8b0:	d001      	beq.n	800a8b6 <HAL_GPIO_Init+0x146>
 800a8b2:	4542      	cmp	r2, r8
 800a8b4:	d187      	bne.n	800a7c6 <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800a8b6:	688a      	ldr	r2, [r1, #8]
 800a8b8:	b1da      	cbz	r2, 800a8f2 <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800a8ba:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a8bc:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 800a8c0:	bf0c      	ite	eq
 800a8c2:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 800a8c4:	6147      	strne	r7, [r0, #20]
 800a8c6:	e77e      	b.n	800a7c6 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 800a8c8:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 800a91c <HAL_GPIO_Init+0x1ac>
 800a8cc:	454a      	cmp	r2, r9
 800a8ce:	d0f2      	beq.n	800a8b6 <HAL_GPIO_Init+0x146>
 800a8d0:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 800a8d4:	454a      	cmp	r2, r9
 800a8d6:	e7ed      	b.n	800a8b4 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800a8d8:	68cc      	ldr	r4, [r1, #12]
          break;
 800a8da:	e774      	b.n	800a7c6 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800a8dc:	68cc      	ldr	r4, [r1, #12]
 800a8de:	3404      	adds	r4, #4
          break;
 800a8e0:	e771      	b.n	800a7c6 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800a8e2:	68cc      	ldr	r4, [r1, #12]
 800a8e4:	3408      	adds	r4, #8
          break;
 800a8e6:	e76e      	b.n	800a7c6 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800a8e8:	68cc      	ldr	r4, [r1, #12]
 800a8ea:	340c      	adds	r4, #12
          break;
 800a8ec:	e76b      	b.n	800a7c6 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 800a8ee:	2400      	movs	r4, #0
 800a8f0:	e769      	b.n	800a7c6 <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800a8f2:	2404      	movs	r4, #4
 800a8f4:	e767      	b.n	800a7c6 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	e7ad      	b.n	800a856 <HAL_GPIO_Init+0xe6>
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	e7ab      	b.n	800a856 <HAL_GPIO_Init+0xe6>
 800a8fe:	2202      	movs	r2, #2
 800a900:	e7a9      	b.n	800a856 <HAL_GPIO_Init+0xe6>
 800a902:	bf00      	nop
 800a904:	40021000 	.word	0x40021000
 800a908:	40010400 	.word	0x40010400
 800a90c:	10210000 	.word	0x10210000
 800a910:	10110000 	.word	0x10110000
 800a914:	40010800 	.word	0x40010800
 800a918:	10220000 	.word	0x10220000
 800a91c:	10310000 	.word	0x10310000

0800a920 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a920:	b10a      	cbz	r2, 800a926 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a922:	6101      	str	r1, [r0, #16]
  }
}
 800a924:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a926:	0409      	lsls	r1, r1, #16
 800a928:	e7fb      	b.n	800a922 <HAL_GPIO_WritePin+0x2>

0800a92a <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800a92a:	4770      	bx	lr

0800a92c <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a92c:	4a04      	ldr	r2, [pc, #16]	@ (800a940 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 800a92e:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a930:	6951      	ldr	r1, [r2, #20]
 800a932:	4201      	tst	r1, r0
 800a934:	d002      	beq.n	800a93c <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a936:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a938:	f7ff fff7 	bl	800a92a <HAL_GPIO_EXTI_Callback>
}
 800a93c:	bd08      	pop	{r3, pc}
 800a93e:	bf00      	nop
 800a940:	40010400 	.word	0x40010400

0800a944 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800a944:	2201      	movs	r2, #1
 800a946:	4b01      	ldr	r3, [pc, #4]	@ (800a94c <HAL_PWR_EnableBkUpAccess+0x8>)
 800a948:	621a      	str	r2, [r3, #32]
}
 800a94a:	4770      	bx	lr
 800a94c:	420e0000 	.word	0x420e0000

0800a950 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a950:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a954:	4605      	mov	r5, r0
 800a956:	b338      	cbz	r0, 800a9a8 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a958:	6803      	ldr	r3, [r0, #0]
 800a95a:	07db      	lsls	r3, r3, #31
 800a95c:	d410      	bmi.n	800a980 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a95e:	682b      	ldr	r3, [r5, #0]
 800a960:	079f      	lsls	r7, r3, #30
 800a962:	d45e      	bmi.n	800aa22 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a964:	682b      	ldr	r3, [r5, #0]
 800a966:	0719      	lsls	r1, r3, #28
 800a968:	f100 8095 	bmi.w	800aa96 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a96c:	682b      	ldr	r3, [r5, #0]
 800a96e:	075a      	lsls	r2, r3, #29
 800a970:	f100 80c1 	bmi.w	800aaf6 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a974:	69eb      	ldr	r3, [r5, #28]
 800a976:	2b00      	cmp	r3, #0
 800a978:	f040 812c 	bne.w	800abd4 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 800a97c:	2000      	movs	r0, #0
 800a97e:	e029      	b.n	800a9d4 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a980:	4c90      	ldr	r4, [pc, #576]	@ (800abc4 <HAL_RCC_OscConfig+0x274>)
 800a982:	6863      	ldr	r3, [r4, #4]
 800a984:	f003 030c 	and.w	r3, r3, #12
 800a988:	2b04      	cmp	r3, #4
 800a98a:	d007      	beq.n	800a99c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a98c:	6863      	ldr	r3, [r4, #4]
 800a98e:	f003 030c 	and.w	r3, r3, #12
 800a992:	2b08      	cmp	r3, #8
 800a994:	d10a      	bne.n	800a9ac <HAL_RCC_OscConfig+0x5c>
 800a996:	6863      	ldr	r3, [r4, #4]
 800a998:	03de      	lsls	r6, r3, #15
 800a99a:	d507      	bpl.n	800a9ac <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a99c:	6823      	ldr	r3, [r4, #0]
 800a99e:	039c      	lsls	r4, r3, #14
 800a9a0:	d5dd      	bpl.n	800a95e <HAL_RCC_OscConfig+0xe>
 800a9a2:	686b      	ldr	r3, [r5, #4]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d1da      	bne.n	800a95e <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800a9a8:	2001      	movs	r0, #1
 800a9aa:	e013      	b.n	800a9d4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a9ac:	686b      	ldr	r3, [r5, #4]
 800a9ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9b2:	d112      	bne.n	800a9da <HAL_RCC_OscConfig+0x8a>
 800a9b4:	6823      	ldr	r3, [r4, #0]
 800a9b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a9ba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800a9bc:	f7ff f926 	bl	8009c0c <HAL_GetTick>
 800a9c0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a9c2:	6823      	ldr	r3, [r4, #0]
 800a9c4:	0398      	lsls	r0, r3, #14
 800a9c6:	d4ca      	bmi.n	800a95e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9c8:	f7ff f920 	bl	8009c0c <HAL_GetTick>
 800a9cc:	1b80      	subs	r0, r0, r6
 800a9ce:	2864      	cmp	r0, #100	@ 0x64
 800a9d0:	d9f7      	bls.n	800a9c2 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 800a9d2:	2003      	movs	r0, #3
}
 800a9d4:	b002      	add	sp, #8
 800a9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a9da:	b99b      	cbnz	r3, 800aa04 <HAL_RCC_OscConfig+0xb4>
 800a9dc:	6823      	ldr	r3, [r4, #0]
 800a9de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a9e2:	6023      	str	r3, [r4, #0]
 800a9e4:	6823      	ldr	r3, [r4, #0]
 800a9e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a9ea:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800a9ec:	f7ff f90e 	bl	8009c0c <HAL_GetTick>
 800a9f0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a9f2:	6823      	ldr	r3, [r4, #0]
 800a9f4:	0399      	lsls	r1, r3, #14
 800a9f6:	d5b2      	bpl.n	800a95e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9f8:	f7ff f908 	bl	8009c0c <HAL_GetTick>
 800a9fc:	1b80      	subs	r0, r0, r6
 800a9fe:	2864      	cmp	r0, #100	@ 0x64
 800aa00:	d9f7      	bls.n	800a9f2 <HAL_RCC_OscConfig+0xa2>
 800aa02:	e7e6      	b.n	800a9d2 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aa04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aa08:	6823      	ldr	r3, [r4, #0]
 800aa0a:	d103      	bne.n	800aa14 <HAL_RCC_OscConfig+0xc4>
 800aa0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800aa10:	6023      	str	r3, [r4, #0]
 800aa12:	e7cf      	b.n	800a9b4 <HAL_RCC_OscConfig+0x64>
 800aa14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa18:	6023      	str	r3, [r4, #0]
 800aa1a:	6823      	ldr	r3, [r4, #0]
 800aa1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800aa20:	e7cb      	b.n	800a9ba <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800aa22:	4c68      	ldr	r4, [pc, #416]	@ (800abc4 <HAL_RCC_OscConfig+0x274>)
 800aa24:	6863      	ldr	r3, [r4, #4]
 800aa26:	f013 0f0c 	tst.w	r3, #12
 800aa2a:	d007      	beq.n	800aa3c <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800aa2c:	6863      	ldr	r3, [r4, #4]
 800aa2e:	f003 030c 	and.w	r3, r3, #12
 800aa32:	2b08      	cmp	r3, #8
 800aa34:	d110      	bne.n	800aa58 <HAL_RCC_OscConfig+0x108>
 800aa36:	6863      	ldr	r3, [r4, #4]
 800aa38:	03da      	lsls	r2, r3, #15
 800aa3a:	d40d      	bmi.n	800aa58 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aa3c:	6823      	ldr	r3, [r4, #0]
 800aa3e:	079b      	lsls	r3, r3, #30
 800aa40:	d502      	bpl.n	800aa48 <HAL_RCC_OscConfig+0xf8>
 800aa42:	692b      	ldr	r3, [r5, #16]
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d1af      	bne.n	800a9a8 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa48:	6823      	ldr	r3, [r4, #0]
 800aa4a:	696a      	ldr	r2, [r5, #20]
 800aa4c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800aa50:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800aa54:	6023      	str	r3, [r4, #0]
 800aa56:	e785      	b.n	800a964 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aa58:	692a      	ldr	r2, [r5, #16]
 800aa5a:	4b5b      	ldr	r3, [pc, #364]	@ (800abc8 <HAL_RCC_OscConfig+0x278>)
 800aa5c:	b16a      	cbz	r2, 800aa7a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800aa5e:	2201      	movs	r2, #1
 800aa60:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800aa62:	f7ff f8d3 	bl	8009c0c <HAL_GetTick>
 800aa66:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa68:	6823      	ldr	r3, [r4, #0]
 800aa6a:	079f      	lsls	r7, r3, #30
 800aa6c:	d4ec      	bmi.n	800aa48 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa6e:	f7ff f8cd 	bl	8009c0c <HAL_GetTick>
 800aa72:	1b80      	subs	r0, r0, r6
 800aa74:	2802      	cmp	r0, #2
 800aa76:	d9f7      	bls.n	800aa68 <HAL_RCC_OscConfig+0x118>
 800aa78:	e7ab      	b.n	800a9d2 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800aa7a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800aa7c:	f7ff f8c6 	bl	8009c0c <HAL_GetTick>
 800aa80:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa82:	6823      	ldr	r3, [r4, #0]
 800aa84:	0798      	lsls	r0, r3, #30
 800aa86:	f57f af6d 	bpl.w	800a964 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa8a:	f7ff f8bf 	bl	8009c0c <HAL_GetTick>
 800aa8e:	1b80      	subs	r0, r0, r6
 800aa90:	2802      	cmp	r0, #2
 800aa92:	d9f6      	bls.n	800aa82 <HAL_RCC_OscConfig+0x132>
 800aa94:	e79d      	b.n	800a9d2 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aa96:	69aa      	ldr	r2, [r5, #24]
 800aa98:	4e4a      	ldr	r6, [pc, #296]	@ (800abc4 <HAL_RCC_OscConfig+0x274>)
 800aa9a:	4b4b      	ldr	r3, [pc, #300]	@ (800abc8 <HAL_RCC_OscConfig+0x278>)
 800aa9c:	b1e2      	cbz	r2, 800aad8 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800aaa4:	f7ff f8b2 	bl	8009c0c <HAL_GetTick>
 800aaa8:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aaaa:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800aaac:	079b      	lsls	r3, r3, #30
 800aaae:	d50d      	bpl.n	800aacc <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800aab0:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800aab4:	4b45      	ldr	r3, [pc, #276]	@ (800abcc <HAL_RCC_OscConfig+0x27c>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	fbb3 f3f2 	udiv	r3, r3, r2
 800aabc:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800aabe:	bf00      	nop
  }
  while (Delay --);
 800aac0:	9b01      	ldr	r3, [sp, #4]
 800aac2:	1e5a      	subs	r2, r3, #1
 800aac4:	9201      	str	r2, [sp, #4]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d1f9      	bne.n	800aabe <HAL_RCC_OscConfig+0x16e>
 800aaca:	e74f      	b.n	800a96c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aacc:	f7ff f89e 	bl	8009c0c <HAL_GetTick>
 800aad0:	1b00      	subs	r0, r0, r4
 800aad2:	2802      	cmp	r0, #2
 800aad4:	d9e9      	bls.n	800aaaa <HAL_RCC_OscConfig+0x15a>
 800aad6:	e77c      	b.n	800a9d2 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 800aad8:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800aadc:	f7ff f896 	bl	8009c0c <HAL_GetTick>
 800aae0:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aae2:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800aae4:	079f      	lsls	r7, r3, #30
 800aae6:	f57f af41 	bpl.w	800a96c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aaea:	f7ff f88f 	bl	8009c0c <HAL_GetTick>
 800aaee:	1b00      	subs	r0, r0, r4
 800aaf0:	2802      	cmp	r0, #2
 800aaf2:	d9f6      	bls.n	800aae2 <HAL_RCC_OscConfig+0x192>
 800aaf4:	e76d      	b.n	800a9d2 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aaf6:	4c33      	ldr	r4, [pc, #204]	@ (800abc4 <HAL_RCC_OscConfig+0x274>)
 800aaf8:	69e3      	ldr	r3, [r4, #28]
 800aafa:	00d8      	lsls	r0, r3, #3
 800aafc:	d424      	bmi.n	800ab48 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 800aafe:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab00:	69e3      	ldr	r3, [r4, #28]
 800ab02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ab06:	61e3      	str	r3, [r4, #28]
 800ab08:	69e3      	ldr	r3, [r4, #28]
 800ab0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ab0e:	9300      	str	r3, [sp, #0]
 800ab10:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab12:	4e2f      	ldr	r6, [pc, #188]	@ (800abd0 <HAL_RCC_OscConfig+0x280>)
 800ab14:	6833      	ldr	r3, [r6, #0]
 800ab16:	05d9      	lsls	r1, r3, #23
 800ab18:	d518      	bpl.n	800ab4c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab1a:	68eb      	ldr	r3, [r5, #12]
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d126      	bne.n	800ab6e <HAL_RCC_OscConfig+0x21e>
 800ab20:	6a23      	ldr	r3, [r4, #32]
 800ab22:	f043 0301 	orr.w	r3, r3, #1
 800ab26:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800ab28:	f7ff f870 	bl	8009c0c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab2c:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800ab30:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab32:	6a23      	ldr	r3, [r4, #32]
 800ab34:	079b      	lsls	r3, r3, #30
 800ab36:	d53f      	bpl.n	800abb8 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 800ab38:	2f00      	cmp	r7, #0
 800ab3a:	f43f af1b 	beq.w	800a974 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800ab3e:	69e3      	ldr	r3, [r4, #28]
 800ab40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ab44:	61e3      	str	r3, [r4, #28]
 800ab46:	e715      	b.n	800a974 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800ab48:	2700      	movs	r7, #0
 800ab4a:	e7e2      	b.n	800ab12 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ab4c:	6833      	ldr	r3, [r6, #0]
 800ab4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ab52:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800ab54:	f7ff f85a 	bl	8009c0c <HAL_GetTick>
 800ab58:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab5a:	6833      	ldr	r3, [r6, #0]
 800ab5c:	05da      	lsls	r2, r3, #23
 800ab5e:	d4dc      	bmi.n	800ab1a <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab60:	f7ff f854 	bl	8009c0c <HAL_GetTick>
 800ab64:	eba0 0008 	sub.w	r0, r0, r8
 800ab68:	2864      	cmp	r0, #100	@ 0x64
 800ab6a:	d9f6      	bls.n	800ab5a <HAL_RCC_OscConfig+0x20a>
 800ab6c:	e731      	b.n	800a9d2 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab6e:	b9ab      	cbnz	r3, 800ab9c <HAL_RCC_OscConfig+0x24c>
 800ab70:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab72:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab76:	f023 0301 	bic.w	r3, r3, #1
 800ab7a:	6223      	str	r3, [r4, #32]
 800ab7c:	6a23      	ldr	r3, [r4, #32]
 800ab7e:	f023 0304 	bic.w	r3, r3, #4
 800ab82:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800ab84:	f7ff f842 	bl	8009c0c <HAL_GetTick>
 800ab88:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ab8a:	6a23      	ldr	r3, [r4, #32]
 800ab8c:	0798      	lsls	r0, r3, #30
 800ab8e:	d5d3      	bpl.n	800ab38 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab90:	f7ff f83c 	bl	8009c0c <HAL_GetTick>
 800ab94:	1b80      	subs	r0, r0, r6
 800ab96:	4540      	cmp	r0, r8
 800ab98:	d9f7      	bls.n	800ab8a <HAL_RCC_OscConfig+0x23a>
 800ab9a:	e71a      	b.n	800a9d2 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab9c:	2b05      	cmp	r3, #5
 800ab9e:	6a23      	ldr	r3, [r4, #32]
 800aba0:	d103      	bne.n	800abaa <HAL_RCC_OscConfig+0x25a>
 800aba2:	f043 0304 	orr.w	r3, r3, #4
 800aba6:	6223      	str	r3, [r4, #32]
 800aba8:	e7ba      	b.n	800ab20 <HAL_RCC_OscConfig+0x1d0>
 800abaa:	f023 0301 	bic.w	r3, r3, #1
 800abae:	6223      	str	r3, [r4, #32]
 800abb0:	6a23      	ldr	r3, [r4, #32]
 800abb2:	f023 0304 	bic.w	r3, r3, #4
 800abb6:	e7b6      	b.n	800ab26 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abb8:	f7ff f828 	bl	8009c0c <HAL_GetTick>
 800abbc:	1b80      	subs	r0, r0, r6
 800abbe:	4540      	cmp	r0, r8
 800abc0:	d9b7      	bls.n	800ab32 <HAL_RCC_OscConfig+0x1e2>
 800abc2:	e706      	b.n	800a9d2 <HAL_RCC_OscConfig+0x82>
 800abc4:	40021000 	.word	0x40021000
 800abc8:	42420000 	.word	0x42420000
 800abcc:	20000010 	.word	0x20000010
 800abd0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800abd4:	4c2a      	ldr	r4, [pc, #168]	@ (800ac80 <HAL_RCC_OscConfig+0x330>)
 800abd6:	6862      	ldr	r2, [r4, #4]
 800abd8:	f002 020c 	and.w	r2, r2, #12
 800abdc:	2a08      	cmp	r2, #8
 800abde:	d03e      	beq.n	800ac5e <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800abe0:	2200      	movs	r2, #0
 800abe2:	2b02      	cmp	r3, #2
 800abe4:	4b27      	ldr	r3, [pc, #156]	@ (800ac84 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 800abe6:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800abe8:	d12c      	bne.n	800ac44 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800abea:	f7ff f80f 	bl	8009c0c <HAL_GetTick>
 800abee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800abf0:	6823      	ldr	r3, [r4, #0]
 800abf2:	0199      	lsls	r1, r3, #6
 800abf4:	d420      	bmi.n	800ac38 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800abf6:	6a2b      	ldr	r3, [r5, #32]
 800abf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abfc:	d105      	bne.n	800ac0a <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800abfe:	6862      	ldr	r2, [r4, #4]
 800ac00:	68a9      	ldr	r1, [r5, #8]
 800ac02:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800ac06:	430a      	orrs	r2, r1
 800ac08:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac0a:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800ac0c:	6862      	ldr	r2, [r4, #4]
 800ac0e:	430b      	orrs	r3, r1
 800ac10:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 800ac14:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800ac16:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac18:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800ac1a:	4b1a      	ldr	r3, [pc, #104]	@ (800ac84 <HAL_RCC_OscConfig+0x334>)
 800ac1c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800ac1e:	f7fe fff5 	bl	8009c0c <HAL_GetTick>
 800ac22:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ac24:	6823      	ldr	r3, [r4, #0]
 800ac26:	019a      	lsls	r2, r3, #6
 800ac28:	f53f aea8 	bmi.w	800a97c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac2c:	f7fe ffee 	bl	8009c0c <HAL_GetTick>
 800ac30:	1b40      	subs	r0, r0, r5
 800ac32:	2802      	cmp	r0, #2
 800ac34:	d9f6      	bls.n	800ac24 <HAL_RCC_OscConfig+0x2d4>
 800ac36:	e6cc      	b.n	800a9d2 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac38:	f7fe ffe8 	bl	8009c0c <HAL_GetTick>
 800ac3c:	1b80      	subs	r0, r0, r6
 800ac3e:	2802      	cmp	r0, #2
 800ac40:	d9d6      	bls.n	800abf0 <HAL_RCC_OscConfig+0x2a0>
 800ac42:	e6c6      	b.n	800a9d2 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800ac44:	f7fe ffe2 	bl	8009c0c <HAL_GetTick>
 800ac48:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac4a:	6823      	ldr	r3, [r4, #0]
 800ac4c:	019b      	lsls	r3, r3, #6
 800ac4e:	f57f ae95 	bpl.w	800a97c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac52:	f7fe ffdb 	bl	8009c0c <HAL_GetTick>
 800ac56:	1b40      	subs	r0, r0, r5
 800ac58:	2802      	cmp	r0, #2
 800ac5a:	d9f6      	bls.n	800ac4a <HAL_RCC_OscConfig+0x2fa>
 800ac5c:	e6b9      	b.n	800a9d2 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	f43f aea2 	beq.w	800a9a8 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 800ac64:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac66:	6a2b      	ldr	r3, [r5, #32]
 800ac68:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	f47f ae9b 	bne.w	800a9a8 <HAL_RCC_OscConfig+0x58>
 800ac72:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ac74:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac78:	1ac0      	subs	r0, r0, r3
 800ac7a:	bf18      	it	ne
 800ac7c:	2001      	movne	r0, #1
 800ac7e:	e6a9      	b.n	800a9d4 <HAL_RCC_OscConfig+0x84>
 800ac80:	40021000 	.word	0x40021000
 800ac84:	42420000 	.word	0x42420000

0800ac88 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 800ac88:	4a0d      	ldr	r2, [pc, #52]	@ (800acc0 <HAL_RCC_GetSysClockFreq+0x38>)
 800ac8a:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800ac8c:	f003 010c 	and.w	r1, r3, #12
 800ac90:	2908      	cmp	r1, #8
 800ac92:	d112      	bne.n	800acba <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800ac94:	480b      	ldr	r0, [pc, #44]	@ (800acc4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800ac96:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ac9a:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800ac9c:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ac9e:	d509      	bpl.n	800acb4 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800aca0:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800aca2:	4a09      	ldr	r2, [pc, #36]	@ (800acc8 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800aca4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800aca8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800acaa:	4a08      	ldr	r2, [pc, #32]	@ (800accc <HAL_RCC_GetSysClockFreq+0x44>)
 800acac:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800acae:	fbb0 f0f3 	udiv	r0, r0, r3
 800acb2:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800acb4:	4b06      	ldr	r3, [pc, #24]	@ (800acd0 <HAL_RCC_GetSysClockFreq+0x48>)
 800acb6:	4358      	muls	r0, r3
 800acb8:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800acba:	4803      	ldr	r0, [pc, #12]	@ (800acc8 <HAL_RCC_GetSysClockFreq+0x40>)
}
 800acbc:	4770      	bx	lr
 800acbe:	bf00      	nop
 800acc0:	40021000 	.word	0x40021000
 800acc4:	0800ba6e 	.word	0x0800ba6e
 800acc8:	007a1200 	.word	0x007a1200
 800accc:	0800ba6c 	.word	0x0800ba6c
 800acd0:	003d0900 	.word	0x003d0900

0800acd4 <HAL_RCC_ClockConfig>:
{
 800acd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acd8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800acda:	4604      	mov	r4, r0
 800acdc:	b910      	cbnz	r0, 800ace4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800acde:	2001      	movs	r0, #1
}
 800ace0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ace4:	4a44      	ldr	r2, [pc, #272]	@ (800adf8 <HAL_RCC_ClockConfig+0x124>)
 800ace6:	6813      	ldr	r3, [r2, #0]
 800ace8:	f003 0307 	and.w	r3, r3, #7
 800acec:	428b      	cmp	r3, r1
 800acee:	d328      	bcc.n	800ad42 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800acf0:	6821      	ldr	r1, [r4, #0]
 800acf2:	078e      	lsls	r6, r1, #30
 800acf4:	d430      	bmi.n	800ad58 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800acf6:	07ca      	lsls	r2, r1, #31
 800acf8:	d443      	bmi.n	800ad82 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800acfa:	4a3f      	ldr	r2, [pc, #252]	@ (800adf8 <HAL_RCC_ClockConfig+0x124>)
 800acfc:	6813      	ldr	r3, [r2, #0]
 800acfe:	f003 0307 	and.w	r3, r3, #7
 800ad02:	42ab      	cmp	r3, r5
 800ad04:	d865      	bhi.n	800add2 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad06:	6822      	ldr	r2, [r4, #0]
 800ad08:	4d3c      	ldr	r5, [pc, #240]	@ (800adfc <HAL_RCC_ClockConfig+0x128>)
 800ad0a:	f012 0f04 	tst.w	r2, #4
 800ad0e:	d16c      	bne.n	800adea <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad10:	0713      	lsls	r3, r2, #28
 800ad12:	d506      	bpl.n	800ad22 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ad14:	686b      	ldr	r3, [r5, #4]
 800ad16:	6922      	ldr	r2, [r4, #16]
 800ad18:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800ad1c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ad20:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ad22:	f7ff ffb1 	bl	800ac88 <HAL_RCC_GetSysClockFreq>
 800ad26:	686b      	ldr	r3, [r5, #4]
 800ad28:	4a35      	ldr	r2, [pc, #212]	@ (800ae00 <HAL_RCC_ClockConfig+0x12c>)
 800ad2a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800ad2e:	5cd3      	ldrb	r3, [r2, r3]
 800ad30:	40d8      	lsrs	r0, r3
 800ad32:	4b34      	ldr	r3, [pc, #208]	@ (800ae04 <HAL_RCC_ClockConfig+0x130>)
 800ad34:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800ad36:	4b34      	ldr	r3, [pc, #208]	@ (800ae08 <HAL_RCC_ClockConfig+0x134>)
 800ad38:	6818      	ldr	r0, [r3, #0]
 800ad3a:	f7fe ff25 	bl	8009b88 <HAL_InitTick>
  return HAL_OK;
 800ad3e:	2000      	movs	r0, #0
 800ad40:	e7ce      	b.n	800ace0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad42:	6813      	ldr	r3, [r2, #0]
 800ad44:	f023 0307 	bic.w	r3, r3, #7
 800ad48:	430b      	orrs	r3, r1
 800ad4a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad4c:	6813      	ldr	r3, [r2, #0]
 800ad4e:	f003 0307 	and.w	r3, r3, #7
 800ad52:	428b      	cmp	r3, r1
 800ad54:	d1c3      	bne.n	800acde <HAL_RCC_ClockConfig+0xa>
 800ad56:	e7cb      	b.n	800acf0 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad58:	4b28      	ldr	r3, [pc, #160]	@ (800adfc <HAL_RCC_ClockConfig+0x128>)
 800ad5a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad5e:	bf1e      	ittt	ne
 800ad60:	685a      	ldrne	r2, [r3, #4]
 800ad62:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 800ad66:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad68:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ad6a:	bf42      	ittt	mi
 800ad6c:	685a      	ldrmi	r2, [r3, #4]
 800ad6e:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 800ad72:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad74:	685a      	ldr	r2, [r3, #4]
 800ad76:	68a0      	ldr	r0, [r4, #8]
 800ad78:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800ad7c:	4302      	orrs	r2, r0
 800ad7e:	605a      	str	r2, [r3, #4]
 800ad80:	e7b9      	b.n	800acf6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad82:	6862      	ldr	r2, [r4, #4]
 800ad84:	4e1d      	ldr	r6, [pc, #116]	@ (800adfc <HAL_RCC_ClockConfig+0x128>)
 800ad86:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad88:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad8a:	d11a      	bne.n	800adc2 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad8c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad90:	d0a5      	beq.n	800acde <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ad92:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ad94:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ad98:	f023 0303 	bic.w	r3, r3, #3
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800ada0:	f7fe ff34 	bl	8009c0c <HAL_GetTick>
 800ada4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ada6:	6873      	ldr	r3, [r6, #4]
 800ada8:	6862      	ldr	r2, [r4, #4]
 800adaa:	f003 030c 	and.w	r3, r3, #12
 800adae:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800adb2:	d0a2      	beq.n	800acfa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800adb4:	f7fe ff2a 	bl	8009c0c <HAL_GetTick>
 800adb8:	1bc0      	subs	r0, r0, r7
 800adba:	4540      	cmp	r0, r8
 800adbc:	d9f3      	bls.n	800ada6 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800adbe:	2003      	movs	r0, #3
 800adc0:	e78e      	b.n	800ace0 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800adc2:	2a02      	cmp	r2, #2
 800adc4:	d102      	bne.n	800adcc <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800adc6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800adca:	e7e1      	b.n	800ad90 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800adcc:	f013 0f02 	tst.w	r3, #2
 800add0:	e7de      	b.n	800ad90 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800add2:	6813      	ldr	r3, [r2, #0]
 800add4:	f023 0307 	bic.w	r3, r3, #7
 800add8:	432b      	orrs	r3, r5
 800adda:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800addc:	6813      	ldr	r3, [r2, #0]
 800adde:	f003 0307 	and.w	r3, r3, #7
 800ade2:	42ab      	cmp	r3, r5
 800ade4:	f47f af7b 	bne.w	800acde <HAL_RCC_ClockConfig+0xa>
 800ade8:	e78d      	b.n	800ad06 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800adea:	686b      	ldr	r3, [r5, #4]
 800adec:	68e1      	ldr	r1, [r4, #12]
 800adee:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800adf2:	430b      	orrs	r3, r1
 800adf4:	606b      	str	r3, [r5, #4]
 800adf6:	e78b      	b.n	800ad10 <HAL_RCC_ClockConfig+0x3c>
 800adf8:	40022000 	.word	0x40022000
 800adfc:	40021000 	.word	0x40021000
 800ae00:	0800ba5c 	.word	0x0800ba5c
 800ae04:	20000010 	.word	0x20000010
 800ae08:	20000018 	.word	0x20000018

0800ae0c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ae0c:	4b04      	ldr	r3, [pc, #16]	@ (800ae20 <HAL_RCC_GetPCLK1Freq+0x14>)
 800ae0e:	4a05      	ldr	r2, [pc, #20]	@ (800ae24 <HAL_RCC_GetPCLK1Freq+0x18>)
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800ae16:	5cd3      	ldrb	r3, [r2, r3]
 800ae18:	4a03      	ldr	r2, [pc, #12]	@ (800ae28 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800ae1a:	6810      	ldr	r0, [r2, #0]
}
 800ae1c:	40d8      	lsrs	r0, r3
 800ae1e:	4770      	bx	lr
 800ae20:	40021000 	.word	0x40021000
 800ae24:	0800ba54 	.word	0x0800ba54
 800ae28:	20000010 	.word	0x20000010

0800ae2c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ae2c:	4b04      	ldr	r3, [pc, #16]	@ (800ae40 <HAL_RCC_GetPCLK2Freq+0x14>)
 800ae2e:	4a05      	ldr	r2, [pc, #20]	@ (800ae44 <HAL_RCC_GetPCLK2Freq+0x18>)
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800ae36:	5cd3      	ldrb	r3, [r2, r3]
 800ae38:	4a03      	ldr	r2, [pc, #12]	@ (800ae48 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800ae3a:	6810      	ldr	r0, [r2, #0]
}
 800ae3c:	40d8      	lsrs	r0, r3
 800ae3e:	4770      	bx	lr
 800ae40:	40021000 	.word	0x40021000
 800ae44:	0800ba54 	.word	0x0800ba54
 800ae48:	20000010 	.word	0x20000010

0800ae4c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae4c:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae4e:	6a02      	ldr	r2, [r0, #32]
{
 800ae50:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae52:	f022 0201 	bic.w	r2, r2, #1
 800ae56:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae58:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae5a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae5c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ae5e:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800ae62:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ae64:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800ae66:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800ae6a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ae6c:	4d0a      	ldr	r5, [pc, #40]	@ (800ae98 <TIM_OC1_SetConfig+0x4c>)
 800ae6e:	42a8      	cmp	r0, r5
 800ae70:	d10b      	bne.n	800ae8a <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ae72:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800ae74:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800ae78:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ae7a:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ae7e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800ae82:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800ae84:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800ae88:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae8a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae8c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ae8e:	684a      	ldr	r2, [r1, #4]
 800ae90:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae92:	6203      	str	r3, [r0, #32]
}
 800ae94:	bd70      	pop	{r4, r5, r6, pc}
 800ae96:	bf00      	nop
 800ae98:	40012c00 	.word	0x40012c00

0800ae9c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae9c:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae9e:	6a02      	ldr	r2, [r0, #32]
{
 800aea0:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aea2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800aea6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aea8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aeaa:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aeac:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aeae:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800aeb2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aeb4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800aeb6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aeba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aebe:	4d0b      	ldr	r5, [pc, #44]	@ (800aeec <TIM_OC3_SetConfig+0x50>)
 800aec0:	42a8      	cmp	r0, r5
 800aec2:	d10d      	bne.n	800aee0 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aec4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800aec6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aeca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aece:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aed2:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800aed6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 800aed8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aedc:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aee0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aee2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aee4:	684a      	ldr	r2, [r1, #4]
 800aee6:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aee8:	6203      	str	r3, [r0, #32]
}
 800aeea:	bd70      	pop	{r4, r5, r6, pc}
 800aeec:	40012c00 	.word	0x40012c00

0800aef0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aef0:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aef2:	6a02      	ldr	r2, [r0, #32]
{
 800aef4:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aef6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800aefa:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aefc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aefe:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af00:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800af02:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af06:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800af0a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800af0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800af10:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af14:	4d06      	ldr	r5, [pc, #24]	@ (800af30 <TIM_OC4_SetConfig+0x40>)
 800af16:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800af18:	bf02      	ittt	eq
 800af1a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800af1c:	f424 4480 	biceq.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800af20:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af24:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af26:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800af28:	684a      	ldr	r2, [r1, #4]
 800af2a:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af2c:	6203      	str	r3, [r0, #32]
}
 800af2e:	bd30      	pop	{r4, r5, pc}
 800af30:	40012c00 	.word	0x40012c00

0800af34 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800af34:	4770      	bx	lr

0800af36 <TIM_DMADelayPulseCplt>:
{
 800af36:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af38:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800af3a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800af3c:	4282      	cmp	r2, r0
 800af3e:	d10b      	bne.n	800af58 <TIM_DMADelayPulseCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af40:	2301      	movs	r3, #1
 800af42:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800af44:	6992      	ldr	r2, [r2, #24]
 800af46:	b90a      	cbnz	r2, 800af4c <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800af48:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af4c:	4620      	mov	r0, r4
 800af4e:	f7ff fff1 	bl	800af34 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af52:	2300      	movs	r3, #0
 800af54:	7723      	strb	r3, [r4, #28]
}
 800af56:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800af58:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800af5a:	4283      	cmp	r3, r0
 800af5c:	d108      	bne.n	800af70 <TIM_DMADelayPulseCplt+0x3a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800af5e:	2202      	movs	r2, #2
 800af60:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800af62:	699b      	ldr	r3, [r3, #24]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d1f1      	bne.n	800af4c <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800af68:	2301      	movs	r3, #1
 800af6a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800af6e:	e7ed      	b.n	800af4c <TIM_DMADelayPulseCplt+0x16>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800af70:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800af72:	4283      	cmp	r3, r0
 800af74:	d108      	bne.n	800af88 <TIM_DMADelayPulseCplt+0x52>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af76:	2204      	movs	r2, #4
 800af78:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800af7a:	699b      	ldr	r3, [r3, #24]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d1e5      	bne.n	800af4c <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800af80:	2301      	movs	r3, #1
 800af82:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800af86:	e7e1      	b.n	800af4c <TIM_DMADelayPulseCplt+0x16>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800af88:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800af8a:	4283      	cmp	r3, r0
 800af8c:	d1de      	bne.n	800af4c <TIM_DMADelayPulseCplt+0x16>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af8e:	2208      	movs	r2, #8
 800af90:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800af92:	699b      	ldr	r3, [r3, #24]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d1d9      	bne.n	800af4c <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800af98:	2301      	movs	r3, #1
 800af9a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800af9e:	e7d5      	b.n	800af4c <TIM_DMADelayPulseCplt+0x16>

0800afa0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
 800afa0:	4770      	bx	lr

0800afa2 <TIM_DMADelayPulseHalfCplt>:
{
 800afa2:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afa4:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800afa6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800afa8:	4283      	cmp	r3, r0
 800afaa:	d107      	bne.n	800afbc <TIM_DMADelayPulseHalfCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800afac:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800afae:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800afb0:	4620      	mov	r0, r4
 800afb2:	f7ff fff5 	bl	800afa0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afb6:	2300      	movs	r3, #0
 800afb8:	7723      	strb	r3, [r4, #28]
}
 800afba:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800afbc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800afbe:	4283      	cmp	r3, r0
 800afc0:	d101      	bne.n	800afc6 <TIM_DMADelayPulseHalfCplt+0x24>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800afc2:	2302      	movs	r3, #2
 800afc4:	e7f3      	b.n	800afae <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800afc6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800afc8:	4283      	cmp	r3, r0
 800afca:	d101      	bne.n	800afd0 <TIM_DMADelayPulseHalfCplt+0x2e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800afcc:	2304      	movs	r3, #4
 800afce:	e7ee      	b.n	800afae <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800afd0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800afd2:	4283      	cmp	r3, r0
 800afd4:	d1ec      	bne.n	800afb0 <TIM_DMADelayPulseHalfCplt+0xe>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800afd6:	2308      	movs	r3, #8
 800afd8:	e7e9      	b.n	800afae <TIM_DMADelayPulseHalfCplt+0xc>

0800afda <HAL_TIM_ErrorCallback>:
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
 800afda:	4770      	bx	lr

0800afdc <TIM_DMAError>:
{
 800afdc:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afde:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800afe0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800afe2:	4283      	cmp	r3, r0
 800afe4:	d109      	bne.n	800affa <TIM_DMAError+0x1e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800afe6:	2301      	movs	r3, #1
 800afe8:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800afea:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  HAL_TIM_ErrorCallback(htim);
 800afee:	4620      	mov	r0, r4
 800aff0:	f7ff fff3 	bl	800afda <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aff4:	2300      	movs	r3, #0
 800aff6:	7723      	strb	r3, [r4, #28]
}
 800aff8:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800affa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800affc:	4283      	cmp	r3, r0
 800affe:	d105      	bne.n	800b00c <TIM_DMAError+0x30>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b000:	2302      	movs	r3, #2
 800b002:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b004:	2301      	movs	r3, #1
 800b006:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800b00a:	e7f0      	b.n	800afee <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b00c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b00e:	4283      	cmp	r3, r0
 800b010:	f04f 0301 	mov.w	r3, #1
 800b014:	d104      	bne.n	800b020 <TIM_DMAError+0x44>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b016:	2204      	movs	r2, #4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800b018:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b01c:	7722      	strb	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800b01e:	e7e6      	b.n	800afee <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b020:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800b022:	4282      	cmp	r2, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b024:	bf03      	ittte	eq
 800b026:	2208      	moveq	r2, #8
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800b028:	f884 3041 	strbeq.w	r3, [r4, #65]	@ 0x41
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b02c:	7722      	strbeq	r2, [r4, #28]
    htim->State = HAL_TIM_STATE_READY;
 800b02e:	f884 303d 	strbne.w	r3, [r4, #61]	@ 0x3d
 800b032:	e7dc      	b.n	800afee <TIM_DMAError+0x12>

0800b034 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b034:	4a1e      	ldr	r2, [pc, #120]	@ (800b0b0 <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 800b036:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b038:	4290      	cmp	r0, r2
 800b03a:	d00a      	beq.n	800b052 <TIM_Base_SetConfig+0x1e>
 800b03c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800b040:	d007      	beq.n	800b052 <TIM_Base_SetConfig+0x1e>
 800b042:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800b046:	4290      	cmp	r0, r2
 800b048:	d003      	beq.n	800b052 <TIM_Base_SetConfig+0x1e>
 800b04a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b04e:	4290      	cmp	r0, r2
 800b050:	d115      	bne.n	800b07e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 800b052:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b054:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800b058:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b05a:	4a15      	ldr	r2, [pc, #84]	@ (800b0b0 <TIM_Base_SetConfig+0x7c>)
 800b05c:	4290      	cmp	r0, r2
 800b05e:	d00a      	beq.n	800b076 <TIM_Base_SetConfig+0x42>
 800b060:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800b064:	d007      	beq.n	800b076 <TIM_Base_SetConfig+0x42>
 800b066:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800b06a:	4290      	cmp	r0, r2
 800b06c:	d003      	beq.n	800b076 <TIM_Base_SetConfig+0x42>
 800b06e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b072:	4290      	cmp	r0, r2
 800b074:	d103      	bne.n	800b07e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b076:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800b078:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b07c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b07e:	694a      	ldr	r2, [r1, #20]
 800b080:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b084:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800b086:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b088:	688b      	ldr	r3, [r1, #8]
 800b08a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b08c:	680b      	ldr	r3, [r1, #0]
 800b08e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b090:	4b07      	ldr	r3, [pc, #28]	@ (800b0b0 <TIM_Base_SetConfig+0x7c>)
 800b092:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 800b094:	bf04      	itt	eq
 800b096:	690b      	ldreq	r3, [r1, #16]
 800b098:	6303      	streq	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800b09a:	2301      	movs	r3, #1
 800b09c:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b09e:	6903      	ldr	r3, [r0, #16]
 800b0a0:	07db      	lsls	r3, r3, #31
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b0a2:	bf42      	ittt	mi
 800b0a4:	6903      	ldrmi	r3, [r0, #16]
 800b0a6:	f023 0301 	bicmi.w	r3, r3, #1
 800b0aa:	6103      	strmi	r3, [r0, #16]
}
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop
 800b0b0:	40012c00 	.word	0x40012c00

0800b0b4 <HAL_TIM_PWM_Init>:
{
 800b0b4:	b510      	push	{r4, lr}
  if (htim == NULL)
 800b0b6:	4604      	mov	r4, r0
 800b0b8:	b330      	cbz	r0, 800b108 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800b0ba:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800b0be:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800b0c2:	b91b      	cbnz	r3, 800b0cc <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800b0c4:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800b0c8:	f7fe fb12 	bl	80096f0 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800b0cc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b0ce:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800b0d0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b0d4:	1d21      	adds	r1, r4, #4
 800b0d6:	f7ff ffad 	bl	800b034 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0da:	2301      	movs	r3, #1
  return HAL_OK;
 800b0dc:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0de:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0e2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800b0e6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800b0ea:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800b0ee:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0f2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b0f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0fa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800b0fe:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800b102:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800b106:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800b108:	2001      	movs	r0, #1
 800b10a:	e7fc      	b.n	800b106 <HAL_TIM_PWM_Init+0x52>

0800b10c <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 800b10c:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b10e:	6a02      	ldr	r2, [r0, #32]
{
 800b110:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b112:	f022 0210 	bic.w	r2, r2, #16
 800b116:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800b118:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800b11a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b11c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b11e:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b122:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b126:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800b128:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b12c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b130:	4d0b      	ldr	r5, [pc, #44]	@ (800b160 <TIM_OC2_SetConfig+0x54>)
 800b132:	42a8      	cmp	r0, r5
 800b134:	d10d      	bne.n	800b152 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b136:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800b138:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b13c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b140:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b144:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800b148:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800b14a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b14e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800b152:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800b154:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800b156:	684a      	ldr	r2, [r1, #4]
 800b158:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800b15a:	6203      	str	r3, [r0, #32]
}
 800b15c:	bd70      	pop	{r4, r5, r6, pc}
 800b15e:	bf00      	nop
 800b160:	40012c00 	.word	0x40012c00

0800b164 <HAL_TIM_PWM_ConfigChannel>:
{
 800b164:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800b166:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 800b16a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	d04f      	beq.n	800b210 <HAL_TIM_PWM_ConfigChannel+0xac>
 800b170:	2001      	movs	r0, #1
  switch (Channel)
 800b172:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 800b174:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
  switch (Channel)
 800b178:	d03a      	beq.n	800b1f0 <HAL_TIM_PWM_ConfigChannel+0x8c>
 800b17a:	d806      	bhi.n	800b18a <HAL_TIM_PWM_ConfigChannel+0x26>
 800b17c:	b1ba      	cbz	r2, 800b1ae <HAL_TIM_PWM_ConfigChannel+0x4a>
 800b17e:	2a04      	cmp	r2, #4
 800b180:	d026      	beq.n	800b1d0 <HAL_TIM_PWM_ConfigChannel+0x6c>
  __HAL_UNLOCK(htim);
 800b182:	2300      	movs	r3, #0
 800b184:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800b188:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800b18a:	2a0c      	cmp	r2, #12
 800b18c:	d1f9      	bne.n	800b182 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b18e:	6820      	ldr	r0, [r4, #0]
 800b190:	f7ff feae 	bl	800aef0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b194:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b196:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b198:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800b19c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b19e:	69c3      	ldr	r3, [r0, #28]
 800b1a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b1a4:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b1a6:	69c3      	ldr	r3, [r0, #28]
 800b1a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b1ac:	e02e      	b.n	800b20c <HAL_TIM_PWM_ConfigChannel+0xa8>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b1ae:	6820      	ldr	r0, [r4, #0]
 800b1b0:	f7ff fe4c 	bl	800ae4c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b1b4:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b1b6:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b1b8:	f043 0308 	orr.w	r3, r3, #8
 800b1bc:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b1be:	6983      	ldr	r3, [r0, #24]
 800b1c0:	f023 0304 	bic.w	r3, r3, #4
 800b1c4:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b1c6:	6983      	ldr	r3, [r0, #24]
 800b1c8:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b1ca:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800b1cc:	2000      	movs	r0, #0
 800b1ce:	e7d8      	b.n	800b182 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b1d0:	6820      	ldr	r0, [r4, #0]
 800b1d2:	f7ff ff9b 	bl	800b10c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b1d6:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b1d8:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b1da:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800b1de:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b1e0:	6983      	ldr	r3, [r0, #24]
 800b1e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b1e6:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b1e8:	6983      	ldr	r3, [r0, #24]
 800b1ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b1ee:	e7ec      	b.n	800b1ca <HAL_TIM_PWM_ConfigChannel+0x66>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b1f0:	6820      	ldr	r0, [r4, #0]
 800b1f2:	f7ff fe53 	bl	800ae9c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b1f6:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b1f8:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b1fa:	f043 0308 	orr.w	r3, r3, #8
 800b1fe:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b200:	69c3      	ldr	r3, [r0, #28]
 800b202:	f023 0304 	bic.w	r3, r3, #4
 800b206:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b208:	69c3      	ldr	r3, [r0, #28]
 800b20a:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b20c:	61c3      	str	r3, [r0, #28]
      break;
 800b20e:	e7dd      	b.n	800b1cc <HAL_TIM_PWM_ConfigChannel+0x68>
  __HAL_LOCK(htim);
 800b210:	2002      	movs	r0, #2
 800b212:	e7b9      	b.n	800b188 <HAL_TIM_PWM_ConfigChannel+0x24>

0800b214 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b214:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b216:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b218:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b21a:	f001 011f 	and.w	r1, r1, #31
 800b21e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800b220:	ea23 0304 	bic.w	r3, r3, r4
 800b224:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b226:	6a03      	ldr	r3, [r0, #32]
 800b228:	408a      	lsls	r2, r1
 800b22a:	431a      	orrs	r2, r3
 800b22c:	6202      	str	r2, [r0, #32]
}
 800b22e:	bd10      	pop	{r4, pc}

0800b230 <HAL_TIM_OC_Start>:
{
 800b230:	b508      	push	{r3, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b232:	b929      	cbnz	r1, 800b240 <HAL_TIM_OC_Start+0x10>
 800b234:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d01d      	beq.n	800b278 <HAL_TIM_OC_Start+0x48>
    return HAL_ERROR;
 800b23c:	2001      	movs	r0, #1
 800b23e:	e02e      	b.n	800b29e <HAL_TIM_OC_Start+0x6e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b240:	2904      	cmp	r1, #4
 800b242:	d107      	bne.n	800b254 <HAL_TIM_OC_Start+0x24>
 800b244:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d1f7      	bne.n	800b23c <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b24c:	2302      	movs	r3, #2
 800b24e:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 800b252:	e014      	b.n	800b27e <HAL_TIM_OC_Start+0x4e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b254:	2908      	cmp	r1, #8
 800b256:	d107      	bne.n	800b268 <HAL_TIM_OC_Start+0x38>
 800b258:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d1ed      	bne.n	800b23c <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b260:	2302      	movs	r3, #2
 800b262:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800b266:	e00a      	b.n	800b27e <HAL_TIM_OC_Start+0x4e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b268:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d1e5      	bne.n	800b23c <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b270:	2302      	movs	r3, #2
 800b272:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 800b276:	e002      	b.n	800b27e <HAL_TIM_OC_Start+0x4e>
 800b278:	2302      	movs	r3, #2
 800b27a:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b27e:	6800      	ldr	r0, [r0, #0]
 800b280:	2201      	movs	r2, #1
 800b282:	f7ff ffc7 	bl	800b214 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b286:	4b0f      	ldr	r3, [pc, #60]	@ (800b2c4 <HAL_TIM_OC_Start+0x94>)
 800b288:	4298      	cmp	r0, r3
 800b28a:	d009      	beq.n	800b2a0 <HAL_TIM_OC_Start+0x70>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b28c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800b290:	d10b      	bne.n	800b2aa <HAL_TIM_OC_Start+0x7a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b292:	6883      	ldr	r3, [r0, #8]
 800b294:	f003 0307 	and.w	r3, r3, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b298:	2b06      	cmp	r3, #6
 800b29a:	d10d      	bne.n	800b2b8 <HAL_TIM_OC_Start+0x88>
  return HAL_OK;
 800b29c:	2000      	movs	r0, #0
}
 800b29e:	bd08      	pop	{r3, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 800b2a0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800b2a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b2a6:	6443      	str	r3, [r0, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2a8:	e7f3      	b.n	800b292 <HAL_TIM_OC_Start+0x62>
 800b2aa:	4b07      	ldr	r3, [pc, #28]	@ (800b2c8 <HAL_TIM_OC_Start+0x98>)
 800b2ac:	4298      	cmp	r0, r3
 800b2ae:	d0f0      	beq.n	800b292 <HAL_TIM_OC_Start+0x62>
 800b2b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b2b4:	4298      	cmp	r0, r3
 800b2b6:	d0ec      	beq.n	800b292 <HAL_TIM_OC_Start+0x62>
      __HAL_TIM_ENABLE(htim);
 800b2b8:	6803      	ldr	r3, [r0, #0]
 800b2ba:	f043 0301 	orr.w	r3, r3, #1
 800b2be:	6003      	str	r3, [r0, #0]
 800b2c0:	e7ec      	b.n	800b29c <HAL_TIM_OC_Start+0x6c>
 800b2c2:	bf00      	nop
 800b2c4:	40012c00 	.word	0x40012c00
 800b2c8:	40000400 	.word	0x40000400

0800b2cc <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 800b2cc:	f7ff bfb0 	b.w	800b230 <HAL_TIM_OC_Start>

0800b2d0 <HAL_TIM_OC_Start_DMA>:
{
 800b2d0:	b538      	push	{r3, r4, r5, lr}
 800b2d2:	460d      	mov	r5, r1
 800b2d4:	4604      	mov	r4, r0
 800b2d6:	4611      	mov	r1, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800b2d8:	b955      	cbnz	r5, 800b2f0 <HAL_TIM_OC_Start_DMA+0x20>
 800b2da:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
 800b2de:	f1a0 0c02 	sub.w	ip, r0, #2
 800b2e2:	f1dc 0000 	rsbs	r0, ip, #0
 800b2e6:	eb40 000c 	adc.w	r0, r0, ip
 800b2ea:	b170      	cbz	r0, 800b30a <HAL_TIM_OC_Start_DMA+0x3a>
    return HAL_BUSY;
 800b2ec:	2002      	movs	r0, #2
 800b2ee:	e04d      	b.n	800b38c <HAL_TIM_OC_Start_DMA+0xbc>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800b2f0:	2d04      	cmp	r5, #4
 800b2f2:	d102      	bne.n	800b2fa <HAL_TIM_OC_Start_DMA+0x2a>
 800b2f4:	f890 003f 	ldrb.w	r0, [r0, #63]	@ 0x3f
 800b2f8:	e7f1      	b.n	800b2de <HAL_TIM_OC_Start_DMA+0xe>
 800b2fa:	2d08      	cmp	r5, #8
 800b2fc:	d102      	bne.n	800b304 <HAL_TIM_OC_Start_DMA+0x34>
 800b2fe:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 800b302:	e7ec      	b.n	800b2de <HAL_TIM_OC_Start_DMA+0xe>
 800b304:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 800b308:	e7e9      	b.n	800b2de <HAL_TIM_OC_Start_DMA+0xe>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800b30a:	b93d      	cbnz	r5, 800b31c <HAL_TIM_OC_Start_DMA+0x4c>
 800b30c:	f894 003e 	ldrb.w	r0, [r4, #62]	@ 0x3e
 800b310:	1e42      	subs	r2, r0, #1
 800b312:	4250      	negs	r0, r2
 800b314:	4150      	adcs	r0, r2
 800b316:	b970      	cbnz	r0, 800b336 <HAL_TIM_OC_Start_DMA+0x66>
      return HAL_ERROR;
 800b318:	2001      	movs	r0, #1
 800b31a:	e037      	b.n	800b38c <HAL_TIM_OC_Start_DMA+0xbc>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800b31c:	2d04      	cmp	r5, #4
 800b31e:	d102      	bne.n	800b326 <HAL_TIM_OC_Start_DMA+0x56>
 800b320:	f894 003f 	ldrb.w	r0, [r4, #63]	@ 0x3f
 800b324:	e7f4      	b.n	800b310 <HAL_TIM_OC_Start_DMA+0x40>
 800b326:	2d08      	cmp	r5, #8
 800b328:	d102      	bne.n	800b330 <HAL_TIM_OC_Start_DMA+0x60>
 800b32a:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 800b32e:	e7ef      	b.n	800b310 <HAL_TIM_OC_Start_DMA+0x40>
 800b330:	f894 0041 	ldrb.w	r0, [r4, #65]	@ 0x41
 800b334:	e7ec      	b.n	800b310 <HAL_TIM_OC_Start_DMA+0x40>
    if ((pData == NULL) || (Length == 0U))
 800b336:	2900      	cmp	r1, #0
 800b338:	d0ee      	beq.n	800b318 <HAL_TIM_OC_Start_DMA+0x48>
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d0ec      	beq.n	800b318 <HAL_TIM_OC_Start_DMA+0x48>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b33e:	2202      	movs	r2, #2
 800b340:	bb2d      	cbnz	r5, 800b38e <HAL_TIM_OC_Start_DMA+0xbe>
 800b342:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b346:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800b348:	4a3a      	ldr	r2, [pc, #232]	@ (800b434 <HAL_TIM_OC_Start_DMA+0x164>)
 800b34a:	6282      	str	r2, [r0, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b34c:	4a3a      	ldr	r2, [pc, #232]	@ (800b438 <HAL_TIM_OC_Start_DMA+0x168>)
 800b34e:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800b350:	4a3a      	ldr	r2, [pc, #232]	@ (800b43c <HAL_TIM_OC_Start_DMA+0x16c>)
 800b352:	6302      	str	r2, [r0, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800b354:	6822      	ldr	r2, [r4, #0]
 800b356:	3234      	adds	r2, #52	@ 0x34
 800b358:	f7ff f814 	bl	800a384 <HAL_DMA_Start_IT>
 800b35c:	2800      	cmp	r0, #0
 800b35e:	d1db      	bne.n	800b318 <HAL_TIM_OC_Start_DMA+0x48>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800b360:	6822      	ldr	r2, [r4, #0]
 800b362:	68d3      	ldr	r3, [r2, #12]
 800b364:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800b368:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b36a:	6820      	ldr	r0, [r4, #0]
 800b36c:	2201      	movs	r2, #1
 800b36e:	4629      	mov	r1, r5
 800b370:	f7ff ff50 	bl	800b214 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b374:	4b32      	ldr	r3, [pc, #200]	@ (800b440 <HAL_TIM_OC_Start_DMA+0x170>)
 800b376:	4298      	cmp	r0, r3
 800b378:	d04b      	beq.n	800b412 <HAL_TIM_OC_Start_DMA+0x142>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b37a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800b37e:	d14d      	bne.n	800b41c <HAL_TIM_OC_Start_DMA+0x14c>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b380:	6883      	ldr	r3, [r0, #8]
 800b382:	f003 0307 	and.w	r3, r3, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b386:	2b06      	cmp	r3, #6
 800b388:	d14f      	bne.n	800b42a <HAL_TIM_OC_Start_DMA+0x15a>
    return HAL_BUSY;
 800b38a:	2000      	movs	r0, #0
}
 800b38c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b38e:	2d04      	cmp	r5, #4
 800b390:	d113      	bne.n	800b3ba <HAL_TIM_OC_Start_DMA+0xea>
 800b392:	f884 203f 	strb.w	r2, [r4, #63]	@ 0x3f
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b396:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800b398:	4a26      	ldr	r2, [pc, #152]	@ (800b434 <HAL_TIM_OC_Start_DMA+0x164>)
 800b39a:	6282      	str	r2, [r0, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b39c:	4a26      	ldr	r2, [pc, #152]	@ (800b438 <HAL_TIM_OC_Start_DMA+0x168>)
 800b39e:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800b3a0:	4a26      	ldr	r2, [pc, #152]	@ (800b43c <HAL_TIM_OC_Start_DMA+0x16c>)
 800b3a2:	6302      	str	r2, [r0, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800b3a4:	6822      	ldr	r2, [r4, #0]
 800b3a6:	3238      	adds	r2, #56	@ 0x38
 800b3a8:	f7fe ffec 	bl	800a384 <HAL_DMA_Start_IT>
 800b3ac:	2800      	cmp	r0, #0
 800b3ae:	d1b3      	bne.n	800b318 <HAL_TIM_OC_Start_DMA+0x48>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800b3b0:	6822      	ldr	r2, [r4, #0]
 800b3b2:	68d3      	ldr	r3, [r2, #12]
 800b3b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b3b8:	e7d6      	b.n	800b368 <HAL_TIM_OC_Start_DMA+0x98>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b3ba:	2d08      	cmp	r5, #8
 800b3bc:	d113      	bne.n	800b3e6 <HAL_TIM_OC_Start_DMA+0x116>
 800b3be:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b3c2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800b3c4:	4a1b      	ldr	r2, [pc, #108]	@ (800b434 <HAL_TIM_OC_Start_DMA+0x164>)
 800b3c6:	6282      	str	r2, [r0, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b3c8:	4a1b      	ldr	r2, [pc, #108]	@ (800b438 <HAL_TIM_OC_Start_DMA+0x168>)
 800b3ca:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800b3cc:	4a1b      	ldr	r2, [pc, #108]	@ (800b43c <HAL_TIM_OC_Start_DMA+0x16c>)
 800b3ce:	6302      	str	r2, [r0, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800b3d0:	6822      	ldr	r2, [r4, #0]
 800b3d2:	323c      	adds	r2, #60	@ 0x3c
 800b3d4:	f7fe ffd6 	bl	800a384 <HAL_DMA_Start_IT>
 800b3d8:	2800      	cmp	r0, #0
 800b3da:	d19d      	bne.n	800b318 <HAL_TIM_OC_Start_DMA+0x48>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800b3dc:	6822      	ldr	r2, [r4, #0]
 800b3de:	68d3      	ldr	r3, [r2, #12]
 800b3e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800b3e4:	e7c0      	b.n	800b368 <HAL_TIM_OC_Start_DMA+0x98>
  switch (Channel)
 800b3e6:	2d0c      	cmp	r5, #12
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b3e8:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  switch (Channel)
 800b3ec:	d194      	bne.n	800b318 <HAL_TIM_OC_Start_DMA+0x48>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b3ee:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800b3f0:	4a10      	ldr	r2, [pc, #64]	@ (800b434 <HAL_TIM_OC_Start_DMA+0x164>)
 800b3f2:	6282      	str	r2, [r0, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b3f4:	4a10      	ldr	r2, [pc, #64]	@ (800b438 <HAL_TIM_OC_Start_DMA+0x168>)
 800b3f6:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800b3f8:	4a10      	ldr	r2, [pc, #64]	@ (800b43c <HAL_TIM_OC_Start_DMA+0x16c>)
 800b3fa:	6302      	str	r2, [r0, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800b3fc:	6822      	ldr	r2, [r4, #0]
 800b3fe:	3240      	adds	r2, #64	@ 0x40
 800b400:	f7fe ffc0 	bl	800a384 <HAL_DMA_Start_IT>
 800b404:	2800      	cmp	r0, #0
 800b406:	d187      	bne.n	800b318 <HAL_TIM_OC_Start_DMA+0x48>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800b408:	6822      	ldr	r2, [r4, #0]
 800b40a:	68d3      	ldr	r3, [r2, #12]
 800b40c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b410:	e7aa      	b.n	800b368 <HAL_TIM_OC_Start_DMA+0x98>
      __HAL_TIM_MOE_ENABLE(htim);
 800b412:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800b414:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b418:	6443      	str	r3, [r0, #68]	@ 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b41a:	e7b1      	b.n	800b380 <HAL_TIM_OC_Start_DMA+0xb0>
 800b41c:	4b09      	ldr	r3, [pc, #36]	@ (800b444 <HAL_TIM_OC_Start_DMA+0x174>)
 800b41e:	4298      	cmp	r0, r3
 800b420:	d0ae      	beq.n	800b380 <HAL_TIM_OC_Start_DMA+0xb0>
 800b422:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b426:	4298      	cmp	r0, r3
 800b428:	d0aa      	beq.n	800b380 <HAL_TIM_OC_Start_DMA+0xb0>
        __HAL_TIM_ENABLE(htim);
 800b42a:	6803      	ldr	r3, [r0, #0]
 800b42c:	f043 0301 	orr.w	r3, r3, #1
 800b430:	6003      	str	r3, [r0, #0]
 800b432:	e7aa      	b.n	800b38a <HAL_TIM_OC_Start_DMA+0xba>
 800b434:	0800af37 	.word	0x0800af37
 800b438:	0800afa3 	.word	0x0800afa3
 800b43c:	0800afdd 	.word	0x0800afdd
 800b440:	40012c00 	.word	0x40012c00
 800b444:	40000400 	.word	0x40000400

0800b448 <HAL_TIM_PWM_Start_DMA>:
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
 800b448:	f7ff bf42 	b.w	800b2d0 <HAL_TIM_OC_Start_DMA>

0800b44c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b44c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b44e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 800b452:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 800b454:	2b01      	cmp	r3, #1
 800b456:	f04f 0002 	mov.w	r0, #2
 800b45a:	d022      	beq.n	800b4a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b45c:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800b45e:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 800b462:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b464:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800b466:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b46a:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 800b46c:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b46e:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b470:	4c0c      	ldr	r4, [pc, #48]	@ (800b4a4 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800b472:	42a3      	cmp	r3, r4
 800b474:	d00a      	beq.n	800b48c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800b476:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b47a:	d007      	beq.n	800b48c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800b47c:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 800b480:	42a3      	cmp	r3, r4
 800b482:	d003      	beq.n	800b48c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800b484:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800b488:	42a3      	cmp	r3, r4
 800b48a:	d104      	bne.n	800b496 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b48c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b48e:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b492:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b494:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b496:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800b498:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800b49a:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800b49e:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 800b4a2:	bd30      	pop	{r4, r5, pc}
 800b4a4:	40012c00 	.word	0x40012c00

0800b4a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b4a8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 800b4ac:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	d01e      	beq.n	800b4f0 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b4b2:	68cb      	ldr	r3, [r1, #12]
 800b4b4:	6888      	ldr	r0, [r1, #8]
 800b4b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b4ba:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b4bc:	6848      	ldr	r0, [r1, #4]
 800b4be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b4c2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b4c4:	6808      	ldr	r0, [r1, #0]
 800b4c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b4ca:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b4cc:	6908      	ldr	r0, [r1, #16]
 800b4ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b4d2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b4d4:	6948      	ldr	r0, [r1, #20]
 800b4d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b4da:	4303      	orrs	r3, r0


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 800b4dc:	2000      	movs	r0, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b4de:	69c9      	ldr	r1, [r1, #28]
 800b4e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b4e4:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 800b4e6:	6811      	ldr	r1, [r2, #0]
 800b4e8:	644b      	str	r3, [r1, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 800b4ea:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 800b4ee:	4770      	bx	lr
  __HAL_LOCK(htim);
 800b4f0:	2002      	movs	r0, #2
}
 800b4f2:	4770      	bx	lr

0800b4f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b4f4:	b510      	push	{r4, lr}
 800b4f6:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b4f8:	6803      	ldr	r3, [r0, #0]
 800b4fa:	68c1      	ldr	r1, [r0, #12]
 800b4fc:	691a      	ldr	r2, [r3, #16]
 800b4fe:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800b502:	430a      	orrs	r2, r1
 800b504:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800b506:	6882      	ldr	r2, [r0, #8]
 800b508:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800b50a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800b50c:	4302      	orrs	r2, r0
 800b50e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800b510:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 800b514:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800b518:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800b51a:	430a      	orrs	r2, r1
 800b51c:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b51e:	695a      	ldr	r2, [r3, #20]
 800b520:	69a1      	ldr	r1, [r4, #24]
 800b522:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800b526:	430a      	orrs	r2, r1
 800b528:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800b52a:	4a0e      	ldr	r2, [pc, #56]	@ (800b564 <UART_SetConfig+0x70>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d115      	bne.n	800b55c <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b530:	f7ff fc7c 	bl	800ae2c <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b534:	2319      	movs	r3, #25
 800b536:	4343      	muls	r3, r0
 800b538:	6862      	ldr	r2, [r4, #4]
 800b53a:	6820      	ldr	r0, [r4, #0]
 800b53c:	0092      	lsls	r2, r2, #2
 800b53e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b542:	2264      	movs	r2, #100	@ 0x64
 800b544:	fbb3 f1f2 	udiv	r1, r3, r2
 800b548:	fb02 3311 	mls	r3, r2, r1, r3
 800b54c:	011b      	lsls	r3, r3, #4
 800b54e:	3332      	adds	r3, #50	@ 0x32
 800b550:	fbb3 f3f2 	udiv	r3, r3, r2
 800b554:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800b558:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 800b55a:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 800b55c:	f7ff fc56 	bl	800ae0c <HAL_RCC_GetPCLK1Freq>
 800b560:	e7e8      	b.n	800b534 <UART_SetConfig+0x40>
 800b562:	bf00      	nop
 800b564:	40013800 	.word	0x40013800

0800b568 <HAL_UART_Init>:
{
 800b568:	b510      	push	{r4, lr}
  if (huart == NULL)
 800b56a:	4604      	mov	r4, r0
 800b56c:	b348      	cbz	r0, 800b5c2 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 800b56e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800b572:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800b576:	b91b      	cbnz	r3, 800b580 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800b578:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 800b57c:	f7fe faae 	bl	8009adc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800b580:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800b582:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b584:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800b588:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800b58a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800b58c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b590:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800b592:	f7ff ffaf 	bl	800b4f4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b596:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b598:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b59a:	691a      	ldr	r2, [r3, #16]
 800b59c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b5a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b5a2:	695a      	ldr	r2, [r3, #20]
 800b5a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b5a8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800b5aa:	68da      	ldr	r2, [r3, #12]
 800b5ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b5b0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800b5b2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5b4:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b5b6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b5ba:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5be:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800b5c0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800b5c2:	2001      	movs	r0, #1
 800b5c4:	e7fc      	b.n	800b5c0 <HAL_UART_Init+0x58>

0800b5c6 <memset>:
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	4402      	add	r2, r0
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d100      	bne.n	800b5d0 <memset+0xa>
 800b5ce:	4770      	bx	lr
 800b5d0:	f803 1b01 	strb.w	r1, [r3], #1
 800b5d4:	e7f9      	b.n	800b5ca <memset+0x4>
	...

0800b5d8 <__libc_init_array>:
 800b5d8:	b570      	push	{r4, r5, r6, lr}
 800b5da:	2600      	movs	r6, #0
 800b5dc:	4d0c      	ldr	r5, [pc, #48]	@ (800b610 <__libc_init_array+0x38>)
 800b5de:	4c0d      	ldr	r4, [pc, #52]	@ (800b614 <__libc_init_array+0x3c>)
 800b5e0:	1b64      	subs	r4, r4, r5
 800b5e2:	10a4      	asrs	r4, r4, #2
 800b5e4:	42a6      	cmp	r6, r4
 800b5e6:	d109      	bne.n	800b5fc <__libc_init_array+0x24>
 800b5e8:	f000 f828 	bl	800b63c <_init>
 800b5ec:	2600      	movs	r6, #0
 800b5ee:	4d0a      	ldr	r5, [pc, #40]	@ (800b618 <__libc_init_array+0x40>)
 800b5f0:	4c0a      	ldr	r4, [pc, #40]	@ (800b61c <__libc_init_array+0x44>)
 800b5f2:	1b64      	subs	r4, r4, r5
 800b5f4:	10a4      	asrs	r4, r4, #2
 800b5f6:	42a6      	cmp	r6, r4
 800b5f8:	d105      	bne.n	800b606 <__libc_init_array+0x2e>
 800b5fa:	bd70      	pop	{r4, r5, r6, pc}
 800b5fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b600:	4798      	blx	r3
 800b602:	3601      	adds	r6, #1
 800b604:	e7ee      	b.n	800b5e4 <__libc_init_array+0xc>
 800b606:	f855 3b04 	ldr.w	r3, [r5], #4
 800b60a:	4798      	blx	r3
 800b60c:	3601      	adds	r6, #1
 800b60e:	e7f2      	b.n	800b5f6 <__libc_init_array+0x1e>
 800b610:	0800ba80 	.word	0x0800ba80
 800b614:	0800ba80 	.word	0x0800ba80
 800b618:	0800ba80 	.word	0x0800ba80
 800b61c:	0800ba84 	.word	0x0800ba84

0800b620 <memcpy>:
 800b620:	440a      	add	r2, r1
 800b622:	4291      	cmp	r1, r2
 800b624:	f100 33ff 	add.w	r3, r0, #4294967295
 800b628:	d100      	bne.n	800b62c <memcpy+0xc>
 800b62a:	4770      	bx	lr
 800b62c:	b510      	push	{r4, lr}
 800b62e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b632:	4291      	cmp	r1, r2
 800b634:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b638:	d1f9      	bne.n	800b62e <memcpy+0xe>
 800b63a:	bd10      	pop	{r4, pc}

0800b63c <_init>:
 800b63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b63e:	bf00      	nop
 800b640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b642:	bc08      	pop	{r3}
 800b644:	469e      	mov	lr, r3
 800b646:	4770      	bx	lr

0800b648 <_fini>:
 800b648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b64a:	bf00      	nop
 800b64c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b64e:	bc08      	pop	{r3}
 800b650:	469e      	mov	lr, r3
 800b652:	4770      	bx	lr
